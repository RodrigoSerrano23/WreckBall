
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 26 12:32:19 MST 2019
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 26 12:32:19 MST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\010\000\002\002" +
    "\007\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\004\005\000\002\004\005\000\002\004" +
    "\007\000\002\004\007\000\002\004\006\000\002\004\007" +
    "\000\002\004\006\000\002\004\007\000\002\004\006\000" +
    "\002\004\005\000\002\004\007\000\002\004\006\000\002" +
    "\004\007\000\002\004\006\000\002\004\007\000\002\004" +
    "\007\000\002\004\007\000\002\004\007\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\007\000\002\004\007\000\002\004\007\000\002\004" +
    "\007\000\002\004\007\000\002\004\007\000\002\004\007" +
    "\000\002\004\006\000\002\004\006\000\002\004\004\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\006\011\000\002\006\011\000\002\006\012\000\002\006" +
    "\012\000\002\007\006\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\002\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\010" +
    "\011\000\002\010\011\000\002\010\011\000\002\011\013" +
    "\000\002\011\013\000\002\011\013\000\002\012\011\000" +
    "\002\015\012\000\002\015\011\000\002\005\005\000\002" +
    "\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\004\047\004\001\002\000\004\041\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\042\010\001\002\000\004\043\011\001\002\000" +
    "\046\006\023\007\032\011\030\013\035\014\041\015\014" +
    "\016\037\017\034\020\021\021\012\022\036\023\031\024" +
    "\033\025\026\026\013\044\025\051\022\053\015\001\002" +
    "\000\004\041\371\001\002\000\004\041\366\001\002\000" +
    "\004\041\334\001\002\000\004\041\322\001\002\000\046" +
    "\006\ufff9\007\ufff9\011\ufff9\013\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9" +
    "\025\ufff9\026\ufff9\044\ufff9\051\ufff9\053\ufff9\001\002\000" +
    "\046\006\ufffd\007\ufffd\011\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024" +
    "\ufffd\025\ufffd\026\ufffd\044\ufffd\051\ufffd\053\ufffd\001\002" +
    "\000\046\006\023\007\032\011\030\013\035\014\041\015" +
    "\014\016\037\017\034\020\021\021\012\022\036\023\031" +
    "\024\033\025\026\026\013\044\321\051\022\053\015\001" +
    "\002\000\004\041\307\001\002\000\006\027\273\037\272" +
    "\001\002\000\004\051\261\001\002\000\046\006\ufffb\007" +
    "\ufffb\011\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026" +
    "\ufffb\044\ufffb\051\ufffb\053\ufffb\001\002\000\004\002\uffff" +
    "\001\002\000\004\041\256\001\002\000\046\006\ufff7\007" +
    "\ufff7\011\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\044\ufff7\051\ufff7\053\ufff7\001\002\000\004\041\234" +
    "\001\002\000\004\041\222\001\002\000\004\051\211\001" +
    "\002\000\004\041\177\001\002\000\004\041\165\001\002" +
    "\000\004\043\147\001\002\000\004\041\135\001\002\000" +
    "\004\050\134\001\002\000\046\006\ufff5\007\ufff5\011\ufff5" +
    "\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\044\ufff5" +
    "\051\ufff5\053\ufff5\001\002\000\004\041\042\001\002\000" +
    "\012\040\045\042\uffc2\051\046\052\043\001\002\000\014" +
    "\030\104\031\103\032\105\033\102\035\132\001\002\000" +
    "\004\042\126\001\002\000\006\035\120\042\121\001\002" +
    "\000\016\030\055\031\054\032\056\033\052\035\053\042" +
    "\057\001\002\000\004\035\050\001\002\000\004\051\051" +
    "\001\002\000\006\042\uffc6\050\uffc6\001\002\000\006\051" +
    "\117\052\116\001\002\000\010\040\077\051\100\052\076" +
    "\001\002\000\006\051\075\052\074\001\002\000\006\051" +
    "\073\052\072\001\002\000\006\051\071\052\070\001\002" +
    "\000\004\043\060\001\002\000\044\006\023\007\032\011" +
    "\030\013\035\014\041\015\014\016\037\017\034\020\021" +
    "\021\012\022\036\023\031\024\033\025\026\026\013\051" +
    "\022\053\015\001\002\000\046\006\023\007\032\011\030" +
    "\013\035\014\041\015\014\016\037\017\034\020\021\021" +
    "\012\022\036\023\031\024\033\025\026\026\013\044\065" +
    "\051\022\053\015\001\002\000\046\006\ufffa\007\ufffa\011" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\044" +
    "\ufffa\051\ufffa\053\ufffa\001\002\000\046\006\ufffe\007\ufffe" +
    "\011\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe" +
    "\044\ufffe\051\ufffe\053\ufffe\001\002\000\046\006\ufffc\007" +
    "\ufffc\011\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc" +
    "\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026" +
    "\ufffc\044\ufffc\051\ufffc\053\ufffc\001\002\000\046\006\uffaf" +
    "\007\uffaf\011\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\026\uffaf\044\uffaf\051\uffaf\053\uffaf\001\002\000\046\006" +
    "\ufff8\007\ufff8\011\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\044\ufff8\051\ufff8\053\ufff8\001\002\000\046" +
    "\006\ufff6\007\ufff6\011\ufff6\013\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6" +
    "\025\ufff6\026\ufff6\044\ufff6\051\ufff6\053\ufff6\001\002\000" +
    "\010\035\uffb8\042\uffb8\050\uffb8\001\002\000\010\035\uffb6" +
    "\042\uffb6\050\uffb6\001\002\000\010\035\uffc0\042\uffc0\050" +
    "\uffc0\001\002\000\010\035\uffbe\042\uffbe\050\uffbe\001\002" +
    "\000\010\035\uffbc\042\uffbc\050\uffbc\001\002\000\010\035" +
    "\uffba\042\uffba\050\uffba\001\002\000\016\030\104\031\103" +
    "\032\105\033\102\042\uffc4\050\uffc4\001\002\000\006\042" +
    "\uffc9\050\uffc9\001\002\000\016\030\055\031\054\032\056" +
    "\033\052\042\uffc5\050\uffc5\001\002\000\006\042\uffc7\050" +
    "\uffc7\001\002\000\006\051\115\052\114\001\002\000\006" +
    "\051\113\052\112\001\002\000\006\051\111\052\110\001" +
    "\002\000\006\051\107\052\106\001\002\000\010\035\uffb9" +
    "\042\uffb9\050\uffb9\001\002\000\010\035\uffb7\042\uffb7\050" +
    "\uffb7\001\002\000\010\035\uffc1\042\uffc1\050\uffc1\001\002" +
    "\000\010\035\uffbf\042\uffbf\050\uffbf\001\002\000\010\035" +
    "\uffbd\042\uffbd\050\uffbd\001\002\000\010\035\uffbb\042\uffbb" +
    "\050\uffbb\001\002\000\010\035\uffb5\042\uffb5\050\uffb5\001" +
    "\002\000\010\035\uffb3\042\uffb3\050\uffb3\001\002\000\010" +
    "\035\uffb4\042\uffb4\050\uffb4\001\002\000\010\035\uffb2\042" +
    "\uffb2\050\uffb2\001\002\000\004\051\125\001\002\000\004" +
    "\043\122\001\002\000\044\006\023\007\032\011\030\013" +
    "\035\014\041\015\014\016\037\017\034\020\021\021\012" +
    "\022\036\023\031\024\033\025\026\026\013\051\022\053" +
    "\015\001\002\000\046\006\023\007\032\011\030\013\035" +
    "\014\041\015\014\016\037\017\034\020\021\021\012\022" +
    "\036\023\031\024\033\025\026\026\013\044\124\051\022" +
    "\053\015\001\002\000\046\006\uffb0\007\uffb0\011\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\044\uffb0\051" +
    "\uffb0\053\uffb0\001\002\000\006\042\uffc8\050\uffc8\001\002" +
    "\000\004\043\127\001\002\000\044\006\023\007\032\011" +
    "\030\013\035\014\041\015\014\016\037\017\034\020\021" +
    "\021\012\022\036\023\031\024\033\025\026\026\013\051" +
    "\022\053\015\001\002\000\046\006\023\007\032\011\030" +
    "\013\035\014\041\015\014\016\037\017\034\020\021\021" +
    "\012\022\036\023\031\024\033\025\026\026\013\044\131" +
    "\051\022\053\015\001\002\000\046\006\uffb1\007\uffb1\011" +
    "\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\044" +
    "\uffb1\051\uffb1\053\uffb1\001\002\000\004\051\133\001\002" +
    "\000\006\042\uffc3\050\uffc3\001\002\000\046\006\uffd2\007" +
    "\uffd2\011\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\044\uffd2\051\uffd2\053\uffd2\001\002\000\006\051\137" +
    "\052\136\001\002\000\014\030\104\031\103\032\105\033" +
    "\102\042\145\001\002\000\014\030\055\031\054\032\056" +
    "\033\052\042\143\001\002\000\004\042\141\001\002\000" +
    "\004\050\142\001\002\000\046\006\uffdd\007\uffdd\011\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\044\uffdd" +
    "\051\uffdd\053\uffdd\001\002\000\004\050\144\001\002\000" +
    "\046\006\uffdc\007\uffdc\011\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\044\uffdc\051\uffdc\053\uffdc\001\002" +
    "\000\004\050\146\001\002\000\046\006\uffdb\007\uffdb\011" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\044" +
    "\uffdb\051\uffdb\053\uffdb\001\002\000\044\006\023\007\032" +
    "\011\030\013\035\014\041\015\014\016\037\017\034\020" +
    "\021\021\012\022\036\023\031\024\033\025\026\026\013" +
    "\051\022\053\015\001\002\000\046\006\023\007\032\011" +
    "\030\013\035\014\041\015\014\016\037\017\034\020\021" +
    "\021\012\022\036\023\031\024\033\025\026\026\013\044" +
    "\151\051\022\053\015\001\002\000\004\014\152\001\002" +
    "\000\004\041\153\001\002\000\012\040\155\042\uffc2\051" +
    "\156\052\043\001\002\000\004\042\163\001\002\000\006" +
    "\035\120\042\161\001\002\000\016\030\055\031\054\032" +
    "\056\033\052\035\053\042\157\001\002\000\004\050\160" +
    "\001\002\000\046\006\uffac\007\uffac\011\uffac\013\uffac\014" +
    "\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac" +
    "\023\uffac\024\uffac\025\uffac\026\uffac\044\uffac\051\uffac\053" +
    "\uffac\001\002\000\004\050\162\001\002\000\046\006\uffad" +
    "\007\uffad\011\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017" +
    "\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\044\uffad\051\uffad\053\uffad\001\002\000\004\050" +
    "\164\001\002\000\046\006\uffae\007\uffae\011\uffae\013\uffae" +
    "\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022" +
    "\uffae\023\uffae\024\uffae\025\uffae\026\uffae\044\uffae\051\uffae" +
    "\053\uffae\001\002\000\006\051\167\052\166\001\002\000" +
    "\014\030\104\031\103\032\105\033\102\042\175\001\002" +
    "\000\014\030\055\031\054\032\056\033\052\042\173\001" +
    "\002\000\004\042\171\001\002\000\004\050\172\001\002" +
    "\000\046\006\uffe6\007\uffe6\011\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\044\uffe6\051\uffe6\053\uffe6\001" +
    "\002\000\004\050\174\001\002\000\046\006\uffe5\007\uffe5" +
    "\011\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\044\uffe5\051\uffe5\053\uffe5\001\002\000\004\050\176\001" +
    "\002\000\046\006\uffe4\007\uffe4\011\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\044\uffe4\051\uffe4\053\uffe4" +
    "\001\002\000\006\051\201\052\200\001\002\000\014\030" +
    "\104\031\103\032\105\033\102\042\207\001\002\000\014" +
    "\030\055\031\054\032\056\033\052\042\205\001\002\000" +
    "\004\042\203\001\002\000\004\050\204\001\002\000\046" +
    "\006\uffd7\007\uffd7\011\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\044\uffd7\051\uffd7\053\uffd7\001\002\000" +
    "\004\050\206\001\002\000\046\006\uffd6\007\uffd6\011\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\044\uffd6" +
    "\051\uffd6\053\uffd6\001\002\000\004\050\210\001\002\000" +
    "\046\006\uffd5\007\uffd5\011\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\044\uffd5\051\uffd5\053\uffd5\001\002" +
    "\000\006\027\213\050\212\001\002\000\046\006\ufff3\007" +
    "\ufff3\011\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026" +
    "\ufff3\044\ufff3\051\ufff3\053\ufff3\001\002\000\012\040\215" +
    "\050\uffc2\051\216\052\043\001\002\000\004\050\221\001" +
    "\002\000\006\035\120\050\220\001\002\000\016\030\055" +
    "\031\054\032\056\033\052\035\053\050\217\001\002\000" +
    "\046\006\ufff1\007\ufff1\011\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\044\ufff1\051\ufff1\053\ufff1\001\002" +
    "\000\046\006\uffe8\007\uffe8\011\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\044\uffe8\051\uffe8\053\uffe8\001" +
    "\002\000\046\006\uffed\007\uffed\011\uffed\013\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\026\uffed\044\uffed\051\uffed\053\uffed" +
    "\001\002\000\006\051\224\052\223\001\002\000\014\030" +
    "\104\031\103\032\105\033\102\042\232\001\002\000\014" +
    "\030\055\031\054\032\056\033\052\042\230\001\002\000" +
    "\004\042\226\001\002\000\004\050\227\001\002\000\046" +
    "\006\uffda\007\uffda\011\uffda\013\uffda\014\uffda\015\uffda\016" +
    "\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\uffda\026\uffda\044\uffda\051\uffda\053\uffda\001\002\000" +
    "\004\050\231\001\002\000\046\006\uffd9\007\uffd9\011\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\044\uffd9" +
    "\051\uffd9\053\uffd9\001\002\000\004\050\233\001\002\000" +
    "\046\006\uffd8\007\uffd8\011\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\044\uffd8\051\uffd8\053\uffd8\001\002" +
    "\000\012\040\236\042\uffc2\051\237\052\043\001\002\000" +
    "\004\042\251\001\002\000\006\035\120\042\240\001\002" +
    "\000\014\030\055\031\054\032\056\033\052\035\053\001" +
    "\002\000\004\043\241\001\002\000\044\006\023\007\032" +
    "\011\030\013\035\014\041\015\014\016\037\017\034\020" +
    "\021\021\012\022\036\023\031\024\033\025\026\026\013" +
    "\051\022\053\015\001\002\000\046\006\023\007\032\011" +
    "\030\013\035\014\041\015\014\016\037\017\034\020\021" +
    "\021\012\022\036\023\031\024\033\025\026\026\013\044" +
    "\243\051\022\053\015\001\002\000\050\006\uffcd\007\uffcd" +
    "\011\uffcd\012\245\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\044\uffcd\051\uffcd\053\uffcd\001\002\000\046\006" +
    "\uffcb\007\uffcb\011\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\044\uffcb\051\uffcb\053\uffcb\001\002\000\004" +
    "\043\246\001\002\000\044\006\023\007\032\011\030\013" +
    "\035\014\041\015\014\016\037\017\034\020\021\021\012" +
    "\022\036\023\031\024\033\025\026\026\013\051\022\053" +
    "\015\001\002\000\046\006\023\007\032\011\030\013\035" +
    "\014\041\015\014\016\037\017\034\020\021\021\012\022" +
    "\036\023\031\024\033\025\026\026\013\044\250\051\022" +
    "\053\015\001\002\000\046\006\uffca\007\uffca\011\uffca\013" +
    "\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\044\uffca\051" +
    "\uffca\053\uffca\001\002\000\004\043\252\001\002\000\044" +
    "\006\023\007\032\011\030\013\035\014\041\015\014\016" +
    "\037\017\034\020\021\021\012\022\036\023\031\024\033" +
    "\025\026\026\013\051\022\053\015\001\002\000\046\006" +
    "\023\007\032\011\030\013\035\014\041\015\014\016\037" +
    "\017\034\020\021\021\012\022\036\023\031\024\033\025" +
    "\026\026\013\044\254\051\022\053\015\001\002\000\050" +
    "\006\uffce\007\uffce\011\uffce\012\245\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\044\uffce\051\uffce\053\uffce\001" +
    "\002\000\046\006\uffcc\007\uffcc\011\uffcc\013\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\044\uffcc\051\uffcc\053\uffcc" +
    "\001\002\000\004\042\257\001\002\000\004\050\260\001" +
    "\002\000\046\006\uffd4\007\uffd4\011\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\044\uffd4\051\uffd4\053\uffd4" +
    "\001\002\000\006\027\263\050\262\001\002\000\046\006" +
    "\ufff4\007\ufff4\011\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025" +
    "\ufff4\026\ufff4\044\ufff4\051\ufff4\053\ufff4\001\002\000\006" +
    "\051\265\052\264\001\002\000\014\030\104\031\103\032" +
    "\105\033\102\050\271\001\002\000\014\030\055\031\054" +
    "\032\056\033\052\050\270\001\002\000\004\050\267\001" +
    "\002\000\046\006\uffef\007\uffef\011\uffef\013\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023" +
    "\uffef\024\uffef\025\uffef\026\uffef\044\uffef\051\uffef\053\uffef" +
    "\001\002\000\046\006\ufff2\007\ufff2\011\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\026\ufff2\044\ufff2\051\ufff2\053" +
    "\ufff2\001\002\000\046\006\uffea\007\uffea\011\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\044\uffea\051\uffea" +
    "\053\uffea\001\002\000\004\050\306\001\002\000\012\040" +
    "\276\050\uffc2\051\277\052\274\001\002\000\016\030\104" +
    "\031\103\032\105\033\102\035\132\050\305\001\002\000" +
    "\004\050\304\001\002\000\006\035\120\050\303\001\002" +
    "\000\016\030\055\031\054\032\056\033\052\035\053\050" +
    "\302\001\002\000\006\035\050\050\301\001\002\000\046" +
    "\006\uffee\007\uffee\011\uffee\013\uffee\014\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee" +
    "\025\uffee\026\uffee\044\uffee\051\uffee\053\uffee\001\002\000" +
    "\046\006\ufff0\007\ufff0\011\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024" +
    "\ufff0\025\ufff0\026\ufff0\044\ufff0\051\ufff0\053\ufff0\001\002" +
    "\000\046\006\uffe7\007\uffe7\011\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\044\uffe7\051\uffe7\053\uffe7\001" +
    "\002\000\046\006\uffec\007\uffec\011\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\044\uffec\051\uffec\053\uffec" +
    "\001\002\000\046\006\uffe9\007\uffe9\011\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\044\uffe9\051\uffe9\053" +
    "\uffe9\001\002\000\046\006\uffeb\007\uffeb\011\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\044\uffeb\051\uffeb" +
    "\053\uffeb\001\002\000\006\051\311\052\310\001\002\000" +
    "\014\030\104\031\103\032\105\033\102\042\317\001\002" +
    "\000\014\030\055\031\054\032\056\033\052\042\315\001" +
    "\002\000\004\042\313\001\002\000\004\050\314\001\002" +
    "\000\046\006\uffe3\007\uffe3\011\uffe3\013\uffe3\014\uffe3\015" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\044\uffe3\051\uffe3\053\uffe3\001" +
    "\002\000\004\050\316\001\002\000\046\006\uffe2\007\uffe2" +
    "\011\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\044\uffe2\051\uffe2\053\uffe2\001\002\000\004\050\320\001" +
    "\002\000\046\006\uffe1\007\uffe1\011\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\044\uffe1\051\uffe1\053\uffe1" +
    "\001\002\000\004\002\000\001\002\000\006\051\324\052" +
    "\323\001\002\000\014\030\104\031\103\032\105\033\102" +
    "\042\332\001\002\000\014\030\055\031\054\032\056\033" +
    "\052\042\330\001\002\000\004\042\326\001\002\000\004" +
    "\050\327\001\002\000\046\006\uffd1\007\uffd1\011\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\044\uffd1\051" +
    "\uffd1\053\uffd1\001\002\000\004\050\331\001\002\000\046" +
    "\006\uffd0\007\uffd0\011\uffd0\013\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\044\uffd0\051\uffd0\053\uffd0\001\002\000" +
    "\004\050\333\001\002\000\046\006\uffcf\007\uffcf\011\uffcf" +
    "\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\044\uffcf" +
    "\051\uffcf\053\uffcf\001\002\000\006\006\337\051\336\001" +
    "\002\000\004\042\362\001\002\000\004\027\354\001\002" +
    "\000\004\051\340\001\002\000\004\027\341\001\002\000" +
    "\004\052\342\001\002\000\004\050\343\001\002\000\012" +
    "\040\345\050\uffc2\051\237\052\043\001\002\000\004\050" +
    "\346\001\002\000\004\035\120\001\002\000\004\051\350" +
    "\001\002\000\004\042\uffaa\001\002\000\006\036\351\037" +
    "\352\001\002\000\004\052\353\001\002\000\004\042\uffa7" +
    "\001\002\000\004\042\uffa8\001\002\000\004\052\355\001" +
    "\002\000\004\050\356\001\002\000\012\040\345\050\uffc2" +
    "\051\237\052\043\001\002\000\004\050\360\001\002\000" +
    "\004\051\350\001\002\000\004\042\uffa9\001\002\000\004" +
    "\043\363\001\002\000\044\006\023\007\032\011\030\013" +
    "\035\014\041\015\014\016\037\017\034\020\021\021\012" +
    "\022\036\023\031\024\033\025\026\026\013\051\022\053" +
    "\015\001\002\000\046\006\023\007\032\011\030\013\035" +
    "\014\041\015\014\016\037\017\034\020\021\021\012\022" +
    "\036\023\031\024\033\025\026\026\013\044\365\051\022" +
    "\053\015\001\002\000\046\006\uffab\007\uffab\011\uffab\013" +
    "\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\044\uffab\051" +
    "\uffab\053\uffab\001\002\000\004\042\367\001\002\000\004" +
    "\050\370\001\002\000\046\006\uffd3\007\uffd3\011\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\044\uffd3\051" +
    "\uffd3\053\uffd3\001\002\000\006\051\373\052\372\001\002" +
    "\000\014\030\104\031\103\032\105\033\102\042\u0101\001" +
    "\002\000\014\030\055\031\054\032\056\033\052\042\377" +
    "\001\002\000\004\042\375\001\002\000\004\050\376\001" +
    "\002\000\046\006\uffe0\007\uffe0\011\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\044\uffe0\051\uffe0\053\uffe0" +
    "\001\002\000\004\050\u0100\001\002\000\046\006\uffdf\007" +
    "\uffdf\011\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\044\uffdf\051\uffdf\053\uffdf\001\002\000\004\050\u0102" +
    "\001\002\000\046\006\uffde\007\uffde\011\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\044\uffde\051\uffde\053" +
    "\uffde\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\017\004\016\006\023\010\015\011" +
    "\026\012\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\062\006\063\010\061\011\065" +
    "\012\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\043\014\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\060\004\016\006\023\010" +
    "\015\011\026\012\037\001\001\000\014\004\062\006\063" +
    "\010\061\011\065\012\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\122\004\016\006" +
    "\023\010\015\011\026\012\037\001\001\000\014\004\062" +
    "\006\063\010\061\011\065\012\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\127" +
    "\004\016\006\023\010\015\011\026\012\037\001\001\000" +
    "\014\004\062\006\063\010\061\011\065\012\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\147\004\016\006" +
    "\023\010\015\011\026\012\037\001\001\000\014\004\062" +
    "\006\063\010\061\011\065\012\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\153\014\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\213\014\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\234\014\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\241\004\016\006\023" +
    "\010\015\011\026\012\037\001\001\000\014\004\062\006" +
    "\063\010\061\011\065\012\066\001\001\000\004\007\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\246\004\016\006\023\010\015\011\026\012\037\001\001" +
    "\000\014\004\062\006\063\010\061\011\065\012\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\252" +
    "\004\016\006\023\010\015\011\026\012\037\001\001\000" +
    "\014\004\062\006\063\010\061\011\065\012\066\001\001" +
    "\000\004\007\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\274\014\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\311\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\324\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\343\014\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\346\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\356\014\046\001\001\000\002\001\001\000\004\005" +
    "\360\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\363\004\016\006\023\010\015\011\026\012\037\001" +
    "\001\000\014\004\062\006\063\010\061\011\065\012\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\373\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.d_for="("+o+", , ,"+i+")\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.d_for="("+o+","+n+", ,"+i+")\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.s_for="("+g+","+n+", ,"+i+")\nstartloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.s_for=PrincipalCompi.s_bool+"(jf loop"+PrincipalCompi.loop+":,"+PrincipalCompi.tempb+", , )\n";
    PrincipalCompi.tempb++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA_FOR ::= Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.s_for="("+t+", , ,"+i+")\n("+g+","+n+", ,"+i+")\nstartloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.s_for=PrincipalCompi.s_bool+"(iff,TB"+PrincipalCompi.tempb+", , )\n(jnz loop"+PrincipalCompi.loop+":, , , )\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.fors=PrincipalCompi.s_for+PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.d_for+"loop"+PrincipalCompi.loop+":\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.dowhiles="startloop"+PrincipalCompi.loop+":\n"+PrincipalCompi.sentencia[PrincipalCompi.status];
    PrincipalCompi.dowhiles=PrincipalCompi.dowhiles+"(jt startloop"+PrincipalCompi.loop+":,"+o+", , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.loop++;
    PrincipalCompi.sentencia[PrincipalCompi.status]="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a Op_booleano Parentesis_c P_coma 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.dowhiles="startloop"+PrincipalCompi.loop+":\n"+PrincipalCompi.sentencia[PrincipalCompi.status];
    PrincipalCompi.dowhiles=PrincipalCompi.dowhiles+"(jt startloop"+PrincipalCompi.loop+":,"+o+", , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.loop++;
    PrincipalCompi.sentencia[PrincipalCompi.status]="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.dowhiles="startloop"+PrincipalCompi.loop+":\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.s_bool;
    PrincipalCompi.dowhiles=PrincipalCompi.dowhiles+"(jt startloop"+PrincipalCompi.loop+":,TB"+PrincipalCompi.tempb+", , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.tempb++;
    PrincipalCompi.loop++;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // WHILE ::= While Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.whiles="startloop"+PrincipalCompi.loop+":\n"+"(jf loop"+PrincipalCompi.loop+":,"+o+", , )\n";
    PrincipalCompi.whiles=PrincipalCompi.whiles+PrincipalCompi.sentencia[PrincipalCompi.status]+"(jmp startloop"+PrincipalCompi.loop+":, , , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.loop++;
    PrincipalCompi.s_bool=PrincipalCompi.sentencia[PrincipalCompi.status]="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // WHILE ::= While Parentesis_a Op_booleano Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.whiles="startloop"+PrincipalCompi.loop+":\n"+"(jf loop"+PrincipalCompi.loop+":,"+o+", , )\n";
    PrincipalCompi.whiles=PrincipalCompi.whiles+PrincipalCompi.sentencia[PrincipalCompi.status]+"(jmp startloop"+PrincipalCompi.loop+":, , , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.loop++;
    PrincipalCompi.s_bool=PrincipalCompi.sentencia[PrincipalCompi.status]="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.whiles="startloop"+PrincipalCompi.loop+":\n"+PrincipalCompi.s_bool+"(jf loop"+PrincipalCompi.loop+":,TB"+PrincipalCompi.tempb+", , )\n";
    PrincipalCompi.whiles=PrincipalCompi.whiles+PrincipalCompi.sentencia[PrincipalCompi.status]+"(jmp startloop"+PrincipalCompi.loop+":, , , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.loop++;
    PrincipalCompi.tempb++;
    PrincipalCompi.s_bool=PrincipalCompi.sentencia[PrincipalCompi.status]="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_ARITMETICA ::= Identificador Division Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
    Simbolo b=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
            if(n.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                b=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null || b==null){
            
        }else{
            if(!a.getTipo().toString().equals("int") || !b.getTipo().toString().equals("int")){
                
            }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())+Integer.parseInt(b.getValor().toString());
                }
            }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_ARITMETICA ::= Numero Division Identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            
        }else{
            if(!a.getTipo().toString().equals("int")){
                
            }else{
                    PrincipalCompi.value=Integer.parseInt(n.toString())/Integer.parseInt(a.getValor().toString());
                }
            }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_ARITMETICA ::= Identificador Division Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            
        }else{
            if(!a.getTipo().toString().equals("int")){
                
            }else{
                PrincipalCompi.value=Integer.parseInt(a.getValor().toString())/Integer.parseInt(n.toString());
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_ARITMETICA ::= Numero Division Numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.value=Integer.parseInt(n.toString())/Integer.parseInt(i.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_ARITMETICA ::= Identificador Multiplicacion Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
    Simbolo b=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
            if(n.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                b=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null || b==null){
            
        }else{
            if(!a.getTipo().toString().equals("int") || !b.getTipo().toString().equals("int")){
                
            }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())+Integer.parseInt(b.getValor().toString());
                }
            }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_ARITMETICA ::= Numero Multiplicacion Identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            
        }else{
            if(!a.getTipo().toString().equals("int")){
                
            }else{
                    PrincipalCompi.value=Integer.parseInt(n.toString())*Integer.parseInt(a.getValor().toString());
                }
            }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_ARITMETICA ::= Identificador Multiplicacion Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            
        }else{
            if(!a.getTipo().toString().equals("int")){
                
            }else{
                PrincipalCompi.value=Integer.parseInt(a.getValor().toString())*Integer.parseInt(n.toString());
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_ARITMETICA ::= Numero Multiplicacion Numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.value=Integer.parseInt(n.toString())*Integer.parseInt(i.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_ARITMETICA ::= Identificador Resta Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
    Simbolo b=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
            if(n.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                b=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null || b==null){
            
        }else{
            if(!a.getTipo().toString().equals("int") || !b.getTipo().toString().equals("int")){
                
            }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())+Integer.parseInt(b.getValor().toString());
                }
            }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_ARITMETICA ::= Numero Resta Identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            
        }else{
            if(!a.getTipo().toString().equals("int")){
                
            }else{
                    PrincipalCompi.value=Integer.parseInt(n.toString())-Integer.parseInt(a.getValor().toString());
                }
            }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_ARITMETICA ::= Identificador Resta Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            
        }else{
            if(!a.getTipo().toString().equals("int")){
                
            }else{
                PrincipalCompi.value=Integer.parseInt(a.getValor().toString())-Integer.parseInt(n.toString());
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_ARITMETICA ::= Numero Resta Numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.value=Integer.parseInt(n.toString())-Integer.parseInt(i.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_ARITMETICA ::= Identificador Suma Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
    Simbolo b=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
            if(n.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                b=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null || b==null){
            if(a==null){
                PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
            }
            if(b==null){
                PrincipalCompi.err.add("Error semántico; el identificador "+n+" no ha sido declarado");
            }
        }else{
            if(!a.getTipo().toString().equals("int") || !b.getTipo().toString().equals("int")){
                
            }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())+Integer.parseInt(b.getValor().toString());
                }
            }
        

    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_ARITMETICA ::= Numero Suma Identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico; el identificador "+i+" no es de tipo int");
            }else{
                PrincipalCompi.value=Integer.parseInt(n.toString())+Integer.parseInt(a.getValor().toString());
                }
            }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_ARITMETICA ::= Identificador Suma Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
        Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().equals("int")){
                PrincipalCompi.err.add("Error semántico; el identificador "+i+" no es de tipo int");
            }else{
                PrincipalCompi.value=Integer.parseInt(a.getValor().toString())+Integer.parseInt(n.toString());
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_ARITMETICA ::= Numero Suma Numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
        PrincipalCompi.value=Integer.parseInt(n.toString())+Integer.parseInt(i.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_BOOLEANA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_BOOLEANA ::= Numero Op_relacional Identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool=PrincipalCompi.s_arit+"("+o+","+n+","+i+",TB"+PrincipalCompi.tempb+")\n";
    PrincipalCompi.temp++;
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("int")){
            PrincipalCompi.err.add("Error semántico; el identificador "+i+" no es de tipo int");
        }else{
            switch(o.toString()){
                case ">":PrincipalCompi.valueb=Integer.parseInt(n.toString())>Integer.parseInt(a.getValor().toString());break;
                case "<":PrincipalCompi.valueb=Integer.parseInt(n.toString())<Integer.parseInt(a.getValor().toString());break;
                case "==":PrincipalCompi.valueb=Integer.parseInt(n.toString())==Integer.parseInt(a.getValor().toString());break;
                case "!=": PrincipalCompi.valueb=Integer.parseInt(n.toString())!=Integer.parseInt(a.getValor().toString());break;
                case ">=": PrincipalCompi.valueb=Integer.parseInt(n.toString())>=Integer.parseInt(a.getValor().toString());break;
                case "<=": PrincipalCompi.valueb=Integer.parseInt(n.toString())<=Integer.parseInt(a.getValor().toString());break;
                case ">>": PrincipalCompi.valueb=Integer.parseInt(n.toString())>Integer.parseInt(a.getValor().toString());break;
                case "<<": PrincipalCompi.valueb=Integer.parseInt(n.toString())<Integer.parseInt(a.getValor().toString());break;
                default:break;
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool="("+o+","+i+","+n+",TB"+PrincipalCompi.tempb+")\n";
    PrincipalCompi.temp++;
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("int")){
            PrincipalCompi.err.add("Error semántico; el identificador "+i+" no es de tipo int");
        }else{
            switch(o.toString()){
                case ">":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(n.toString());break;
                case "<":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<Integer.parseInt(n.toString());break;
                case "==":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())==Integer.parseInt(n.toString());break;
                case "!=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())!=Integer.parseInt(n.toString());break;
                case ">=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>=Integer.parseInt(n.toString());break;
                case "<=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<=Integer.parseInt(n.toString());break;
                case ">>": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(n.toString());break;
                case "<<": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<Integer.parseInt(n.toString());break;
                default:break;
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool=PrincipalCompi.s_arit+"("+o+","+i+","+n+",TB"+PrincipalCompi.tempb+")\n";
    Simbolo a=null;
    Simbolo b=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
        if(n.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            b=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null || b==null){
        if(a==null){
            PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
        }
        if(b==null){
            PrincipalCompi.err.add("Error semántico; el identificador "+n+" no ha sido declarado");
        }
    }
    else{
        if(!a.getTipo().toString().equals("int")){
            PrincipalCompi.err.add("Error semántico; el identificador "+i+" no es de tipo int");
        }else if(!b.getTipo().toString().equals("int")){
            PrincipalCompi.err.add("Error semántico; el identificador "+n+" no es de tipo int");
        }else{
            switch(o.toString()){
                case ">":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(b.getValor().toString());break;
                case "<":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<Integer.parseInt(b.getValor().toString());break;
                case "==":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())==Integer.parseInt(b.getValor().toString());break;
                case "!=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())!=Integer.parseInt(b.getValor().toString());break;
                case ">=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>=Integer.parseInt(b.getValor().toString());break;
                case "<=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<=Integer.parseInt(b.getValor().toString());break;
                case ">>": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(b.getValor().toString());break;
                case "<<": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<Integer.parseInt(b.getValor().toString());break;
                default:break;
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_BOOLEANA ::= SENTENCIA_ARITMETICA Op_relacional Identificador 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool=PrincipalCompi.s_arit+"("+o+",TA"+PrincipalCompi.temp+","+i+",TB"+PrincipalCompi.tempb+")\n";
    PrincipalCompi.temp++;
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("int")){
            PrincipalCompi.err.add("Error semántico; el identificador "+i+" no es de tipo int");
        }else{
            switch(o.toString()){
                case ">":PrincipalCompi.valueb=PrincipalCompi.value>Integer.parseInt(a.getValor().toString());break;
                case "<":PrincipalCompi.valueb=PrincipalCompi.value<Integer.parseInt(a.getValor().toString());break;
                case "==":PrincipalCompi.valueb=PrincipalCompi.value==Integer.parseInt(a.getValor().toString());break;
                case "!=": PrincipalCompi.valueb=PrincipalCompi.value!=Integer.parseInt(a.getValor().toString());break;
                case ">=": PrincipalCompi.valueb=PrincipalCompi.value>=Integer.parseInt(a.getValor().toString());break;
                case "<=": PrincipalCompi.valueb=PrincipalCompi.value<=Integer.parseInt(a.getValor().toString());break;
                case ">>": PrincipalCompi.valueb=PrincipalCompi.value>Integer.parseInt(a.getValor().toString());break;
                case "<<": PrincipalCompi.valueb=PrincipalCompi.value<Integer.parseInt(a.getValor().toString());break;
                default:break;
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional SENTENCIA_ARITMETICA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.s_bool=PrincipalCompi.s_arit+"("+o+","+i+",TA"+PrincipalCompi.temp+",TB"+PrincipalCompi.tempb+")\n";
    PrincipalCompi.temp++;
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("int")){
            PrincipalCompi.err.add("Error semántico; el identificador "+i+" no es de tipo int");
        }else{
            switch(o.toString()){
                case ">":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>PrincipalCompi.value;break;
                case "<":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<PrincipalCompi.value;break;
                case "==":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())==PrincipalCompi.value;break;
                case "!=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())!=PrincipalCompi.value;break;
                case ">=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>=PrincipalCompi.value;break;
                case "<=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<=PrincipalCompi.value;break;
                case ">>": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>PrincipalCompi.value;break;
                case "<<": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>PrincipalCompi.value;break;
                default:break;
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_BOOLEANA ::= Op_booleano Op_relacional Identificador 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool="("+o+","+b+","+i+",TB"+PrincipalCompi.tempb+")\n";
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("bool")){
            PrincipalCompi.err.add("Error semántico; el identificador "+i+" no es de tipo bool");
        }else{
            switch(o.toString()){
                case "==": PrincipalCompi.valueb=(Boolean.parseBoolean(a.getValor().toString()) && Boolean.parseBoolean(b.toString()));break;
                case "!=": PrincipalCompi.valueb=(Boolean.parseBoolean(a.getValor().toString()) != Boolean.parseBoolean(b.toString()));break;
                default:

                break;
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool="("+o+","+i+","+b+",TB"+PrincipalCompi.tempb+")\n";
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("bool")){
            PrincipalCompi.err.add("Error semántico; el identificador "+i+" no es de tipo bool");
        }else{
            switch(o.toString()){
                case "==": PrincipalCompi.valueb=(Boolean.parseBoolean(a.getValor().toString()) && Boolean.parseBoolean(b.toString()));break;
                case "!=": PrincipalCompi.valueb=(Boolean.parseBoolean(a.getValor().toString()) != Boolean.parseBoolean(b.toString()));break;
                default:

                break;
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELSE ::= Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.elses=PrincipalCompi.sentencia[PrincipalCompi.status];
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF ::= If Parentesis_a Op_booleano Parentesis_c Llave_a SENTENCIA Llave_c ELSE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,"+o+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.tempb++;
    PrincipalCompi.choice++;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jmp choice"+PrincipalCompi.choice+":, , , )\n"+PrincipalCompi.elses+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool=PrincipalCompi.elses="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c ELSE 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.s_bool;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,TB"+PrincipalCompi.tempb+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.tempb++;
    PrincipalCompi.choice++;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jmp choice"+PrincipalCompi.choice+":, , , )\n"+PrincipalCompi.elses+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool=PrincipalCompi.elses="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF ::= If Parentesis_a Op_booleano Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,"+o+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.s_bool;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,TB"+PrincipalCompi.tempb+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.tempb++;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= WaitTime Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= WaitTime Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= WaitTime Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= StopLoop P_coma 
            {
              Object RESULT =null;
		
    PrincipalCompi.declaracion="(jmp loop"+PrincipalCompi.loop+":, , , )\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= HitToTheRight Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.declaracion="("+a+", , , )\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= HitToTheLeft Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.declaracion="("+a+", , , )\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= SpinBallRight Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= SpinBallRight Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= SpinBallRight Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= SpinBallLeft Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= SpinBallLeft Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= SpinBallLeft Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= MoveBackCrane Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= MoveBackCrane Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= MoveBackCrane Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= MoveFowardCrane Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= MoveFowardCrane Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= MoveFowardCrane Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= SpinCraneRight Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= SpinCraneRight Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= SpinCraneRight Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= SpinCraneLeft Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= SpinCraneLeft Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= SpinCraneLeft Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Identificador Igual Op_booleano P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+g+","+o+", ,"+i+")\n";
    int num=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("bool")){
                    temp.setValor(o);
                    num++;
                    break;
                }else{
                    PrincipalCompi.err.add("Error semántico; el identificador "+i+" no es de tipo bool");
                    num++;
                    break;
                }
            }
        }
        if(num==0){
            PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Bool Identificador Igual Op_booleano P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n("+g+","+o+", ,"+i+")\n";
    int num=0;
    Simbolo s=new Simbolo(i,t,o);
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.tabla_simbolos.add(s);
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                PrincipalCompi.err.add("Error semántico; el identificador "+i+" ya fue declarado anteriormente");
                num++;
                break;
            }
        }
        if(num==0){
            PrincipalCompi.tabla_simbolos.add(s);
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+g+","+n+", ,"+i+")\n";
    int num=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    temp.setValor(n);
                    num++;
                    break;
                }else{
                    PrincipalCompi.err.add("Error semántico; el identificador "+i+" no es de tipo entero");
                    num++;
                    break;
                }
            }
        }
        if(num==0){
            PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n("+g+","+n+", ,"+i+")\n";
    int num=0;
    Simbolo s=new Simbolo(i,t,n);
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.tabla_simbolos.add(s);
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                PrincipalCompi.err.add("Error semántico; el identificador "+i+" ya fue declarado anteriormente");
                num++;
                break;
            }
        }
        if(num==0){
            PrincipalCompi.tabla_simbolos.add(s);
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Identificador Op_incremento P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+o+", , ,"+i+")\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        //int num=(int)temp.getValor();
                        //num++;
                        //temp.setValor(num);
                        n++;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Identificador Igual SENTENCIA_BOOLEANA P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_bool+"("+g+",TB"+PrincipalCompi.temp+", ,"+i+")\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_bool="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Bool Identificador Igual SENTENCIA_BOOLEANA P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n"+PrincipalCompi.s_bool+"("+g+",TB"+PrincipalCompi.temp+", ,"+i+")\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_bool="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Identificador Igual SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+g+",TA"+PrincipalCompi.temp+", ,"+i+")\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit=""; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Int Identificador Igual SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n"+PrincipalCompi.s_arit+"("+g+",TA"+PrincipalCompi.temp+", ,"+i+")\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+g+","+b+", ,"+a+")";
    int n=0;
    Simbolo s1=null;
    Simbolo s2=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico; el identificador "+a+" y "+b+" no han sido declarados");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            Simbolo temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(a)){
                s1=temp;
                for(int at=0;at<PrincipalCompi.tabla_simbolos.size();at++){
                    Simbolo temp2=PrincipalCompi.tabla_simbolos.get(at);
                    if(temp2.getNombre().equals(b)){
                        s2=temp2;
                        if(temp.getTipo().equals(temp2.getTipo())){
                            if(temp2.getValor()==null){
                                n++;
                                PrincipalCompi.err.add("Error semántico; el identificador "+b+" no ha sido inicializado");
                                break;
                            }else{
                                n++;
                                Object v=temp2.getValor();
                                temp.setValor(v);
                                break;
                            }
                        }else{
                            n++;
                            PrincipalCompi.err.add("Error semántico; los tipos de dato de "+a+" y "+b+" son incompatibles");
                            break;
                        }
                    }
                }
            }
        }
        if(n==0){
            if(s1==null){
                PrincipalCompi.err.add("Error semántico; el identificador "+a+" no ha sido declarado");
            }
            if(s2==null){
                PrincipalCompi.err.add("Error semántico; el identificador "+b+" no ha sido declarado");
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= Bool Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n("+g+","+l+", ,"+i+")\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico; el identificador "+l+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                n++;
                PrincipalCompi.err.add("Error semántico; el identificador "+i+" ya fue declarado anteriormente");
                break;
            }else if(temp.getNombre().equals(l)){
                if(temp.getTipo().equals(t)){
                    if(temp.getValor()==null){
                        n++;
                        PrincipalCompi.err.add("Error semántico; el identificador "+l+" no ha sido inicializado");
                        break;
                    }else{
                        n++;
                        Object v=temp.getValor();
                        Simbolo s=new Simbolo(i,t,v);
                        PrincipalCompi.tabla_simbolos.add(s);
                        break;
                    }
                }else{
                    n++;
                    PrincipalCompi.err.add("Error semántico; el valor de "+l+" no es de tipo bool");
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico; el identificador "+l+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= Int Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n("+g+","+l+", ,"+i+")\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico; el identificador "+l+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                n++;
                PrincipalCompi.err.add("Error semántico; el identificador "+i+" ya fue declarado anteriormente");
                break;
            }else if(temp.getNombre().equals(l)){
                if(temp.getTipo().equals(t)){
                    if(temp.getValor()==null){
                        n++;
                        PrincipalCompi.err.add("Error semántico; el identificador "+l+" no ha sido inicializado");
                        break;
                    }else{
                        n++;
                        Object v=temp.getValor();
                        Simbolo s=new Simbolo(i,t,v);
                        PrincipalCompi.tabla_simbolos.add(s);
                        break;
                    }
                }else{
                    n++;
                    PrincipalCompi.err.add("Error semántico; el valor de "+l+" no es de tipo int");
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico; el identificador "+l+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= Bool Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n";
    int n=0;
    Simbolo temp=null;
    Simbolo s=new Simbolo(i,t,null);
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.tabla_simbolos.add(s);
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                PrincipalCompi.err.add("Error semántico; el identificador "+i+" ya fue declarado anteriormente");
                n++;
                break;
            }
        }
        if(n==0){
            PrincipalCompi.tabla_simbolos.add(s);
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n";
    int n=0;
    Simbolo temp=null;
    Simbolo s=new Simbolo(i,t,null);
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.tabla_simbolos.add(s);
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                PrincipalCompi.err.add("Error semántico; el identificador "+i+" ya fue declarado anteriormente");
                n++;
                break;
            }
        }
        if(n==0){
            PrincipalCompi.tabla_simbolos.add(s);
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;
		
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.fors;
    PrincipalCompi.fors="";
    PrincipalCompi.status++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.fors;
    PrincipalCompi.fors="";
    PrincipalCompi.status++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;
		
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.dowhiles;
    PrincipalCompi.dowhiles="";
    PrincipalCompi.status++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.dowhiles;
    PrincipalCompi.dowhiles="";
    PrincipalCompi.status++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;
		
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.whiles;
    PrincipalCompi.whiles="";
    PrincipalCompi.status++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.whiles;
    PrincipalCompi.whiles="";
    PrincipalCompi.status++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= IF 
            {
              Object RESULT =null;
		
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.ifs;
    PrincipalCompi.ifs="";
    PrincipalCompi.status++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.ifs;
    PrincipalCompi.ifs="";
    PrincipalCompi.status++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;
		
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.declaracion;
    PrincipalCompi.declaracion="";
    PrincipalCompi.status++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.declaracion;
    PrincipalCompi.declaracion="";
    PrincipalCompi.status++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Start Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Start Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.ci=PrincipalCompi.sentencia[PrincipalCompi.status];
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

