
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 05 11:49:21 MST 2019
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 05 11:49:21 MST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\350\000\002\002\004\000\002\002\010\000\002\002" +
    "\007\000\002\002\007\000\002\002\007\000\002\002\007" +
    "\000\002\002\010\000\002\002\007\000\002\002\007\000" +
    "\002\002\007\000\002\002\007\000\002\002\007\000\002" +
    "\002\006\000\002\002\006\000\002\002\006\000\002\002" +
    "\006\000\002\002\007\000\002\002\006\000\002\002\006" +
    "\000\002\002\006\000\002\002\006\000\002\002\002\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\004\005\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\005\000\002\004\004\000\002" +
    "\004\004\000\002\004\007\000\002\004\006\000\002\004" +
    "\006\000\002\004\006\000\002\004\007\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\005\000" +
    "\002\004\005\000\002\004\007\000\002\004\006\000\002" +
    "\004\006\000\002\004\006\000\002\004\005\000\002\004" +
    "\005\000\002\004\007\000\002\004\006\000\002\004\006" +
    "\000\002\004\005\000\002\004\004\000\002\004\004\000" +
    "\002\004\007\000\002\004\006\000\002\004\006\000\002" +
    "\004\006\000\002\004\006\000\002\004\005\000\002\004" +
    "\005\000\002\004\007\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\005\000" +
    "\002\004\005\000\002\004\007\000\002\004\006\000\002" +
    "\004\006\000\002\004\006\000\002\004\006\000\002\004" +
    "\007\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\004\007\000\002\004\006\000" +
    "\002\004\006\000\002\004\006\000\002\004\007\000\002" +
    "\004\006\000\002\004\006\000\002\004\006\000\002\004" +
    "\007\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\007\000\002\004\006\000\002\004\006\000" +
    "\002\004\006\000\002\004\007\000\002\004\006\000\002" +
    "\004\006\000\002\004\006\000\002\004\006\000\002\004" +
    "\007\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\007\000\002\004\006\000\002\004\006\000" +
    "\002\004\006\000\002\004\007\000\002\004\006\000\002" +
    "\004\006\000\002\004\006\000\002\004\006\000\002\004" +
    "\007\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\007\000\002\004\006\000\002\004\006\000" +
    "\002\004\006\000\002\004\007\000\002\004\006\000\002" +
    "\004\006\000\002\004\006\000\002\004\006\000\002\004" +
    "\007\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\007\000\002\004\006\000\002\004\006\000" +
    "\002\004\006\000\002\004\007\000\002\004\006\000\002" +
    "\004\006\000\002\004\006\000\002\004\006\000\002\004" +
    "\007\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\007\000\002\004\006\000\002\004\006\000" +
    "\002\004\006\000\002\004\007\000\002\004\006\000\002" +
    "\004\006\000\002\004\006\000\002\004\006\000\002\004" +
    "\007\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\007\000\002\004\006\000\002\004\006\000" +
    "\002\004\006\000\002\004\006\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\006\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\004" +
    "\000\002\004\003\000\002\004\007\000\002\004\006\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\004\007\000\002\004\006\000\002\004\006\000\002\004" +
    "\006\000\002\004\007\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\006\011\000\002\006\010\000" +
    "\002\006\011\000\002\006\011\000\002\006\012\000\002" +
    "\006\012\000\002\006\012\000\002\007\006\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\002\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\010\011\000\002\010\011\000\002\010" +
    "\011\000\002\011\013\000\002\011\013\000\002\011\013" +
    "\000\002\012\011\000\002\015\012\000\002\015\011\000" +
    "\002\005\005\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c3\000\010\002\uffec\045\004\047\005\001\002\000" +
    "\006\037\u01b4\040\u01b5\001\002\000\006\037\010\040\011" +
    "\001\002\000\004\002\007\001\002\000\004\002\001\001" +
    "\002\000\006\040\u01a9\041\u01a8\001\002\000\004\041\012" +
    "\001\002\000\050\005\025\006\034\007\032\011\037\012" +
    "\043\013\015\014\041\015\036\016\022\017\013\020\040" +
    "\021\033\022\035\023\027\024\014\035\031\042\026\047" +
    "\023\051\016\001\002\000\010\037\u0191\047\u0192\050\u0190" +
    "\001\002\000\006\037\u018a\040\u018b\001\002\000\004\037" +
    "\u016f\001\002\000\010\037\u0158\047\u0159\050\u0157\001\002" +
    "\000\052\002\uffe6\005\uffe6\006\uffe6\007\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\024\uffe6\035\uffe6\042\uffe6\047" +
    "\uffe6\051\uffe6\001\002\000\052\002\uffea\005\uffea\006\uffea" +
    "\007\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\035\uffea\042\uffea\047\uffea\051\uffea\001\002\000\050\005" +
    "\025\006\034\007\032\011\037\012\043\013\015\014\041" +
    "\015\036\016\022\017\013\020\040\021\033\022\035\023" +
    "\027\024\014\035\031\042\u0156\047\023\051\016\001\002" +
    "\000\010\037\u013f\047\u0140\050\u013e\001\002\000\020\025" +
    "\u011a\035\u0118\036\u0116\037\u0114\046\u0115\047\u0117\050\u0113" +
    "\001\002\000\052\002\uffe8\005\uffe8\006\uffe8\007\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\035\uffe8\042" +
    "\uffe8\047\uffe8\051\uffe8\001\002\000\010\025\u0101\046\377" +
    "\047\u0100\001\002\000\004\002\uffed\001\002\000\006\037" +
    "\371\040\372\001\002\000\052\002\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\035\uffe4\042\uffe4\047\uffe4\051\uffe4\001\002\000\004\046" +
    "\370\001\002\000\004\037\340\001\002\000\010\037\311" +
    "\047\312\050\310\001\002\000\010\025\267\046\265\047" +
    "\266\001\002\000\010\037\236\047\237\050\235\001\002" +
    "\000\010\037\206\047\207\050\205\001\002\000\004\041" +
    "\167\001\002\000\010\037\140\047\141\050\137\001\002" +
    "\000\054\002\uff52\005\uff52\006\uff52\007\uff52\011\uff52\012" +
    "\uff52\013\uff52\014\uff52\015\uff52\016\uff52\017\uff52\020\uff52" +
    "\021\uff52\022\uff52\023\uff52\024\uff52\035\uff52\042\uff52\046" +
    "\136\047\uff52\051\uff52\001\002\000\052\002\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\035\uffe2\042\uffe2\047\uffe2\051\uffe2\001\002\000" +
    "\004\037\044\001\002\000\012\036\047\040\uff35\047\050" +
    "\050\045\001\002\000\014\026\106\027\105\030\107\031" +
    "\104\033\134\001\002\000\004\040\130\001\002\000\006" +
    "\033\122\040\123\001\002\000\016\026\057\027\056\030" +
    "\060\031\054\033\055\040\061\001\002\000\004\033\052" +
    "\001\002\000\004\047\053\001\002\000\006\040\uff39\046" +
    "\uff39\001\002\000\006\047\121\050\120\001\002\000\010" +
    "\036\101\047\102\050\100\001\002\000\006\047\077\050" +
    "\076\001\002\000\006\047\075\050\074\001\002\000\006" +
    "\047\073\050\072\001\002\000\004\041\062\001\002\000" +
    "\046\005\025\006\034\007\032\011\037\012\043\013\015" +
    "\014\041\015\036\016\022\017\013\020\040\021\033\022" +
    "\035\023\027\024\014\035\031\047\023\051\016\001\002" +
    "\000\050\005\025\006\034\007\032\011\037\012\043\013" +
    "\015\014\041\015\036\016\022\017\013\020\040\021\033" +
    "\022\035\023\027\024\014\035\031\042\067\047\023\051" +
    "\016\001\002\000\052\002\uffe7\005\uffe7\006\uffe7\007\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\035\uffe7" +
    "\042\uffe7\047\uffe7\051\uffe7\001\002\000\052\002\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\035\uffeb\042\uffeb\047\uffeb\051\uffeb\001\002" +
    "\000\052\002\uffe9\005\uffe9\006\uffe9\007\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\035\uffe9\042\uffe9\047" +
    "\uffe9\051\uffe9\001\002\000\052\002\uff22\005\uff22\006\uff22" +
    "\007\uff22\011\uff22\012\uff22\013\uff22\014\uff22\015\uff22\016" +
    "\uff22\017\uff22\020\uff22\021\uff22\022\uff22\023\uff22\024\uff22" +
    "\035\uff22\042\uff22\047\uff22\051\uff22\001\002\000\052\002" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\024\uffe5\035\uffe5\042\uffe5\047\uffe5\051\uffe5" +
    "\001\002\000\052\002\uffe3\005\uffe3\006\uffe3\007\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\035\uffe3\042" +
    "\uffe3\047\uffe3\051\uffe3\001\002\000\060\002\uff2b\005\uff2b" +
    "\006\uff2b\007\uff2b\011\uff2b\012\uff2b\013\uff2b\014\uff2b\015" +
    "\uff2b\016\uff2b\017\uff2b\020\uff2b\021\uff2b\022\uff2b\023\uff2b" +
    "\024\uff2b\033\uff2b\035\uff2b\040\uff2b\042\uff2b\046\uff2b\047" +
    "\uff2b\051\uff2b\001\002\000\060\002\uff29\005\uff29\006\uff29" +
    "\007\uff29\011\uff29\012\uff29\013\uff29\014\uff29\015\uff29\016" +
    "\uff29\017\uff29\020\uff29\021\uff29\022\uff29\023\uff29\024\uff29" +
    "\033\uff29\035\uff29\040\uff29\042\uff29\046\uff29\047\uff29\051" +
    "\uff29\001\002\000\060\002\uff33\005\uff33\006\uff33\007\uff33" +
    "\011\uff33\012\uff33\013\uff33\014\uff33\015\uff33\016\uff33\017" +
    "\uff33\020\uff33\021\uff33\022\uff33\023\uff33\024\uff33\033\uff33" +
    "\035\uff33\040\uff33\042\uff33\046\uff33\047\uff33\051\uff33\001" +
    "\002\000\060\002\uff31\005\uff31\006\uff31\007\uff31\011\uff31" +
    "\012\uff31\013\uff31\014\uff31\015\uff31\016\uff31\017\uff31\020" +
    "\uff31\021\uff31\022\uff31\023\uff31\024\uff31\033\uff31\035\uff31" +
    "\040\uff31\042\uff31\046\uff31\047\uff31\051\uff31\001\002\000" +
    "\060\002\uff2f\005\uff2f\006\uff2f\007\uff2f\011\uff2f\012\uff2f" +
    "\013\uff2f\014\uff2f\015\uff2f\016\uff2f\017\uff2f\020\uff2f\021" +
    "\uff2f\022\uff2f\023\uff2f\024\uff2f\033\uff2f\035\uff2f\040\uff2f" +
    "\042\uff2f\046\uff2f\047\uff2f\051\uff2f\001\002\000\060\002" +
    "\uff2d\005\uff2d\006\uff2d\007\uff2d\011\uff2d\012\uff2d\013\uff2d" +
    "\014\uff2d\015\uff2d\016\uff2d\017\uff2d\020\uff2d\021\uff2d\022" +
    "\uff2d\023\uff2d\024\uff2d\033\uff2d\035\uff2d\040\uff2d\042\uff2d" +
    "\046\uff2d\047\uff2d\051\uff2d\001\002\000\016\026\106\027" +
    "\105\030\107\031\104\040\uff37\046\uff37\001\002\000\006" +
    "\040\uff3c\046\uff3c\001\002\000\016\026\057\027\056\030" +
    "\060\031\054\040\uff38\046\uff38\001\002\000\006\040\uff3a" +
    "\046\uff3a\001\002\000\006\047\117\050\116\001\002\000" +
    "\006\047\115\050\114\001\002\000\006\047\113\050\112" +
    "\001\002\000\006\047\111\050\110\001\002\000\060\002" +
    "\uff2c\005\uff2c\006\uff2c\007\uff2c\011\uff2c\012\uff2c\013\uff2c" +
    "\014\uff2c\015\uff2c\016\uff2c\017\uff2c\020\uff2c\021\uff2c\022" +
    "\uff2c\023\uff2c\024\uff2c\033\uff2c\035\uff2c\040\uff2c\042\uff2c" +
    "\046\uff2c\047\uff2c\051\uff2c\001\002\000\060\002\uff2a\005" +
    "\uff2a\006\uff2a\007\uff2a\011\uff2a\012\uff2a\013\uff2a\014\uff2a" +
    "\015\uff2a\016\uff2a\017\uff2a\020\uff2a\021\uff2a\022\uff2a\023" +
    "\uff2a\024\uff2a\033\uff2a\035\uff2a\040\uff2a\042\uff2a\046\uff2a" +
    "\047\uff2a\051\uff2a\001\002\000\060\002\uff34\005\uff34\006" +
    "\uff34\007\uff34\011\uff34\012\uff34\013\uff34\014\uff34\015\uff34" +
    "\016\uff34\017\uff34\020\uff34\021\uff34\022\uff34\023\uff34\024" +
    "\uff34\033\uff34\035\uff34\040\uff34\042\uff34\046\uff34\047\uff34" +
    "\051\uff34\001\002\000\060\002\uff32\005\uff32\006\uff32\007" +
    "\uff32\011\uff32\012\uff32\013\uff32\014\uff32\015\uff32\016\uff32" +
    "\017\uff32\020\uff32\021\uff32\022\uff32\023\uff32\024\uff32\033" +
    "\uff32\035\uff32\040\uff32\042\uff32\046\uff32\047\uff32\051\uff32" +
    "\001\002\000\060\002\uff30\005\uff30\006\uff30\007\uff30\011" +
    "\uff30\012\uff30\013\uff30\014\uff30\015\uff30\016\uff30\017\uff30" +
    "\020\uff30\021\uff30\022\uff30\023\uff30\024\uff30\033\uff30\035" +
    "\uff30\040\uff30\042\uff30\046\uff30\047\uff30\051\uff30\001\002" +
    "\000\060\002\uff2e\005\uff2e\006\uff2e\007\uff2e\011\uff2e\012" +
    "\uff2e\013\uff2e\014\uff2e\015\uff2e\016\uff2e\017\uff2e\020\uff2e" +
    "\021\uff2e\022\uff2e\023\uff2e\024\uff2e\033\uff2e\035\uff2e\040" +
    "\uff2e\042\uff2e\046\uff2e\047\uff2e\051\uff2e\001\002\000\060" +
    "\002\uff28\005\uff28\006\uff28\007\uff28\011\uff28\012\uff28\013" +
    "\uff28\014\uff28\015\uff28\016\uff28\017\uff28\020\uff28\021\uff28" +
    "\022\uff28\023\uff28\024\uff28\033\uff28\035\uff28\040\uff28\042" +
    "\uff28\046\uff28\047\uff28\051\uff28\001\002\000\060\002\uff26" +
    "\005\uff26\006\uff26\007\uff26\011\uff26\012\uff26\013\uff26\014" +
    "\uff26\015\uff26\016\uff26\017\uff26\020\uff26\021\uff26\022\uff26" +
    "\023\uff26\024\uff26\033\uff26\035\uff26\040\uff26\042\uff26\046" +
    "\uff26\047\uff26\051\uff26\001\002\000\060\002\uff27\005\uff27" +
    "\006\uff27\007\uff27\011\uff27\012\uff27\013\uff27\014\uff27\015" +
    "\uff27\016\uff27\017\uff27\020\uff27\021\uff27\022\uff27\023\uff27" +
    "\024\uff27\033\uff27\035\uff27\040\uff27\042\uff27\046\uff27\047" +
    "\uff27\051\uff27\001\002\000\060\002\uff25\005\uff25\006\uff25" +
    "\007\uff25\011\uff25\012\uff25\013\uff25\014\uff25\015\uff25\016" +
    "\uff25\017\uff25\020\uff25\021\uff25\022\uff25\023\uff25\024\uff25" +
    "\033\uff25\035\uff25\040\uff25\042\uff25\046\uff25\047\uff25\051" +
    "\uff25\001\002\000\004\047\127\001\002\000\004\041\124" +
    "\001\002\000\046\005\025\006\034\007\032\011\037\012" +
    "\043\013\015\014\041\015\036\016\022\017\013\020\040" +
    "\021\033\022\035\023\027\024\014\035\031\047\023\051" +
    "\016\001\002\000\050\005\025\006\034\007\032\011\037" +
    "\012\043\013\015\014\041\015\036\016\022\017\013\020" +
    "\040\021\033\022\035\023\027\024\014\035\031\042\126" +
    "\047\023\051\016\001\002\000\052\002\uff23\005\uff23\006" +
    "\uff23\007\uff23\011\uff23\012\uff23\013\uff23\014\uff23\015\uff23" +
    "\016\uff23\017\uff23\020\uff23\021\uff23\022\uff23\023\uff23\024" +
    "\uff23\035\uff23\042\uff23\047\uff23\051\uff23\001\002\000\006" +
    "\040\uff3b\046\uff3b\001\002\000\004\041\131\001\002\000" +
    "\046\005\025\006\034\007\032\011\037\012\043\013\015" +
    "\014\041\015\036\016\022\017\013\020\040\021\033\022" +
    "\035\023\027\024\014\035\031\047\023\051\016\001\002" +
    "\000\050\005\025\006\034\007\032\011\037\012\043\013" +
    "\015\014\041\015\036\016\022\017\013\020\040\021\033" +
    "\022\035\023\027\024\014\035\031\042\133\047\023\051" +
    "\016\001\002\000\052\002\uff24\005\uff24\006\uff24\007\uff24" +
    "\011\uff24\012\uff24\013\uff24\014\uff24\015\uff24\016\uff24\017" +
    "\uff24\020\uff24\021\uff24\022\uff24\023\uff24\024\uff24\035\uff24" +
    "\042\uff24\047\uff24\051\uff24\001\002\000\004\047\135\001" +
    "\002\000\006\040\uff36\046\uff36\001\002\000\052\002\uff53" +
    "\005\uff53\006\uff53\007\uff53\011\uff53\012\uff53\013\uff53\014" +
    "\uff53\015\uff53\016\uff53\017\uff53\020\uff53\021\uff53\022\uff53" +
    "\023\uff53\024\uff53\035\uff53\042\uff53\047\uff53\051\uff53\001" +
    "\002\000\014\026\106\027\105\030\107\031\104\040\165" +
    "\001\002\000\010\040\151\047\150\050\147\001\002\000" +
    "\014\026\057\027\056\030\060\031\054\040\145\001\002" +
    "\000\004\040\143\001\002\000\004\046\144\001\002\000" +
    "\052\002\uff7e\005\uff7e\006\uff7e\007\uff7e\011\uff7e\012\uff7e" +
    "\013\uff7e\014\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e\021" +
    "\uff7e\022\uff7e\023\uff7e\024\uff7e\035\uff7e\042\uff7e\047\uff7e" +
    "\051\uff7e\001\002\000\004\046\146\001\002\000\052\002" +
    "\uff7a\005\uff7a\006\uff7a\007\uff7a\011\uff7a\012\uff7a\013\uff7a" +
    "\014\uff7a\015\uff7a\016\uff7a\017\uff7a\020\uff7a\021\uff7a\022" +
    "\uff7a\023\uff7a\024\uff7a\035\uff7a\042\uff7a\047\uff7a\051\uff7a" +
    "\001\002\000\016\026\106\027\105\030\107\031\104\040" +
    "\163\046\162\001\002\000\016\026\057\027\056\030\060" +
    "\031\054\040\160\046\157\001\002\000\004\046\156\001" +
    "\002\000\006\040\154\046\153\001\002\000\052\002\uff80" +
    "\005\uff80\006\uff80\007\uff80\011\uff80\012\uff80\013\uff80\014" +
    "\uff80\015\uff80\016\uff80\017\uff80\020\uff80\021\uff80\022\uff80" +
    "\023\uff80\024\uff80\035\uff80\042\uff80\047\uff80\051\uff80\001" +
    "\002\000\054\002\uff81\005\uff81\006\uff81\007\uff81\011\uff81" +
    "\012\uff81\013\uff81\014\uff81\015\uff81\016\uff81\017\uff81\020" +
    "\uff81\021\uff81\022\uff81\023\uff81\024\uff81\035\uff81\042\uff81" +
    "\046\155\047\uff81\051\uff81\001\002\000\052\002\uff82\005" +
    "\uff82\006\uff82\007\uff82\011\uff82\012\uff82\013\uff82\014\uff82" +
    "\015\uff82\016\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023" +
    "\uff82\024\uff82\035\uff82\042\uff82\047\uff82\051\uff82\001\002" +
    "\000\052\002\uff7f\005\uff7f\006\uff7f\007\uff7f\011\uff7f\012" +
    "\uff7f\013\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f" +
    "\021\uff7f\022\uff7f\023\uff7f\024\uff7f\035\uff7f\042\uff7f\047" +
    "\uff7f\051\uff7f\001\002\000\052\002\uff7b\005\uff7b\006\uff7b" +
    "\007\uff7b\011\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b\016" +
    "\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b\023\uff7b\024\uff7b" +
    "\035\uff7b\042\uff7b\047\uff7b\051\uff7b\001\002\000\054\002" +
    "\uff7c\005\uff7c\006\uff7c\007\uff7c\011\uff7c\012\uff7c\013\uff7c" +
    "\014\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022" +
    "\uff7c\023\uff7c\024\uff7c\035\uff7c\042\uff7c\046\161\047\uff7c" +
    "\051\uff7c\001\002\000\052\002\uff7d\005\uff7d\006\uff7d\007" +
    "\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d\016\uff7d" +
    "\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d\035" +
    "\uff7d\042\uff7d\047\uff7d\051\uff7d\001\002\000\052\002\uff77" +
    "\005\uff77\006\uff77\007\uff77\011\uff77\012\uff77\013\uff77\014" +
    "\uff77\015\uff77\016\uff77\017\uff77\020\uff77\021\uff77\022\uff77" +
    "\023\uff77\024\uff77\035\uff77\042\uff77\047\uff77\051\uff77\001" +
    "\002\000\054\002\uff78\005\uff78\006\uff78\007\uff78\011\uff78" +
    "\012\uff78\013\uff78\014\uff78\015\uff78\016\uff78\017\uff78\020" +
    "\uff78\021\uff78\022\uff78\023\uff78\024\uff78\035\uff78\042\uff78" +
    "\046\164\047\uff78\051\uff78\001\002\000\052\002\uff79\005" +
    "\uff79\006\uff79\007\uff79\011\uff79\012\uff79\013\uff79\014\uff79" +
    "\015\uff79\016\uff79\017\uff79\020\uff79\021\uff79\022\uff79\023" +
    "\uff79\024\uff79\035\uff79\042\uff79\047\uff79\051\uff79\001\002" +
    "\000\004\046\166\001\002\000\052\002\uff76\005\uff76\006" +
    "\uff76\007\uff76\011\uff76\012\uff76\013\uff76\014\uff76\015\uff76" +
    "\016\uff76\017\uff76\020\uff76\021\uff76\022\uff76\023\uff76\024" +
    "\uff76\035\uff76\042\uff76\047\uff76\051\uff76\001\002\000\046" +
    "\005\025\006\034\007\032\011\037\012\043\013\015\014" +
    "\041\015\036\016\022\017\013\020\040\021\033\022\035" +
    "\023\027\024\014\035\031\047\023\051\016\001\002\000" +
    "\050\005\025\006\034\007\032\011\037\012\043\013\015" +
    "\014\041\015\036\016\022\017\013\020\040\021\033\022" +
    "\035\023\027\024\014\035\031\042\171\047\023\051\016" +
    "\001\002\000\004\012\172\001\002\000\004\037\173\001" +
    "\002\000\012\036\175\040\uff35\047\176\050\045\001\002" +
    "\000\004\040\203\001\002\000\006\033\122\040\201\001" +
    "\002\000\016\026\057\027\056\030\060\031\054\033\055" +
    "\040\177\001\002\000\004\046\200\001\002\000\052\002" +
    "\uff1f\005\uff1f\006\uff1f\007\uff1f\011\uff1f\012\uff1f\013\uff1f" +
    "\014\uff1f\015\uff1f\016\uff1f\017\uff1f\020\uff1f\021\uff1f\022" +
    "\uff1f\023\uff1f\024\uff1f\035\uff1f\042\uff1f\047\uff1f\051\uff1f" +
    "\001\002\000\004\046\202\001\002\000\052\002\uff20\005" +
    "\uff20\006\uff20\007\uff20\011\uff20\012\uff20\013\uff20\014\uff20" +
    "\015\uff20\016\uff20\017\uff20\020\uff20\021\uff20\022\uff20\023" +
    "\uff20\024\uff20\035\uff20\042\uff20\047\uff20\051\uff20\001\002" +
    "\000\004\046\204\001\002\000\052\002\uff21\005\uff21\006" +
    "\uff21\007\uff21\011\uff21\012\uff21\013\uff21\014\uff21\015\uff21" +
    "\016\uff21\017\uff21\020\uff21\021\uff21\022\uff21\023\uff21\024" +
    "\uff21\035\uff21\042\uff21\047\uff21\051\uff21\001\002\000\014" +
    "\026\106\027\105\030\107\031\104\040\233\001\002\000" +
    "\010\040\217\047\216\050\215\001\002\000\014\026\057" +
    "\027\056\030\060\031\054\040\213\001\002\000\004\040" +
    "\211\001\002\000\004\046\212\001\002\000\052\002\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\011\uffb2\012\uffb2\013\uffb2\014" +
    "\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\023\uffb2\024\uffb2\035\uffb2\042\uffb2\047\uffb2\051\uffb2\001" +
    "\002\000\004\046\214\001\002\000\052\002\uffa9\005\uffa9" +
    "\006\uffa9\007\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015" +
    "\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\035\uffa9\042\uffa9\047\uffa9\051\uffa9\001\002\000" +
    "\016\026\106\027\105\030\107\031\104\040\231\046\230" +
    "\001\002\000\016\026\057\027\056\030\060\031\054\040" +
    "\226\046\225\001\002\000\004\046\224\001\002\000\006" +
    "\040\222\046\221\001\002\000\052\002\uffb4\005\uffb4\006" +
    "\uffb4\007\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024" +
    "\uffb4\035\uffb4\042\uffb4\047\uffb4\051\uffb4\001\002\000\054" +
    "\002\uffb5\005\uffb5\006\uffb5\007\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5" +
    "\022\uffb5\023\uffb5\024\uffb5\035\uffb5\042\uffb5\046\223\047" +
    "\uffb5\051\uffb5\001\002\000\052\002\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\035\uffb6\042\uffb6\047\uffb6\051\uffb6\001\002\000\052\002" +
    "\uffb3\005\uffb3\006\uffb3\007\uffb3\011\uffb3\012\uffb3\013\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022" +
    "\uffb3\023\uffb3\024\uffb3\035\uffb3\042\uffb3\047\uffb3\051\uffb3" +
    "\001\002\000\052\002\uffaa\005\uffaa\006\uffaa\007\uffaa\011" +
    "\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\035\uffaa\042" +
    "\uffaa\047\uffaa\051\uffaa\001\002\000\054\002\uffab\005\uffab" +
    "\006\uffab\007\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015" +
    "\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab" +
    "\024\uffab\035\uffab\042\uffab\046\227\047\uffab\051\uffab\001" +
    "\002\000\052\002\uffac\005\uffac\006\uffac\007\uffac\011\uffac" +
    "\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020" +
    "\uffac\021\uffac\022\uffac\023\uffac\024\uffac\035\uffac\042\uffac" +
    "\047\uffac\051\uffac\001\002\000\052\002\uffa2\005\uffa2\006" +
    "\uffa2\007\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024" +
    "\uffa2\035\uffa2\042\uffa2\047\uffa2\051\uffa2\001\002\000\054" +
    "\002\uffa3\005\uffa3\006\uffa3\007\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3" +
    "\022\uffa3\023\uffa3\024\uffa3\035\uffa3\042\uffa3\046\232\047" +
    "\uffa3\051\uffa3\001\002\000\052\002\uffa4\005\uffa4\006\uffa4" +
    "\007\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016" +
    "\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4" +
    "\035\uffa4\042\uffa4\047\uffa4\051\uffa4\001\002\000\004\046" +
    "\234\001\002\000\052\002\uffa1\005\uffa1\006\uffa1\007\uffa1" +
    "\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017" +
    "\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\035\uffa1" +
    "\042\uffa1\047\uffa1\051\uffa1\001\002\000\014\026\106\027" +
    "\105\030\107\031\104\040\263\001\002\000\010\040\250" +
    "\047\246\050\245\001\002\000\014\026\057\027\056\030" +
    "\060\031\054\040\243\001\002\000\004\040\241\001\002" +
    "\000\004\046\242\001\002\000\052\002\uff64\005\uff64\006" +
    "\uff64\007\uff64\011\uff64\012\uff64\013\uff64\014\uff64\015\uff64" +
    "\016\uff64\017\uff64\020\uff64\021\uff64\022\uff64\023\uff64\024" +
    "\uff64\035\uff64\042\uff64\047\uff64\051\uff64\001\002\000\004" +
    "\046\244\001\002\000\052\002\uff60\005\uff60\006\uff60\007" +
    "\uff60\011\uff60\012\uff60\013\uff60\014\uff60\015\uff60\016\uff60" +
    "\017\uff60\020\uff60\021\uff60\022\uff60\023\uff60\024\uff60\035" +
    "\uff60\042\uff60\047\uff60\051\uff60\001\002\000\016\026\106" +
    "\027\105\030\107\031\104\040\261\046\260\001\002\000" +
    "\016\026\057\027\056\030\060\031\054\040\256\046\255" +
    "\001\002\000\006\040\253\046\252\001\002\000\004\046" +
    "\251\001\002\000\052\002\uff65\005\uff65\006\uff65\007\uff65" +
    "\011\uff65\012\uff65\013\uff65\014\uff65\015\uff65\016\uff65\017" +
    "\uff65\020\uff65\021\uff65\022\uff65\023\uff65\024\uff65\035\uff65" +
    "\042\uff65\047\uff65\051\uff65\001\002\000\052\002\uff66\005" +
    "\uff66\006\uff66\007\uff66\011\uff66\012\uff66\013\uff66\014\uff66" +
    "\015\uff66\016\uff66\017\uff66\020\uff66\021\uff66\022\uff66\023" +
    "\uff66\024\uff66\035\uff66\042\uff66\047\uff66\051\uff66\001\002" +
    "\000\054\002\uff67\005\uff67\006\uff67\007\uff67\011\uff67\012" +
    "\uff67\013\uff67\014\uff67\015\uff67\016\uff67\017\uff67\020\uff67" +
    "\021\uff67\022\uff67\023\uff67\024\uff67\035\uff67\042\uff67\046" +
    "\254\047\uff67\051\uff67\001\002\000\052\002\uff68\005\uff68" +
    "\006\uff68\007\uff68\011\uff68\012\uff68\013\uff68\014\uff68\015" +
    "\uff68\016\uff68\017\uff68\020\uff68\021\uff68\022\uff68\023\uff68" +
    "\024\uff68\035\uff68\042\uff68\047\uff68\051\uff68\001\002\000" +
    "\052\002\uff61\005\uff61\006\uff61\007\uff61\011\uff61\012\uff61" +
    "\013\uff61\014\uff61\015\uff61\016\uff61\017\uff61\020\uff61\021" +
    "\uff61\022\uff61\023\uff61\024\uff61\035\uff61\042\uff61\047\uff61" +
    "\051\uff61\001\002\000\054\002\uff62\005\uff62\006\uff62\007" +
    "\uff62\011\uff62\012\uff62\013\uff62\014\uff62\015\uff62\016\uff62" +
    "\017\uff62\020\uff62\021\uff62\022\uff62\023\uff62\024\uff62\035" +
    "\uff62\042\uff62\046\257\047\uff62\051\uff62\001\002\000\052" +
    "\002\uff63\005\uff63\006\uff63\007\uff63\011\uff63\012\uff63\013" +
    "\uff63\014\uff63\015\uff63\016\uff63\017\uff63\020\uff63\021\uff63" +
    "\022\uff63\023\uff63\024\uff63\035\uff63\042\uff63\047\uff63\051" +
    "\uff63\001\002\000\052\002\uff5d\005\uff5d\006\uff5d\007\uff5d" +
    "\011\uff5d\012\uff5d\013\uff5d\014\uff5d\015\uff5d\016\uff5d\017" +
    "\uff5d\020\uff5d\021\uff5d\022\uff5d\023\uff5d\024\uff5d\035\uff5d" +
    "\042\uff5d\047\uff5d\051\uff5d\001\002\000\054\002\uff5e\005" +
    "\uff5e\006\uff5e\007\uff5e\011\uff5e\012\uff5e\013\uff5e\014\uff5e" +
    "\015\uff5e\016\uff5e\017\uff5e\020\uff5e\021\uff5e\022\uff5e\023" +
    "\uff5e\024\uff5e\035\uff5e\042\uff5e\046\262\047\uff5e\051\uff5e" +
    "\001\002\000\052\002\uff5f\005\uff5f\006\uff5f\007\uff5f\011" +
    "\uff5f\012\uff5f\013\uff5f\014\uff5f\015\uff5f\016\uff5f\017\uff5f" +
    "\020\uff5f\021\uff5f\022\uff5f\023\uff5f\024\uff5f\035\uff5f\042" +
    "\uff5f\047\uff5f\051\uff5f\001\002\000\004\046\264\001\002" +
    "\000\052\002\uff5c\005\uff5c\006\uff5c\007\uff5c\011\uff5c\012" +
    "\uff5c\013\uff5c\014\uff5c\015\uff5c\016\uff5c\017\uff5c\020\uff5c" +
    "\021\uff5c\022\uff5c\023\uff5c\024\uff5c\035\uff5c\042\uff5c\047" +
    "\uff5c\051\uff5c\001\002\000\052\002\uffdb\005\uffdb\006\uffdb" +
    "\007\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb" +
    "\035\uffdb\042\uffdb\047\uffdb\051\uffdb\001\002\000\060\002" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\011\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\300\035\uffdc\036\277\042\uffdc" +
    "\046\276\047\uffdc\051\uffdc\001\002\000\012\036\271\046" +
    "\uff35\047\272\050\045\001\002\000\004\046\275\001\002" +
    "\000\006\033\122\046\274\001\002\000\016\026\057\027" +
    "\056\030\060\031\054\033\055\046\273\001\002\000\052" +
    "\002\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\035\uffd4\042\uffd4\047\uffd4\051" +
    "\uffd4\001\002\000\052\002\uffba\005\uffba\006\uffba\007\uffba" +
    "\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017" +
    "\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\035\uffba" +
    "\042\uffba\047\uffba\051\uffba\001\002\000\052\002\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\035\uffc9\042\uffc9\047\uffc9\051\uffc9\001\002" +
    "\000\052\002\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\021\uffdd\022\uffdd\023\uffdd\024\uffdd\035\uffdd\042\uffdd\047" +
    "\uffdd\051\uffdd\001\002\000\004\046\307\001\002\000\012" +
    "\036\302\046\uff35\047\303\050\045\001\002\000\004\046" +
    "\306\001\002\000\056\002\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\033\122" +
    "\035\uffbc\042\uffbc\046\305\047\uffbc\051\uffbc\001\002\000" +
    "\066\002\uffd5\005\uffd5\006\uffd5\007\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\026\057\027\056\030\060" +
    "\031\054\033\055\035\uffd5\042\uffd5\046\304\047\uffd5\051" +
    "\uffd5\001\002\000\052\002\uffd6\005\uffd6\006\uffd6\007\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\035\uffd6" +
    "\042\uffd6\047\uffd6\051\uffd6\001\002\000\052\002\uffbd\005" +
    "\uffbd\006\uffbd\007\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\035\uffbd\042\uffbd\047\uffbd\051\uffbd\001\002" +
    "\000\052\002\uffca\005\uffca\006\uffca\007\uffca\011\uffca\012" +
    "\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\035\uffca\042\uffca\047" +
    "\uffca\051\uffca\001\002\000\052\002\uffbb\005\uffbb\006\uffbb" +
    "\007\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\035\uffbb\042\uffbb\047\uffbb\051\uffbb\001\002\000\014\026" +
    "\106\027\105\030\107\031\104\040\336\001\002\000\010" +
    "\040\322\047\321\050\320\001\002\000\014\026\057\027" +
    "\056\030\060\031\054\040\316\001\002\000\004\040\314" +
    "\001\002\000\004\046\315\001\002\000\052\002\uff71\005" +
    "\uff71\006\uff71\007\uff71\011\uff71\012\uff71\013\uff71\014\uff71" +
    "\015\uff71\016\uff71\017\uff71\020\uff71\021\uff71\022\uff71\023" +
    "\uff71\024\uff71\035\uff71\042\uff71\047\uff71\051\uff71\001\002" +
    "\000\004\046\317\001\002\000\052\002\uff6d\005\uff6d\006" +
    "\uff6d\007\uff6d\011\uff6d\012\uff6d\013\uff6d\014\uff6d\015\uff6d" +
    "\016\uff6d\017\uff6d\020\uff6d\021\uff6d\022\uff6d\023\uff6d\024" +
    "\uff6d\035\uff6d\042\uff6d\047\uff6d\051\uff6d\001\002\000\016" +
    "\026\106\027\105\030\107\031\104\040\334\046\333\001" +
    "\002\000\016\026\057\027\056\030\060\031\054\040\331" +
    "\046\330\001\002\000\004\046\327\001\002\000\006\040" +
    "\325\046\324\001\002\000\052\002\uff73\005\uff73\006\uff73" +
    "\007\uff73\011\uff73\012\uff73\013\uff73\014\uff73\015\uff73\016" +
    "\uff73\017\uff73\020\uff73\021\uff73\022\uff73\023\uff73\024\uff73" +
    "\035\uff73\042\uff73\047\uff73\051\uff73\001\002\000\054\002" +
    "\uff74\005\uff74\006\uff74\007\uff74\011\uff74\012\uff74\013\uff74" +
    "\014\uff74\015\uff74\016\uff74\017\uff74\020\uff74\021\uff74\022" +
    "\uff74\023\uff74\024\uff74\035\uff74\042\uff74\046\326\047\uff74" +
    "\051\uff74\001\002\000\052\002\uff75\005\uff75\006\uff75\007" +
    "\uff75\011\uff75\012\uff75\013\uff75\014\uff75\015\uff75\016\uff75" +
    "\017\uff75\020\uff75\021\uff75\022\uff75\023\uff75\024\uff75\035" +
    "\uff75\042\uff75\047\uff75\051\uff75\001\002\000\052\002\uff72" +
    "\005\uff72\006\uff72\007\uff72\011\uff72\012\uff72\013\uff72\014" +
    "\uff72\015\uff72\016\uff72\017\uff72\020\uff72\021\uff72\022\uff72" +
    "\023\uff72\024\uff72\035\uff72\042\uff72\047\uff72\051\uff72\001" +
    "\002\000\052\002\uff6e\005\uff6e\006\uff6e\007\uff6e\011\uff6e" +
    "\012\uff6e\013\uff6e\014\uff6e\015\uff6e\016\uff6e\017\uff6e\020" +
    "\uff6e\021\uff6e\022\uff6e\023\uff6e\024\uff6e\035\uff6e\042\uff6e" +
    "\047\uff6e\051\uff6e\001\002\000\054\002\uff6f\005\uff6f\006" +
    "\uff6f\007\uff6f\011\uff6f\012\uff6f\013\uff6f\014\uff6f\015\uff6f" +
    "\016\uff6f\017\uff6f\020\uff6f\021\uff6f\022\uff6f\023\uff6f\024" +
    "\uff6f\035\uff6f\042\uff6f\046\332\047\uff6f\051\uff6f\001\002" +
    "\000\052\002\uff70\005\uff70\006\uff70\007\uff70\011\uff70\012" +
    "\uff70\013\uff70\014\uff70\015\uff70\016\uff70\017\uff70\020\uff70" +
    "\021\uff70\022\uff70\023\uff70\024\uff70\035\uff70\042\uff70\047" +
    "\uff70\051\uff70\001\002\000\052\002\uff6a\005\uff6a\006\uff6a" +
    "\007\uff6a\011\uff6a\012\uff6a\013\uff6a\014\uff6a\015\uff6a\016" +
    "\uff6a\017\uff6a\020\uff6a\021\uff6a\022\uff6a\023\uff6a\024\uff6a" +
    "\035\uff6a\042\uff6a\047\uff6a\051\uff6a\001\002\000\054\002" +
    "\uff6b\005\uff6b\006\uff6b\007\uff6b\011\uff6b\012\uff6b\013\uff6b" +
    "\014\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b\022" +
    "\uff6b\023\uff6b\024\uff6b\035\uff6b\042\uff6b\046\335\047\uff6b" +
    "\051\uff6b\001\002\000\052\002\uff6c\005\uff6c\006\uff6c\007" +
    "\uff6c\011\uff6c\012\uff6c\013\uff6c\014\uff6c\015\uff6c\016\uff6c" +
    "\017\uff6c\020\uff6c\021\uff6c\022\uff6c\023\uff6c\024\uff6c\035" +
    "\uff6c\042\uff6c\047\uff6c\051\uff6c\001\002\000\004\046\337" +
    "\001\002\000\052\002\uff69\005\uff69\006\uff69\007\uff69\011" +
    "\uff69\012\uff69\013\uff69\014\uff69\015\uff69\016\uff69\017\uff69" +
    "\020\uff69\021\uff69\022\uff69\023\uff69\024\uff69\035\uff69\042" +
    "\uff69\047\uff69\051\uff69\001\002\000\012\036\342\040\uff35" +
    "\047\343\050\045\001\002\000\004\040\362\001\002\000" +
    "\006\033\122\040\355\001\002\000\016\026\057\027\056" +
    "\030\060\031\054\033\055\040\344\001\002\000\004\041" +
    "\345\001\002\000\046\005\025\006\034\007\032\011\037" +
    "\012\043\013\015\014\041\015\036\016\022\017\013\020" +
    "\040\021\033\022\035\023\027\024\014\035\031\047\023" +
    "\051\016\001\002\000\050\005\025\006\034\007\032\011" +
    "\037\012\043\013\015\014\041\015\036\016\022\017\013" +
    "\020\040\021\033\022\035\023\027\024\014\035\031\042" +
    "\347\047\023\051\016\001\002\000\054\002\uff41\005\uff41" +
    "\006\uff41\007\uff41\010\351\011\uff41\012\uff41\013\uff41\014" +
    "\uff41\015\uff41\016\uff41\017\uff41\020\uff41\021\uff41\022\uff41" +
    "\023\uff41\024\uff41\035\uff41\042\uff41\047\uff41\051\uff41\001" +
    "\002\000\052\002\uff3e\005\uff3e\006\uff3e\007\uff3e\011\uff3e" +
    "\012\uff3e\013\uff3e\014\uff3e\015\uff3e\016\uff3e\017\uff3e\020" +
    "\uff3e\021\uff3e\022\uff3e\023\uff3e\024\uff3e\035\uff3e\042\uff3e" +
    "\047\uff3e\051\uff3e\001\002\000\004\041\352\001\002\000" +
    "\046\005\025\006\034\007\032\011\037\012\043\013\015" +
    "\014\041\015\036\016\022\017\013\020\040\021\033\022" +
    "\035\023\027\024\014\035\031\047\023\051\016\001\002" +
    "\000\050\005\025\006\034\007\032\011\037\012\043\013" +
    "\015\014\041\015\036\016\022\017\013\020\040\021\033" +
    "\022\035\023\027\024\014\035\031\042\354\047\023\051" +
    "\016\001\002\000\052\002\uff3d\005\uff3d\006\uff3d\007\uff3d" +
    "\011\uff3d\012\uff3d\013\uff3d\014\uff3d\015\uff3d\016\uff3d\017" +
    "\uff3d\020\uff3d\021\uff3d\022\uff3d\023\uff3d\024\uff3d\035\uff3d" +
    "\042\uff3d\047\uff3d\051\uff3d\001\002\000\004\041\356\001" +
    "\002\000\046\005\025\006\034\007\032\011\037\012\043" +
    "\013\015\014\041\015\036\016\022\017\013\020\040\021" +
    "\033\022\035\023\027\024\014\035\031\047\023\051\016" +
    "\001\002\000\050\005\025\006\034\007\032\011\037\012" +
    "\043\013\015\014\041\015\036\016\022\017\013\020\040" +
    "\021\033\022\035\023\027\024\014\035\031\042\360\047" +
    "\023\051\016\001\002\000\054\002\uff42\005\uff42\006\uff42" +
    "\007\uff42\010\351\011\uff42\012\uff42\013\uff42\014\uff42\015" +
    "\uff42\016\uff42\017\uff42\020\uff42\021\uff42\022\uff42\023\uff42" +
    "\024\uff42\035\uff42\042\uff42\047\uff42\051\uff42\001\002\000" +
    "\052\002\uff3f\005\uff3f\006\uff3f\007\uff3f\011\uff3f\012\uff3f" +
    "\013\uff3f\014\uff3f\015\uff3f\016\uff3f\017\uff3f\020\uff3f\021" +
    "\uff3f\022\uff3f\023\uff3f\024\uff3f\035\uff3f\042\uff3f\047\uff3f" +
    "\051\uff3f\001\002\000\004\041\363\001\002\000\050\005" +
    "\025\006\034\007\032\011\037\012\043\013\015\014\041" +
    "\015\036\016\022\017\013\020\040\021\033\022\035\023" +
    "\027\024\014\035\031\042\365\047\023\051\016\001\002" +
    "\000\050\005\025\006\034\007\032\011\037\012\043\013" +
    "\015\014\041\015\036\016\022\017\013\020\040\021\033" +
    "\022\035\023\027\024\014\035\031\042\366\047\023\051" +
    "\016\001\002\000\052\002\uff43\005\uff43\006\uff43\007\uff43" +
    "\011\uff43\012\uff43\013\uff43\014\uff43\015\uff43\016\uff43\017" +
    "\uff43\020\uff43\021\uff43\022\uff43\023\uff43\024\uff43\035\uff43" +
    "\042\uff43\047\uff43\051\uff43\001\002\000\054\002\uff44\005" +
    "\uff44\006\uff44\007\uff44\010\351\011\uff44\012\uff44\013\uff44" +
    "\014\uff44\015\uff44\016\uff44\017\uff44\020\uff44\021\uff44\022" +
    "\uff44\023\uff44\024\uff44\035\uff44\042\uff44\047\uff44\051\uff44" +
    "\001\002\000\052\002\uff40\005\uff40\006\uff40\007\uff40\011" +
    "\uff40\012\uff40\013\uff40\014\uff40\015\uff40\016\uff40\017\uff40" +
    "\020\uff40\021\uff40\022\uff40\023\uff40\024\uff40\035\uff40\042" +
    "\uff40\047\uff40\051\uff40\001\002\000\052\002\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\035\uffc5\042\uffc5\047\uffc5\051\uffc5\001\002\000" +
    "\006\040\375\046\374\001\002\000\004\046\373\001\002" +
    "\000\052\002\uff58\005\uff58\006\uff58\007\uff58\011\uff58\012" +
    "\uff58\013\uff58\014\uff58\015\uff58\016\uff58\017\uff58\020\uff58" +
    "\021\uff58\022\uff58\023\uff58\024\uff58\035\uff58\042\uff58\047" +
    "\uff58\051\uff58\001\002\000\052\002\uff59\005\uff59\006\uff59" +
    "\007\uff59\011\uff59\012\uff59\013\uff59\014\uff59\015\uff59\016" +
    "\uff59\017\uff59\020\uff59\021\uff59\022\uff59\023\uff59\024\uff59" +
    "\035\uff59\042\uff59\047\uff59\051\uff59\001\002\000\054\002" +
    "\uff5a\005\uff5a\006\uff5a\007\uff5a\011\uff5a\012\uff5a\013\uff5a" +
    "\014\uff5a\015\uff5a\016\uff5a\017\uff5a\020\uff5a\021\uff5a\022" +
    "\uff5a\023\uff5a\024\uff5a\035\uff5a\042\uff5a\046\376\047\uff5a" +
    "\051\uff5a\001\002\000\052\002\uff5b\005\uff5b\006\uff5b\007" +
    "\uff5b\011\uff5b\012\uff5b\013\uff5b\014\uff5b\015\uff5b\016\uff5b" +
    "\017\uff5b\020\uff5b\021\uff5b\022\uff5b\023\uff5b\024\uff5b\035" +
    "\uff5b\042\uff5b\047\uff5b\051\uff5b\001\002\000\052\002\uffdf" +
    "\005\uffdf\006\uffdf\007\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\035\uffdf\042\uffdf\047\uffdf\051\uffdf\001" +
    "\002\000\060\002\uffe0\005\uffe0\006\uffe0\007\uffe0\011\uffe0" +
    "\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\u010a\035\uffe0" +
    "\042\uffe0\046\u0109\047\uffe0\050\u0108\051\uffe0\001\002\000" +
    "\006\047\u0103\050\u0102\001\002\000\014\026\106\027\105" +
    "\030\107\031\104\046\u0107\001\002\000\014\026\057\027" +
    "\056\030\060\031\054\046\u0106\001\002\000\004\046\u0105" +
    "\001\002\000\052\002\uffce\005\uffce\006\uffce\007\uffce\011" +
    "\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\035\uffce\042" +
    "\uffce\047\uffce\051\uffce\001\002\000\052\002\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\035\uffd7\042\uffd7\047\uffd7\051\uffd7\001\002\000" +
    "\052\002\uffc1\005\uffc1\006\uffc1\007\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\035\uffc1\042\uffc1\047\uffc1" +
    "\051\uffc1\001\002\000\004\046\u0112\001\002\000\052\002" +
    "\uffe1\005\uffe1\006\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\035\uffe1\042\uffe1\047\uffe1\051\uffe1" +
    "\001\002\000\010\046\u010c\047\u010d\050\u010b\001\002\000" +
    "\064\002\uffc3\005\uffc3\006\uffc3\007\uffc3\011\uffc3\012\uffc3" +
    "\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\026\106\027\105\030\107" +
    "\031\104\035\uffc3\042\uffc3\046\u0111\047\uffc3\051\uffc3\001" +
    "\002\000\052\002\uffd8\005\uffd8\006\uffd8\007\uffd8\011\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\035\uffd8\042\uffd8" +
    "\047\uffd8\051\uffd8\001\002\000\064\002\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\026\057\027\056\030\060\031\054\035\uffd9\042\uffd9" +
    "\046\u0110\047\uffd9\051\uffd9\001\002\000\054\002\uffcf\005" +
    "\uffcf\006\uffcf\007\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\035\uffcf\042\uffcf\046\u010f\047\uffcf\051\uffcf" +
    "\001\002\000\052\002\uffd0\005\uffd0\006\uffd0\007\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\035\uffd0\042" +
    "\uffd0\047\uffd0\051\uffd0\001\002\000\052\002\uffda\005\uffda" +
    "\006\uffda\007\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\035\uffda\042\uffda\047\uffda\051\uffda\001\002\000" +
    "\052\002\uffc4\005\uffc4\006\uffc4\007\uffc4\011\uffc4\012\uffc4" +
    "\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\035\uffc4\042\uffc4\047\uffc4" +
    "\051\uffc4\001\002\000\052\002\uffc2\005\uffc2\006\uffc2\007" +
    "\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\035" +
    "\uffc2\042\uffc2\047\uffc2\051\uffc2\001\002\000\016\026\106" +
    "\027\105\030\107\031\104\040\u013c\046\u013b\001\002\000" +
    "\010\040\u012f\047\u012e\050\u012d\001\002\000\052\002\uffde" +
    "\005\uffde\006\uffde\007\uffde\011\uffde\012\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\035\uffde\042\uffde\047\uffde\051\uffde\001" +
    "\002\000\004\046\u012c\001\002\000\016\026\057\027\056" +
    "\030\060\031\054\040\u012a\046\u0129\001\002\000\054\002" +
    "\uffc6\005\uffc6\006\uffc6\007\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\035\uffc6\042\uffc6\046\u0128\047\uffc6" +
    "\051\uffc6\001\002\000\006\040\u0126\046\u0125\001\002\000" +
    "\012\036\u011d\046\uff35\047\u011e\050\u011b\001\002\000\066" +
    "\002\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\026\106\027\105\030\107\031" +
    "\104\033\134\035\uffbf\042\uffbf\046\u0124\047\uffbf\051\uffbf" +
    "\001\002\000\004\046\u0123\001\002\000\056\002\uffb8\005" +
    "\uffb8\006\uffb8\007\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\033\122\035\uffb8\042\uffb8\046\u0122\047\uffb8" +
    "\051\uffb8\001\002\000\066\002\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\026" +
    "\057\027\056\030\060\031\054\033\055\035\uffd2\042\uffd2" +
    "\046\u0121\047\uffd2\051\uffd2\001\002\000\056\002\uffcc\005" +
    "\uffcc\006\uffcc\007\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\033\052\035\uffcc\042\uffcc\046\u0120\047\uffcc" +
    "\051\uffcc\001\002\000\052\002\uffcd\005\uffcd\006\uffcd\007" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\035" +
    "\uffcd\042\uffcd\047\uffcd\051\uffcd\001\002\000\052\002\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\035\uffd3\042\uffd3\047\uffd3\051\uffd3\001" +
    "\002\000\052\002\uffb9\005\uffb9\006\uffb9\007\uffb9\011\uffb9" +
    "\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\035\uffb9\042\uffb9" +
    "\047\uffb9\051\uffb9\001\002\000\052\002\uffc8\005\uffc8\006" +
    "\uffc8\007\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\035\uffc8\042\uffc8\047\uffc8\051\uffc8\001\002\000\052" +
    "\002\uffc0\005\uffc0\006\uffc0\007\uffc0\011\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\035\uffc0\042\uffc0\047\uffc0\051" +
    "\uffc0\001\002\000\052\002\uffcb\005\uffcb\006\uffcb\007\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017" +
    "\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\035\uffcb" +
    "\042\uffcb\047\uffcb\051\uffcb\001\002\000\004\046\u0127\001" +
    "\002\000\052\002\uffad\005\uffad\006\uffad\007\uffad\011\uffad" +
    "\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\022\uffad\023\uffad\024\uffad\035\uffad\042\uffad" +
    "\047\uffad\051\uffad\001\002\000\052\002\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\035\uffc7\042\uffc7\047\uffc7\051\uffc7\001\002\000\052" +
    "\002\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\035\uffd1\042\uffd1\047\uffd1\051" +
    "\uffd1\001\002\000\004\046\u012b\001\002\000\052\002\uffa5" +
    "\005\uffa5\006\uffa5\007\uffa5\011\uffa5\012\uffa5\013\uffa5\014" +
    "\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5" +
    "\023\uffa5\024\uffa5\035\uffa5\042\uffa5\047\uffa5\051\uffa5\001" +
    "\002\000\052\002\uffb7\005\uffb7\006\uffb7\007\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\035\uffb7\042\uffb7" +
    "\047\uffb7\051\uffb7\001\002\000\016\026\106\027\105\030" +
    "\107\031\104\040\u0139\046\u0138\001\002\000\016\026\057" +
    "\027\056\030\060\031\054\040\u0136\046\u0135\001\002\000" +
    "\004\046\u0134\001\002\000\006\040\u0132\046\u0131\001\002" +
    "\000\052\002\uffaf\005\uffaf\006\uffaf\007\uffaf\011\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\035\uffaf\042\uffaf\047" +
    "\uffaf\051\uffaf\001\002\000\054\002\uffb0\005\uffb0\006\uffb0" +
    "\007\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0" +
    "\035\uffb0\042\uffb0\046\u0133\047\uffb0\051\uffb0\001\002\000" +
    "\052\002\uffb1\005\uffb1\006\uffb1\007\uffb1\011\uffb1\012\uffb1" +
    "\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\022\uffb1\023\uffb1\024\uffb1\035\uffb1\042\uffb1\047\uffb1" +
    "\051\uffb1\001\002\000\052\002\uffae\005\uffae\006\uffae\007" +
    "\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae" +
    "\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\035" +
    "\uffae\042\uffae\047\uffae\051\uffae\001\002\000\052\002\uffa6" +
    "\005\uffa6\006\uffa6\007\uffa6\011\uffa6\012\uffa6\013\uffa6\014" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6" +
    "\023\uffa6\024\uffa6\035\uffa6\042\uffa6\047\uffa6\051\uffa6\001" +
    "\002\000\054\002\uffa7\005\uffa7\006\uffa7\007\uffa7\011\uffa7" +
    "\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020" +
    "\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\035\uffa7\042\uffa7" +
    "\046\u0137\047\uffa7\051\uffa7\001\002\000\052\002\uffa8\005" +
    "\uffa8\006\uffa8\007\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023" +
    "\uffa8\024\uffa8\035\uffa8\042\uffa8\047\uffa8\051\uffa8\001\002" +
    "\000\052\002\uff9e\005\uff9e\006\uff9e\007\uff9e\011\uff9e\012" +
    "\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e" +
    "\021\uff9e\022\uff9e\023\uff9e\024\uff9e\035\uff9e\042\uff9e\047" +
    "\uff9e\051\uff9e\001\002\000\054\002\uff9f\005\uff9f\006\uff9f" +
    "\007\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016" +
    "\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f" +
    "\035\uff9f\042\uff9f\046\u013a\047\uff9f\051\uff9f\001\002\000" +
    "\052\002\uffa0\005\uffa0\006\uffa0\007\uffa0\011\uffa0\012\uffa0" +
    "\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021" +
    "\uffa0\022\uffa0\023\uffa0\024\uffa0\035\uffa0\042\uffa0\047\uffa0" +
    "\051\uffa0\001\002\000\052\002\uffbe\005\uffbe\006\uffbe\007" +
    "\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\035" +
    "\uffbe\042\uffbe\047\uffbe\051\uffbe\001\002\000\004\046\u013d" +
    "\001\002\000\052\002\uff9d\005\uff9d\006\uff9d\007\uff9d\011" +
    "\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d" +
    "\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\035\uff9d\042" +
    "\uff9d\047\uff9d\051\uff9d\001\002\000\014\026\106\027\105" +
    "\030\107\031\104\040\u0154\001\002\000\010\040\u0148\047" +
    "\u0147\050\u0146\001\002\000\014\026\057\027\056\030\060" +
    "\031\054\040\u0144\001\002\000\004\040\u0142\001\002\000" +
    "\004\046\u0143\001\002\000\052\002\uff98\005\uff98\006\uff98" +
    "\007\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016" +
    "\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98" +
    "\035\uff98\042\uff98\047\uff98\051\uff98\001\002\000\004\046" +
    "\u0145\001\002\000\052\002\uff94\005\uff94\006\uff94\007\uff94" +
    "\011\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017" +
    "\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\035\uff94" +
    "\042\uff94\047\uff94\051\uff94\001\002\000\016\026\106\027" +
    "\105\030\107\031\104\040\u0152\046\u0151\001\002\000\016" +
    "\026\057\027\056\030\060\031\054\040\u014f\046\u014e\001" +
    "\002\000\004\046\u014d\001\002\000\006\040\u014b\046\u014a" +
    "\001\002\000\052\002\uff9a\005\uff9a\006\uff9a\007\uff9a\011" +
    "\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a" +
    "\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\035\uff9a\042" +
    "\uff9a\047\uff9a\051\uff9a\001\002\000\054\002\uff9b\005\uff9b" +
    "\006\uff9b\007\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015" +
    "\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b" +
    "\024\uff9b\035\uff9b\042\uff9b\046\u014c\047\uff9b\051\uff9b\001" +
    "\002\000\052\002\uff9c\005\uff9c\006\uff9c\007\uff9c\011\uff9c" +
    "\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020" +
    "\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\035\uff9c\042\uff9c" +
    "\047\uff9c\051\uff9c\001\002\000\052\002\uff99\005\uff99\006" +
    "\uff99\007\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99" +
    "\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024" +
    "\uff99\035\uff99\042\uff99\047\uff99\051\uff99\001\002\000\052" +
    "\002\uff95\005\uff95\006\uff95\007\uff95\011\uff95\012\uff95\013" +
    "\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95" +
    "\022\uff95\023\uff95\024\uff95\035\uff95\042\uff95\047\uff95\051" +
    "\uff95\001\002\000\054\002\uff96\005\uff96\006\uff96\007\uff96" +
    "\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96\017" +
    "\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\035\uff96" +
    "\042\uff96\046\u0150\047\uff96\051\uff96\001\002\000\052\002" +
    "\uff97\005\uff97\006\uff97\007\uff97\011\uff97\012\uff97\013\uff97" +
    "\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022" +
    "\uff97\023\uff97\024\uff97\035\uff97\042\uff97\047\uff97\051\uff97" +
    "\001\002\000\052\002\uff91\005\uff91\006\uff91\007\uff91\011" +
    "\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91\017\uff91" +
    "\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91\035\uff91\042" +
    "\uff91\047\uff91\051\uff91\001\002\000\054\002\uff92\005\uff92" +
    "\006\uff92\007\uff92\011\uff92\012\uff92\013\uff92\014\uff92\015" +
    "\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92" +
    "\024\uff92\035\uff92\042\uff92\046\u0153\047\uff92\051\uff92\001" +
    "\002\000\052\002\uff93\005\uff93\006\uff93\007\uff93\011\uff93" +
    "\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020" +
    "\uff93\021\uff93\022\uff93\023\uff93\024\uff93\035\uff93\042\uff93" +
    "\047\uff93\051\uff93\001\002\000\004\046\u0155\001\002\000" +
    "\052\002\uff90\005\uff90\006\uff90\007\uff90\011\uff90\012\uff90" +
    "\013\uff90\014\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021" +
    "\uff90\022\uff90\023\uff90\024\uff90\035\uff90\042\uff90\047\uff90" +
    "\051\uff90\001\002\000\004\002\ufff7\001\002\000\014\026" +
    "\106\027\105\030\107\031\104\040\u016d\001\002\000\010" +
    "\040\u0161\047\u0160\050\u015f\001\002\000\014\026\057\027" +
    "\056\030\060\031\054\040\u015d\001\002\000\004\040\u015b" +
    "\001\002\000\004\046\u015c\001\002\000\052\002\uff4d\005" +
    "\uff4d\006\uff4d\007\uff4d\011\uff4d\012\uff4d\013\uff4d\014\uff4d" +
    "\015\uff4d\016\uff4d\017\uff4d\020\uff4d\021\uff4d\022\uff4d\023" +
    "\uff4d\024\uff4d\035\uff4d\042\uff4d\047\uff4d\051\uff4d\001\002" +
    "\000\004\046\u015e\001\002\000\052\002\uff49\005\uff49\006" +
    "\uff49\007\uff49\011\uff49\012\uff49\013\uff49\014\uff49\015\uff49" +
    "\016\uff49\017\uff49\020\uff49\021\uff49\022\uff49\023\uff49\024" +
    "\uff49\035\uff49\042\uff49\047\uff49\051\uff49\001\002\000\016" +
    "\026\106\027\105\030\107\031\104\040\u016b\046\u016a\001" +
    "\002\000\016\026\057\027\056\030\060\031\054\040\u0168" +
    "\046\u0167\001\002\000\004\046\u0166\001\002\000\006\040" +
    "\u0164\046\u0163\001\002\000\052\002\uff4f\005\uff4f\006\uff4f" +
    "\007\uff4f\011\uff4f\012\uff4f\013\uff4f\014\uff4f\015\uff4f\016" +
    "\uff4f\017\uff4f\020\uff4f\021\uff4f\022\uff4f\023\uff4f\024\uff4f" +
    "\035\uff4f\042\uff4f\047\uff4f\051\uff4f\001\002\000\054\002" +
    "\uff50\005\uff50\006\uff50\007\uff50\011\uff50\012\uff50\013\uff50" +
    "\014\uff50\015\uff50\016\uff50\017\uff50\020\uff50\021\uff50\022" +
    "\uff50\023\uff50\024\uff50\035\uff50\042\uff50\046\u0165\047\uff50" +
    "\051\uff50\001\002\000\052\002\uff51\005\uff51\006\uff51\007" +
    "\uff51\011\uff51\012\uff51\013\uff51\014\uff51\015\uff51\016\uff51" +
    "\017\uff51\020\uff51\021\uff51\022\uff51\023\uff51\024\uff51\035" +
    "\uff51\042\uff51\047\uff51\051\uff51\001\002\000\052\002\uff4e" +
    "\005\uff4e\006\uff4e\007\uff4e\011\uff4e\012\uff4e\013\uff4e\014" +
    "\uff4e\015\uff4e\016\uff4e\017\uff4e\020\uff4e\021\uff4e\022\uff4e" +
    "\023\uff4e\024\uff4e\035\uff4e\042\uff4e\047\uff4e\051\uff4e\001" +
    "\002\000\052\002\uff4a\005\uff4a\006\uff4a\007\uff4a\011\uff4a" +
    "\012\uff4a\013\uff4a\014\uff4a\015\uff4a\016\uff4a\017\uff4a\020" +
    "\uff4a\021\uff4a\022\uff4a\023\uff4a\024\uff4a\035\uff4a\042\uff4a" +
    "\047\uff4a\051\uff4a\001\002\000\054\002\uff4b\005\uff4b\006" +
    "\uff4b\007\uff4b\011\uff4b\012\uff4b\013\uff4b\014\uff4b\015\uff4b" +
    "\016\uff4b\017\uff4b\020\uff4b\021\uff4b\022\uff4b\023\uff4b\024" +
    "\uff4b\035\uff4b\042\uff4b\046\u0169\047\uff4b\051\uff4b\001\002" +
    "\000\052\002\uff4c\005\uff4c\006\uff4c\007\uff4c\011\uff4c\012" +
    "\uff4c\013\uff4c\014\uff4c\015\uff4c\016\uff4c\017\uff4c\020\uff4c" +
    "\021\uff4c\022\uff4c\023\uff4c\024\uff4c\035\uff4c\042\uff4c\047" +
    "\uff4c\051\uff4c\001\002\000\052\002\uff46\005\uff46\006\uff46" +
    "\007\uff46\011\uff46\012\uff46\013\uff46\014\uff46\015\uff46\016" +
    "\uff46\017\uff46\020\uff46\021\uff46\022\uff46\023\uff46\024\uff46" +
    "\035\uff46\042\uff46\047\uff46\051\uff46\001\002\000\054\002" +
    "\uff47\005\uff47\006\uff47\007\uff47\011\uff47\012\uff47\013\uff47" +
    "\014\uff47\015\uff47\016\uff47\017\uff47\020\uff47\021\uff47\022" +
    "\uff47\023\uff47\024\uff47\035\uff47\042\uff47\046\u016c\047\uff47" +
    "\051\uff47\001\002\000\052\002\uff48\005\uff48\006\uff48\007" +
    "\uff48\011\uff48\012\uff48\013\uff48\014\uff48\015\uff48\016\uff48" +
    "\017\uff48\020\uff48\021\uff48\022\uff48\023\uff48\024\uff48\035" +
    "\uff48\042\uff48\047\uff48\051\uff48\001\002\000\004\046\u016e" +
    "\001\002\000\052\002\uff45\005\uff45\006\uff45\007\uff45\011" +
    "\uff45\012\uff45\013\uff45\014\uff45\015\uff45\016\uff45\017\uff45" +
    "\020\uff45\021\uff45\022\uff45\023\uff45\024\uff45\035\uff45\042" +
    "\uff45\047\uff45\051\uff45\001\002\000\006\005\u0172\047\u0171" +
    "\001\002\000\004\040\u0186\001\002\000\004\025\u0180\001" +
    "\002\000\004\047\u0173\001\002\000\004\025\u0174\001\002" +
    "\000\004\050\u0175\001\002\000\004\046\u0176\001\002\000" +
    "\012\036\u0178\046\uff35\047\u0179\050\045\001\002\000\004" +
    "\046\u017a\001\002\000\004\033\122\001\002\000\014\026" +
    "\057\027\056\030\060\031\054\033\055\001\002\000\004" +
    "\047\u017c\001\002\000\004\040\uff1d\001\002\000\006\034" +
    "\u017d\035\u017e\001\002\000\004\050\u017f\001\002\000\004" +
    "\040\uff1a\001\002\000\004\040\uff1b\001\002\000\004\050" +
    "\u0181\001\002\000\004\046\u0182\001\002\000\012\036\u0178" +
    "\046\uff35\047\u0179\050\045\001\002\000\004\046\u0184\001" +
    "\002\000\004\047\u017c\001\002\000\004\040\uff1c\001\002" +
    "\000\004\041\u0187\001\002\000\046\005\025\006\034\007" +
    "\032\011\037\012\043\013\015\014\041\015\036\016\022" +
    "\017\013\020\040\021\033\022\035\023\027\024\014\035" +
    "\031\047\023\051\016\001\002\000\050\005\025\006\034" +
    "\007\032\011\037\012\043\013\015\014\041\015\036\016" +
    "\022\017\013\020\040\021\033\022\035\023\027\024\014" +
    "\035\031\042\u0189\047\023\051\016\001\002\000\052\002" +
    "\uff1e\005\uff1e\006\uff1e\007\uff1e\011\uff1e\012\uff1e\013\uff1e" +
    "\014\uff1e\015\uff1e\016\uff1e\017\uff1e\020\uff1e\021\uff1e\022" +
    "\uff1e\023\uff1e\024\uff1e\035\uff1e\042\uff1e\047\uff1e\051\uff1e" +
    "\001\002\000\006\040\u018e\046\u018d\001\002\000\004\046" +
    "\u018c\001\002\000\052\002\uff54\005\uff54\006\uff54\007\uff54" +
    "\011\uff54\012\uff54\013\uff54\014\uff54\015\uff54\016\uff54\017" +
    "\uff54\020\uff54\021\uff54\022\uff54\023\uff54\024\uff54\035\uff54" +
    "\042\uff54\047\uff54\051\uff54\001\002\000\052\002\uff55\005" +
    "\uff55\006\uff55\007\uff55\011\uff55\012\uff55\013\uff55\014\uff55" +
    "\015\uff55\016\uff55\017\uff55\020\uff55\021\uff55\022\uff55\023" +
    "\uff55\024\uff55\035\uff55\042\uff55\047\uff55\051\uff55\001\002" +
    "\000\054\002\uff56\005\uff56\006\uff56\007\uff56\011\uff56\012" +
    "\uff56\013\uff56\014\uff56\015\uff56\016\uff56\017\uff56\020\uff56" +
    "\021\uff56\022\uff56\023\uff56\024\uff56\035\uff56\042\uff56\046" +
    "\u018f\047\uff56\051\uff56\001\002\000\052\002\uff57\005\uff57" +
    "\006\uff57\007\uff57\011\uff57\012\uff57\013\uff57\014\uff57\015" +
    "\uff57\016\uff57\017\uff57\020\uff57\021\uff57\022\uff57\023\uff57" +
    "\024\uff57\035\uff57\042\uff57\047\uff57\051\uff57\001\002\000" +
    "\014\026\106\027\105\030\107\031\104\040\u01a6\001\002" +
    "\000\010\040\u019a\047\u0199\050\u0198\001\002\000\014\026" +
    "\057\027\056\030\060\031\054\040\u0196\001\002\000\004" +
    "\040\u0194\001\002\000\004\046\u0195\001\002\000\052\002" +
    "\uff8b\005\uff8b\006\uff8b\007\uff8b\011\uff8b\012\uff8b\013\uff8b" +
    "\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022" +
    "\uff8b\023\uff8b\024\uff8b\035\uff8b\042\uff8b\047\uff8b\051\uff8b" +
    "\001\002\000\004\046\u0197\001\002\000\052\002\uff87\005" +
    "\uff87\006\uff87\007\uff87\011\uff87\012\uff87\013\uff87\014\uff87" +
    "\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023" +
    "\uff87\024\uff87\035\uff87\042\uff87\047\uff87\051\uff87\001\002" +
    "\000\016\026\106\027\105\030\107\031\104\040\u01a4\046" +
    "\u01a3\001\002\000\016\026\057\027\056\030\060\031\054" +
    "\040\u01a1\046\u01a0\001\002\000\004\046\u019f\001\002\000" +
    "\006\040\u019d\046\u019c\001\002\000\052\002\uff8d\005\uff8d" +
    "\006\uff8d\007\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d\015" +
    "\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d" +
    "\024\uff8d\035\uff8d\042\uff8d\047\uff8d\051\uff8d\001\002\000" +
    "\054\002\uff8e\005\uff8e\006\uff8e\007\uff8e\011\uff8e\012\uff8e" +
    "\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021" +
    "\uff8e\022\uff8e\023\uff8e\024\uff8e\035\uff8e\042\uff8e\046\u019e" +
    "\047\uff8e\051\uff8e\001\002\000\052\002\uff8f\005\uff8f\006" +
    "\uff8f\007\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f" +
    "\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024" +
    "\uff8f\035\uff8f\042\uff8f\047\uff8f\051\uff8f\001\002\000\052" +
    "\002\uff8c\005\uff8c\006\uff8c\007\uff8c\011\uff8c\012\uff8c\013" +
    "\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c" +
    "\022\uff8c\023\uff8c\024\uff8c\035\uff8c\042\uff8c\047\uff8c\051" +
    "\uff8c\001\002\000\052\002\uff88\005\uff88\006\uff88\007\uff88" +
    "\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017" +
    "\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\035\uff88" +
    "\042\uff88\047\uff88\051\uff88\001\002\000\054\002\uff89\005" +
    "\uff89\006\uff89\007\uff89\011\uff89\012\uff89\013\uff89\014\uff89" +
    "\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023" +
    "\uff89\024\uff89\035\uff89\042\uff89\046\u01a2\047\uff89\051\uff89" +
    "\001\002\000\052\002\uff8a\005\uff8a\006\uff8a\007\uff8a\011" +
    "\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a" +
    "\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\035\uff8a\042" +
    "\uff8a\047\uff8a\051\uff8a\001\002\000\052\002\uff84\005\uff84" +
    "\006\uff84\007\uff84\011\uff84\012\uff84\013\uff84\014\uff84\015" +
    "\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84\023\uff84" +
    "\024\uff84\035\uff84\042\uff84\047\uff84\051\uff84\001\002\000" +
    "\054\002\uff85\005\uff85\006\uff85\007\uff85\011\uff85\012\uff85" +
    "\013\uff85\014\uff85\015\uff85\016\uff85\017\uff85\020\uff85\021" +
    "\uff85\022\uff85\023\uff85\024\uff85\035\uff85\042\uff85\046\u01a5" +
    "\047\uff85\051\uff85\001\002\000\052\002\uff86\005\uff86\006" +
    "\uff86\007\uff86\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86" +
    "\016\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024" +
    "\uff86\035\uff86\042\uff86\047\uff86\051\uff86\001\002\000\004" +
    "\046\u01a7\001\002\000\052\002\uff83\005\uff83\006\uff83\007" +
    "\uff83\011\uff83\012\uff83\013\uff83\014\uff83\015\uff83\016\uff83" +
    "\017\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024\uff83\035" +
    "\uff83\042\uff83\047\uff83\051\uff83\001\002\000\050\005\025" +
    "\006\034\007\032\011\037\012\043\013\015\014\041\015" +
    "\036\016\022\017\013\020\040\021\033\022\035\023\027" +
    "\024\014\035\031\042\u01b2\047\023\051\016\001\002\000" +
    "\052\005\025\006\034\007\032\011\037\012\043\013\015" +
    "\014\041\015\036\016\022\017\013\020\040\021\033\022" +
    "\035\023\027\024\014\035\031\041\u01ac\042\u01ab\047\023" +
    "\051\016\001\002\000\050\005\025\006\034\007\032\011" +
    "\037\012\043\013\015\014\041\015\036\016\022\017\013" +
    "\020\040\021\033\022\035\023\027\024\014\035\031\042" +
    "\u01b0\047\023\051\016\001\002\000\004\002\uffef\001\002" +
    "\000\052\002\ufff0\005\025\006\034\007\032\011\037\012" +
    "\043\013\015\014\041\015\036\016\022\017\013\020\040" +
    "\021\033\022\035\023\027\024\014\035\031\042\u01ae\047" +
    "\023\051\016\001\002\000\052\002\ufffa\005\025\006\034" +
    "\007\032\011\037\012\043\013\015\014\041\015\036\016" +
    "\022\017\013\020\040\021\033\022\035\023\027\024\014" +
    "\035\031\042\u01af\047\023\051\016\001\002\000\004\002" +
    "\ufff1\001\002\000\004\002\ufffb\001\002\000\004\002\ufff9" +
    "\001\002\000\050\005\025\006\034\007\032\011\037\012" +
    "\043\013\015\014\041\015\036\016\022\017\013\020\040" +
    "\021\033\022\035\023\027\024\014\035\031\042\u01b3\047" +
    "\023\051\016\001\002\000\004\002\uffee\001\002\000\004" +
    "\002\ufff8\001\002\000\006\040\u01bb\041\u01ba\001\002\000" +
    "\004\041\u01b6\001\002\000\050\005\025\006\034\007\032" +
    "\011\037\012\043\013\015\014\041\015\036\016\022\017" +
    "\013\020\040\021\033\022\035\023\027\024\014\035\031" +
    "\042\u01b8\047\023\051\016\001\002\000\050\005\025\006" +
    "\034\007\032\011\037\012\043\013\015\014\041\015\036" +
    "\016\022\017\013\020\040\021\033\022\035\023\027\024" +
    "\014\035\031\042\u01b9\047\023\051\016\001\002\000\004" +
    "\002\ufff2\001\002\000\004\002\ufffc\001\002\000\050\005" +
    "\025\006\034\007\032\011\037\012\043\013\015\014\041" +
    "\015\036\016\022\017\013\020\040\021\033\022\035\023" +
    "\027\024\014\035\031\042\u01c4\047\023\051\016\001\002" +
    "\000\052\005\025\006\034\007\032\011\037\012\043\013" +
    "\015\014\041\015\036\016\022\017\013\020\040\021\033" +
    "\022\035\023\027\024\014\035\031\041\u01be\042\u01bd\047" +
    "\023\051\016\001\002\000\050\005\025\006\034\007\032" +
    "\011\037\012\043\013\015\014\041\015\036\016\022\017" +
    "\013\020\040\021\033\022\035\023\027\024\014\035\031" +
    "\042\u01c2\047\023\051\016\001\002\000\004\002\ufff4\001" +
    "\002\000\052\002\ufff5\005\025\006\034\007\032\011\037" +
    "\012\043\013\015\014\041\015\036\016\022\017\013\020" +
    "\040\021\033\022\035\023\027\024\014\035\031\042\u01c0" +
    "\047\023\051\016\001\002\000\052\002\uffff\005\025\006" +
    "\034\007\032\011\037\012\043\013\015\014\041\015\036" +
    "\016\022\017\013\020\040\021\033\022\035\023\027\024" +
    "\014\035\031\042\u01c1\047\023\051\016\001\002\000\004" +
    "\002\ufff6\001\002\000\004\002\000\001\002\000\004\002" +
    "\ufffe\001\002\000\050\005\025\006\034\007\032\011\037" +
    "\012\043\013\015\014\041\015\036\016\022\017\013\020" +
    "\040\021\033\022\035\023\027\024\014\035\031\042\u01c5" +
    "\047\023\051\016\001\002\000\004\002\ufff3\001\002\000" +
    "\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c3\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\020\004\017\006" +
    "\023\010\016\011\027\012\041\001\001\000\004\014\u0192" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\u0159\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\064\006\065\010\063\011\067\012\070\001\001\000" +
    "\004\014\u0140\001\001\000\004\014\u0118\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\312\001\001\000\002\001\001\000\004\014" +
    "\237\001\001\000\004\014\207\001\001\000\002\001\001" +
    "\000\004\014\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\045\014\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\062\004\017\006\023\010\016\011" +
    "\027\012\041\001\001\000\014\004\064\006\065\010\063" +
    "\011\067\012\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\124\004\017\006\023\010" +
    "\016\011\027\012\041\001\001\000\014\004\064\006\065" +
    "\010\063\011\067\012\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\131\004\017" +
    "\006\023\010\016\011\027\012\041\001\001\000\014\004" +
    "\064\006\065\010\063\011\067\012\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\167\004" +
    "\017\006\023\010\016\011\027\012\041\001\001\000\014" +
    "\004\064\006\065\010\063\011\067\012\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\173\014\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\246\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\267\014" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\300" +
    "\014\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\340\014\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\345\004\017\006\023\010\016\011\027\012\041\001" +
    "\001\000\014\004\064\006\065\010\063\011\067\012\070" +
    "\001\001\000\004\007\347\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\352\004\017\006\023\010\016" +
    "\011\027\012\041\001\001\000\014\004\064\006\065\010" +
    "\063\011\067\012\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\356\004\017\006\023\010\016\011" +
    "\027\012\041\001\001\000\014\004\064\006\065\010\063" +
    "\011\067\012\070\001\001\000\004\007\360\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\363\004\017" +
    "\006\023\010\016\011\027\012\041\001\001\000\014\004" +
    "\064\006\065\010\063\011\067\012\070\001\001\000\002" +
    "\001\001\000\004\007\366\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\u0103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\u010d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\u012f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\u011b\014\u011e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\u0148\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\u0161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\u016f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\u0176\014\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\u017a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\u0182\014\050\001\001\000\002\001\001" +
    "\000\004\005\u0184\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\u0187\004\017\006\023\010\016\011\027" +
    "\012\041\001\001\000\014\004\064\006\065\010\063\011" +
    "\067\012\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\u019a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\u01b0\004\017\006\023\010\016\011\027" +
    "\012\041\001\001\000\016\003\u01a9\004\017\006\023\010" +
    "\016\011\027\012\041\001\001\000\014\004\064\006\065" +
    "\010\063\011\067\012\070\001\001\000\002\001\001\000" +
    "\016\003\u01ac\004\017\006\023\010\016\011\027\012\041" +
    "\001\001\000\014\004\064\006\065\010\063\011\067\012" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\064\006\065\010\063\011\067\012" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\u01b6\004\017\006" +
    "\023\010\016\011\027\012\041\001\001\000\014\004\064" +
    "\006\065\010\063\011\067\012\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\u01c2\004\017\006\023" +
    "\010\016\011\027\012\041\001\001\000\016\003\u01bb\004" +
    "\017\006\023\010\016\011\027\012\041\001\001\000\014" +
    "\004\064\006\065\010\063\011\067\012\070\001\001\000" +
    "\002\001\001\000\016\003\u01be\004\017\006\023\010\016" +
    "\011\027\012\041\001\001\000\014\004\064\006\065\010" +
    "\063\011\067\012\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\064\006\065\010" +
    "\063\011\067\012\070\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.d_for="("+o+", , ,"+i+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.d_for="("+o+","+n+", ,"+i+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.s_for="("+g+","+n+", ,"+i+")\nstartloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.s_for=PrincipalCompi.s_bool+"(jf loop"+PrincipalCompi.loop+":,"+PrincipalCompi.tempb+", , )\n";
    PrincipalCompi.tempb++;
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                a.setValor(n);
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // SENTENCIA_FOR ::= Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.s_for="("+t+", , ,"+i+")\n("+g+","+n+", ,"+i+")\nstartloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.s_for=PrincipalCompi.s_bool+"(iff,TB"+PrincipalCompi.tempb+", , )\n(jnz loop"+PrincipalCompi.loop+":, , , )\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            a=new Simbolo(i,t,n);
            PrincipalCompi.tabla_simbolos.add(a);
        }else{
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.fors=PrincipalCompi.s_for+PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.d_for+"loop"+PrincipalCompi.loop+":\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.dowhiles="startloop"+PrincipalCompi.loop+":\n"+PrincipalCompi.sentencia[PrincipalCompi.status];
    PrincipalCompi.dowhiles=PrincipalCompi.dowhiles+"(jt startloop"+PrincipalCompi.loop+":,"+o+", , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.loop++;
    PrincipalCompi.sentencia[PrincipalCompi.status]="";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(o.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el identificador "+o+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("bool")){
                PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el identificador "+o+" no es de tipo bool");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el identificador "+o+" no ha sido inicializado");
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a Op_booleano Parentesis_c P_coma 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.dowhiles="startloop"+PrincipalCompi.loop+":\n"+PrincipalCompi.sentencia[PrincipalCompi.status];
    PrincipalCompi.dowhiles=PrincipalCompi.dowhiles+"(jt startloop"+PrincipalCompi.loop+":,"+o+", , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.loop++;
    PrincipalCompi.sentencia[PrincipalCompi.status]="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.dowhiles="startloop"+PrincipalCompi.loop+":\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.s_bool;
    PrincipalCompi.dowhiles=PrincipalCompi.dowhiles+"(jt startloop"+PrincipalCompi.loop+":,TB"+PrincipalCompi.tempb+", , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.tempb++;
    PrincipalCompi.loop++;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // WHILE ::= While Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.whiles="startloop"+PrincipalCompi.loop+":\n"+"(jf loop"+PrincipalCompi.loop+":,"+o+", , )\n";
    PrincipalCompi.whiles=PrincipalCompi.whiles+PrincipalCompi.sentencia[PrincipalCompi.status]+"(jmp startloop"+PrincipalCompi.loop+":, , , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.loop++;
    PrincipalCompi.s_bool=PrincipalCompi.sentencia[PrincipalCompi.status]="";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(o.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el identificador "+o+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("bool")){
                PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el identificador "+o+" no es de tipo bool");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el identificador "+o+" no ha sido inicializado");
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // WHILE ::= While Parentesis_a Op_booleano Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.whiles="startloop"+PrincipalCompi.loop+":\n"+"(jf loop"+PrincipalCompi.loop+":,"+o+", , )\n";
    PrincipalCompi.whiles=PrincipalCompi.whiles+PrincipalCompi.sentencia[PrincipalCompi.status]+"(jmp startloop"+PrincipalCompi.loop+":, , , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.loop++;
    PrincipalCompi.s_bool=PrincipalCompi.sentencia[PrincipalCompi.status]="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.whiles="startloop"+PrincipalCompi.loop+":\n"+PrincipalCompi.s_bool+"(jf loop"+PrincipalCompi.loop+":,TB"+PrincipalCompi.tempb+", , )\n";
    PrincipalCompi.whiles=PrincipalCompi.whiles+PrincipalCompi.sentencia[PrincipalCompi.status]+"(jmp startloop"+PrincipalCompi.loop+":, , , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.loop++;
    PrincipalCompi.tempb++;
    PrincipalCompi.s_bool=PrincipalCompi.sentencia[PrincipalCompi.status]="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // SENTENCIA_ARITMETICA ::= Identificador Division Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
    Simbolo b=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
            if(n.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                b=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null || b==null){
            if(a==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
            }
            if(b==null){
                PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido declarado");
            }
        }else{
            if(!a.getTipo().toString().equals("int") || !b.getTipo().toString().equals("int")){
                if(!a.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                }
                if(!b.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no es de tipo int");
                }
            }else{
                if(a.getValor()==null||b.getValor()==null){
                    if(a.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                    }
                    if(b.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido inicializado");
                    }
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())+Integer.parseInt(b.getValor().toString());
                }
            }
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // SENTENCIA_ARITMETICA ::= Numero Division Identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(n.toString())/Integer.parseInt(a.getValor().toString());
                }
            }
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // SENTENCIA_ARITMETICA ::= Identificador Division Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())/Integer.parseInt(n.toString());
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // SENTENCIA_ARITMETICA ::= Numero Division Numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.value=Integer.parseInt(n.toString())/Integer.parseInt(i.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // SENTENCIA_ARITMETICA ::= Identificador Multiplicacion Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
    Simbolo b=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
            if(n.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                b=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null || b==null){
            if(a==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
            }
            if(b==null){
                PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido declarado");
            }
        }else{
            if(!a.getTipo().toString().equals("int") || !b.getTipo().toString().equals("int")){
                if(!a.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                }
                if(!b.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no es de tipo int");
                }
            }else{
                if(a.getValor()==null||b.getValor()==null){
                    if(a.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                    }
                    if(b.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido inicializado");
                    }
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())+Integer.parseInt(b.getValor().toString());
                }
            }
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // SENTENCIA_ARITMETICA ::= Numero Multiplicacion Identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(n.toString())*Integer.parseInt(a.getValor().toString());
                }
            }
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // SENTENCIA_ARITMETICA ::= Identificador Multiplicacion Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())*Integer.parseInt(n.toString());
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // SENTENCIA_ARITMETICA ::= Numero Multiplicacion Numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.value=Integer.parseInt(n.toString())*Integer.parseInt(i.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // SENTENCIA_ARITMETICA ::= Identificador Resta Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
    Simbolo b=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
            if(n.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                b=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null || b==null){
            if(a==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
            }
            if(b==null){
                PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido declarado");
            }
        }else{
            if(!a.getTipo().toString().equals("int") || !b.getTipo().toString().equals("int")){
                if(!a.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                }
                if(!b.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no es de tipo int");
                }
            }else{
                if(a.getValor()==null||b.getValor()==null){
                    if(a.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                    }
                    if(b.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido inicializado");
                    }
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())+Integer.parseInt(b.getValor().toString());
                }
            }
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // SENTENCIA_ARITMETICA ::= Numero Resta Identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(n.toString())-Integer.parseInt(a.getValor().toString());
                }
            }
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // SENTENCIA_ARITMETICA ::= Identificador Resta Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())-Integer.parseInt(n.toString());
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // SENTENCIA_ARITMETICA ::= Numero Resta Numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.value=Integer.parseInt(n.toString())-Integer.parseInt(i.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // SENTENCIA_ARITMETICA ::= Identificador Suma Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
    Simbolo b=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
            if(n.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                b=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null || b==null){
            if(a==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
            }
            if(b==null){
                PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido declarado");
            }
        }else{
            if(!a.getTipo().toString().equals("int") || !b.getTipo().toString().equals("int")){
                if(!a.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                }
                if(!b.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no es de tipo int");
                }
            }else{
                if(a.getValor()==null||b.getValor()==null){
                    if(a.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                    }
                    if(b.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido inicializado");
                    }
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())+Integer.parseInt(b.getValor().toString());
                }
            }
        }
        

    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // SENTENCIA_ARITMETICA ::= Numero Suma Identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(n.toString())+Integer.parseInt(a.getValor().toString());
                }
            }
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // SENTENCIA_ARITMETICA ::= Identificador Suma Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
        Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())+Integer.parseInt(n.toString());
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // SENTENCIA_ARITMETICA ::= Numero Suma Numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
        PrincipalCompi.value=Integer.parseInt(n.toString())+Integer.parseInt(i.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // SENTENCIA_BOOLEANA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // SENTENCIA_BOOLEANA ::= Numero Op_relacional Identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool=PrincipalCompi.s_arit+"("+o+","+n+","+i+",TB"+PrincipalCompi.tempb+")\n";
    PrincipalCompi.temp++;
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("int")){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
        }else{
            if(a.getValor()==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
            }else{
                switch(o.toString()){
                    case ">":PrincipalCompi.valueb=Integer.parseInt(n.toString())>Integer.parseInt(a.getValor().toString());break;
                    case "<":PrincipalCompi.valueb=Integer.parseInt(n.toString())<Integer.parseInt(a.getValor().toString());break;
                    case "==":PrincipalCompi.valueb=Integer.parseInt(n.toString())==Integer.parseInt(a.getValor().toString());break;
                    case "!=": PrincipalCompi.valueb=Integer.parseInt(n.toString())!=Integer.parseInt(a.getValor().toString());break;
                    case ">=": PrincipalCompi.valueb=Integer.parseInt(n.toString())>=Integer.parseInt(a.getValor().toString());break;
                    case "<=": PrincipalCompi.valueb=Integer.parseInt(n.toString())<=Integer.parseInt(a.getValor().toString());break;
                    case ">>": PrincipalCompi.valueb=Integer.parseInt(n.toString())>Integer.parseInt(a.getValor().toString());break;
                    case "<<": PrincipalCompi.valueb=Integer.parseInt(n.toString())<Integer.parseInt(a.getValor().toString());break;
                    default:break;
                }
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool="("+o+","+i+","+n+",TB"+PrincipalCompi.tempb+")\n";
    PrincipalCompi.temp++;
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("int")){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
        }else{
            if(a.getValor()==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
            }else{
                switch(o.toString()){
                    case ">":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(n.toString());break;
                    case "<":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<Integer.parseInt(n.toString());break;
                    case "==":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())==Integer.parseInt(n.toString());break;
                    case "!=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())!=Integer.parseInt(n.toString());break;
                    case ">=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>=Integer.parseInt(n.toString());break;
                    case "<=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<=Integer.parseInt(n.toString());break;
                    case ">>": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(n.toString());break;
                    case "<<": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<Integer.parseInt(n.toString());break;
                    default:break;
                }
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool=PrincipalCompi.s_arit+"("+o+","+i+","+n+",TB"+PrincipalCompi.tempb+")\n";
    Simbolo a=null;
    Simbolo b=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
        if(n.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            b=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null || b==null){
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
        if(b==null){
            PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido declarado");
        }
    }else{
        if(!a.getTipo().toString().equals("int")||!b.getTipo().toString().equals("int")){
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }
            if(!b.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no es de tipo int");
            }
        }else{
            if(a.getValor()==null||b.getValor()==null){
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }
                if(b.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido inicializado");
                }
            }else{
                switch(o.toString()){
                    case ">":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(b.getValor().toString());break;
                    case "<":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<Integer.parseInt(b.getValor().toString());break;
                    case "==":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())==Integer.parseInt(b.getValor().toString());break;
                    case "!=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())!=Integer.parseInt(b.getValor().toString());break;
                    case ">=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>=Integer.parseInt(b.getValor().toString());break;
                    case "<=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<=Integer.parseInt(b.getValor().toString());break;
                    case ">>": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(b.getValor().toString());break;
                    case "<<": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<Integer.parseInt(b.getValor().toString());break;
                    default:break;
                }
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // SENTENCIA_BOOLEANA ::= SENTENCIA_ARITMETICA Op_relacional Identificador 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool=PrincipalCompi.s_arit+"("+o+",TA"+PrincipalCompi.temp+","+i+",TB"+PrincipalCompi.tempb+")\n";
    PrincipalCompi.temp++;
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("int")){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
        }else{
            if(a.getValor()==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
            }else{
                if(PrincipalCompi.value!=null){
                    switch(o.toString()){
                        case ">":PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())>Integer.parseInt(a.getValor().toString());break;
                        case "<":PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())<Integer.parseInt(a.getValor().toString());break;
                        case "==":PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())==Integer.parseInt(a.getValor().toString());break;
                        case "!=": PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())!=Integer.parseInt(a.getValor().toString());break;
                        case ">=": PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())>=Integer.parseInt(a.getValor().toString());break;
                        case "<=": PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())<=Integer.parseInt(a.getValor().toString());break;
                        case ">>": PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())>Integer.parseInt(a.getValor().toString());break;
                        case "<<": PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())<Integer.parseInt(a.getValor().toString());break;
                        default:break;
                    }
                    PrincipalCompi.value=null;
                }
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional SENTENCIA_ARITMETICA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.s_bool=PrincipalCompi.s_arit+"("+o+","+i+",TA"+PrincipalCompi.temp+",TB"+PrincipalCompi.tempb+")\n";
    PrincipalCompi.temp++;
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("int")){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
        }else{
            if(a.getValor()==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
            }else{
                if(PrincipalCompi.value!=null){
                    switch(o.toString()){
                        case ">":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(PrincipalCompi.value.toString());break;
                        case "<":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<Integer.parseInt(PrincipalCompi.value.toString());break;
                        case "==":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())==Integer.parseInt(PrincipalCompi.value.toString());break;
                        case "!=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())!=Integer.parseInt(PrincipalCompi.value.toString());break;
                        case ">=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>=Integer.parseInt(PrincipalCompi.value.toString());break;
                        case "<=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<=Integer.parseInt(PrincipalCompi.value.toString());break;
                        case ">>": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(PrincipalCompi.value.toString());break;
                        case "<<": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(PrincipalCompi.value.toString());break;
                        default:break;
                    }
                    PrincipalCompi.value=null;
                }
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // SENTENCIA_BOOLEANA ::= Op_booleano Op_relacional Identificador 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool="("+o+","+b+","+i+",TB"+PrincipalCompi.tempb+")\n";
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("bool")){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo bool");
        }else{
            if(a.getValor()==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
            }else{
                switch(o.toString()){
                    case "==": PrincipalCompi.valueb=(Boolean.parseBoolean(a.getValor().toString()) && Boolean.parseBoolean(b.toString()));break;
                    case "!=": PrincipalCompi.valueb=(Boolean.parseBoolean(a.getValor().toString()) != Boolean.parseBoolean(b.toString()));break;
                    default:
                        PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el operador "+o+" no es válido");
                        break;
                }
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool="("+o+","+i+","+b+",TB"+PrincipalCompi.tempb+")\n";
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("bool")){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo bool");
        }else{
            if(a.getValor()==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
            }else{
                switch(o.toString()){
                    case "==": PrincipalCompi.valueb=(Boolean.parseBoolean(a.getValor().toString()) && Boolean.parseBoolean(b.toString()));break;
                    case "!=": PrincipalCompi.valueb=(Boolean.parseBoolean(a.getValor().toString()) != Boolean.parseBoolean(b.toString()));break;
                    default:
                        PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el operador "+o+" no es válido");
                        break;
                }
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // ELSE ::= Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.elses=PrincipalCompi.sentencia[PrincipalCompi.status];
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // IF ::= If Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA Llave_c ELSE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,"+i+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"(jmp choice"+(PrincipalCompi.choice+1)+":, , , )\n"+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.choice++;
    PrincipalCompi.ifs=PrincipalCompi.ifs+PrincipalCompi.elses+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool=PrincipalCompi.elses="";
    PrincipalCompi.choice++;
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("bool")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo bool");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // IF ::= If Parentesis_a Op_booleano Parentesis_c Llave_a SENTENCIA Llave_c ELSE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,"+o+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"(jmp choice"+(PrincipalCompi.choice+1)+":, , , )\n"+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.tempb++;
    PrincipalCompi.choice++;
    PrincipalCompi.ifs=PrincipalCompi.ifs+PrincipalCompi.elses+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool=PrincipalCompi.elses="";
    PrincipalCompi.choice++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c ELSE 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.s_bool;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,TB"+PrincipalCompi.tempb+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"(jmp choice"+PrincipalCompi.choice+":, , , )\n"+"choice"+(PrincipalCompi.choice+1)+":\n";
    PrincipalCompi.tempb++;
    PrincipalCompi.choice++;
    PrincipalCompi.ifs=PrincipalCompi.ifs+PrincipalCompi.elses+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool=PrincipalCompi.elses="";
    PrincipalCompi.choice++;
    PrincipalCompi.valueb=null;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // IF ::= If Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,"+i+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool="";
    PrincipalCompi.choice++;
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("bool")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo bool");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // IF ::= If Parentesis_a Op_booleano Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,"+o+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool="";
    PrincipalCompi.choice++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.s_bool;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,TB"+PrincipalCompi.tempb+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.tempb++;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool="";
    PrincipalCompi.choice++;
    PrincipalCompi.valueb=null;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // DECLARACION ::= WaitTime Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // DECLARACION ::= WaitTime Parentesis_a Numero P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // DECLARACION ::= WaitTime Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // DECLARACION ::= WaitTime Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    PrincipalCompi.gramatica="DECLARACION ::= WaitTime:a Parentesis_a Numero:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // DECLARACION ::= WaitTime Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // DECLARACION ::= WaitTime Parentesis_a Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // DECLARACION ::= WaitTime Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // DECLARACION ::= WaitTime Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        PrincipalCompi.gramatica="DECLARACION ::= WaitTime:a Parentesis_a Identificador:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // DECLARACION ::= WaitTime SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // DECLARACION ::= WaitTime Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un argumento");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // DECLARACION ::= WaitTime Parentesis_a SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // DECLARACION ::= WaitTime Parentesis_a SENTENCIA_ARITMETICA Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // DECLARACION ::= WaitTime Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    PrincipalCompi.value=null;
    PrincipalCompi.gramatica="DECLARACION ::= WaitTime:a Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // DECLARACION ::= StopLoop 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // DECLARACION ::= StopLoop P_coma 
            {
              Object RESULT =null;
		
    PrincipalCompi.declaracion="(jmp loop"+PrincipalCompi.loop+":, , , )\n";
    PrincipalCompi.gramatica="DECLARACION ::= StopLoop P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // DECLARACION ::= HitToTheRight Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // DECLARACION ::= HitToTheRight Parentesis_a P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // DECLARACION ::= HitToTheRight Parentesis_a Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // DECLARACION ::= HitToTheRight Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.declaracion="("+a+", , , )\n";
    PrincipalCompi.gramatica="DECLARACION ::= HitToTheRight:a Parentesis_a Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // DECLARACION ::= HitToTheLeft Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // DECLARACION ::= HitToTheLeft Parentesis_a P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // DECLARACION ::= HitToTheLeft Parentesis_a Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // DECLARACION ::= HitToTheLeft Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.declaracion="("+a+", , , )\n";
    PrincipalCompi.gramatica="DECLARACION ::= HitToTheLeft:a Parentesis_a Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // DECLARACION ::= SpinBallRight Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // DECLARACION ::= SpinBallRight Parentesis_a Numero P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // DECLARACION ::= SpinBallRight Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // DECLARACION ::= SpinBallRight Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    PrincipalCompi.gramatica="DECLARACION ::= SpinBallRight:a Parentesis_a Numero:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // DECLARACION ::= SpinBallRight Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // DECLARACION ::= SpinBallRight Parentesis_a Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // DECLARACION ::= SpinBallRight Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // DECLARACION ::= SpinBallRight Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        PrincipalCompi.gramatica="DECLARACION ::= SpinBallRight:a Parentesis_a Identificador:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // DECLARACION ::= SpinBallRight SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // DECLARACION ::= SpinBallRight Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un argumento");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // DECLARACION ::= SpinBallRight Parentesis_a SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // DECLARACION ::= SpinBallRight Parentesis_a SENTENCIA_ARITMETICA Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // DECLARACION ::= SpinBallRight Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    PrincipalCompi.value=null;
    PrincipalCompi.gramatica="DECLARACION ::= SpinBallRight:a Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // DECLARACION ::= SpinBallLeft Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // DECLARACION ::= SpinBallLeft Parentesis_a Numero P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DECLARACION ::= SpinBallLeft Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // DECLARACION ::= SpinBallLeft Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    PrincipalCompi.gramatica="DECLARACION ::= SpinBallLeft:a Parentesis_a Numero:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DECLARACION ::= SpinBallLeft Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DECLARACION ::= SpinBallLeft Parentesis_a Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DECLARACION ::= SpinBallLeft Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // DECLARACION ::= SpinBallLeft Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        PrincipalCompi.gramatica="DECLARACION ::= SpinBallLeft:a Parentesis_a Identificador:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DECLARACION ::= SpinBallLeft SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // DECLARACION ::= SpinBallLeft Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un argumento");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DECLARACION ::= SpinBallLeft Parentesis_a SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DECLARACION ::= SpinBallLeft Parentesis_a SENTENCIA_ARITMETICA Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DECLARACION ::= SpinBallLeft Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    PrincipalCompi.value=null;
    PrincipalCompi.gramatica="DECLARACION ::= SpinBallLeft:a Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DECLARACION ::= MoveBackCrane Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DECLARACION ::= MoveBackCrane Parentesis_a Numero P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DECLARACION ::= MoveBackCrane Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DECLARACION ::= MoveBackCrane Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    PrincipalCompi.gramatica="DECLARACION ::= MoveBackCrane:a Parentesis_a Numero:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DECLARACION ::= MoveBackCrane Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DECLARACION ::= MoveBackCrane Parentesis_a Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DECLARACION ::= MoveBackCrane Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DECLARACION ::= MoveBackCrane Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        PrincipalCompi.gramatica="DECLARACION ::= MoveBackCrane:a Parentesis_a Identificador:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DECLARACION ::= MoveBackCrane SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DECLARACION ::= MoveBackCrane Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un argumento");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DECLARACION ::= MoveBackCrane Parentesis_a SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DECLARACION ::= MoveBackCrane Parentesis_a SENTENCIA_ARITMETICA Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DECLARACION ::= MoveBackCrane Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    PrincipalCompi.value=null;
    PrincipalCompi.gramatica="DECLARACION ::= MoveBackCrane:a Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DECLARACION ::= MoveFowardCrane Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DECLARACION ::= MoveFowardCrane Parentesis_a Numero P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DECLARACION ::= MoveFowardCrane Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DECLARACION ::= MoveFowardCrane Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    PrincipalCompi.gramatica="DECLARACION ::= MoveFowardCrane:a Parentesis_a Numero:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DECLARACION ::= MoveFowardCrane Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DECLARACION ::= MoveFowardCrane Parentesis_a Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DECLARACION ::= MoveFowardCrane Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DECLARACION ::= MoveFowardCrane Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        PrincipalCompi.gramatica="DECLARACION ::= MoveFowardCrane:a Parentesis_a Identificador:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DECLARACION ::= MoveFowardCrane SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DECLARACION ::= MoveFowardCrane Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un argumento");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECLARACION ::= MoveFowardCrane Parentesis_a SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DECLARACION ::= MoveFowardCrane Parentesis_a SENTENCIA_ARITMETICA Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DECLARACION ::= MoveFowardCrane Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    PrincipalCompi.value=null;
    PrincipalCompi.gramatica="DECLARACION ::= MoveFowardCrane:a Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DECLARACION ::= SpinCraneRight Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DECLARACION ::= SpinCraneRight Parentesis_a Numero P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECLARACION ::= SpinCraneRight Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLARACION ::= SpinCraneRight Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    PrincipalCompi.gramatica="DECLARACION ::= SpinCraneRight:a Parentesis_a Numero:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARACION ::= SpinCraneRight Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECLARACION ::= SpinCraneRight Parentesis_a Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECLARACION ::= SpinCraneRight Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECLARACION ::= SpinCraneRight Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        PrincipalCompi.gramatica="DECLARACION ::= SpinCraneRight:a Parentesis_a Identificador:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECLARACION ::= SpinCraneRight SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DECLARACION ::= SpinCraneRight Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un argumento");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DECLARACION ::= SpinCraneRight Parentesis_a SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DECLARACION ::= SpinCraneRight Parentesis_a SENTENCIA_ARITMETICA Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DECLARACION ::= SpinCraneRight Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    PrincipalCompi.value=null;
    PrincipalCompi.gramatica="DECLARACION ::= SpinCraneRight:a Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLARACION ::= Identificador Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECLARACION ::= Identificador Parentesis_a Numero P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARACION ::= Identificador Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECLARACION ::= Identificador Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECLARACION ::= SpinCraneLeft Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECLARACION ::= SpinCraneLeft Parentesis_a Numero P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLARACION ::= SpinCraneLeft Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLARACION ::= SpinCraneLeft Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    PrincipalCompi.gramatica="DECLARACION ::= SpinCraneLeft:a Parentesis_a Numero:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLARACION ::= Identificador Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARACION ::= Identificador Parentesis_a Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION ::= Identificador Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION ::= Identificador Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARACION ::= SpinCraneLeft Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION ::= SpinCraneLeft Parentesis_a Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION ::= SpinCraneLeft Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION ::= SpinCraneLeft Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        PrincipalCompi.gramatica="DECLARACION ::= SpinCraneLeft:a Parentesis_a Identificador:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION ::= Identificador SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION ::= Identificador Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION ::= Identificador Parentesis_a SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= Identificador Parentesis_a SENTENCIA_ARITMETICA Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= Identificador Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= SpinCraneLeft SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= SpinCraneLeft Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un argumento");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= SpinCraneLeft Parentesis_a SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= SpinCraneLeft Parentesis_a SENTENCIA_ARITMETICA Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= SpinCraneLeft Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    PrincipalCompi.value=null;
    PrincipalCompi.gramatica="DECLARACION ::= SpinCraneLeft:a Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= Identificador Op_booleano P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un signo de igual");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= Identificador Igual Op_booleano 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= Identificador Igual Op_booleano P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+g+","+o+", ,"+i+")\n";
    int num=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("bool")){
                    temp.setValor(o);
                    num++;
                    PrincipalCompi.gramatica="DECLARACION ::= Identificador:i Igual:g Op_booleano:o P_coma\n\n"+PrincipalCompi.gramatica;
                    break;
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo bool");
                    num++;
                    break;
                }
            }
        }
        if(num==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= Bool Igual Op_booleano P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(tright+1)+"; falta la declaración de un identificador");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= Bool Identificador Op_booleano P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un signo de igual");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= Bool Identificador Igual Op_booleano 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= Bool Identificador Igual Op_booleano P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n("+g+","+o+", ,"+i+")\n";
    int num=0;
    Simbolo s=new Simbolo(i,t,o);
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.tabla_simbolos.add(s);
        PrincipalCompi.gramatica="DECLARACION ::= Bool:t Identificador:i Igual:g Op_booleano:o P_coma\n\n"+PrincipalCompi.gramatica;
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
                num++;
                break;
            }
        }
        if(num==0){
            PrincipalCompi.tabla_simbolos.add(s);
            PrincipalCompi.gramatica="DECLARACION ::= Bool:t Identificador:i Igual:g Op_booleano:o P_coma\n\n"+PrincipalCompi.gramatica;
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= Identificador Numero P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un signo de igual");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= Identificador Igual Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+g+","+n+", ,"+i+")\n";
    int num=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    temp.setValor(n);
                    num++;
                    PrincipalCompi.gramatica="DECLARACION ::= Identificador:i Igual:g Numero:n P_coma\n\n"+PrincipalCompi.gramatica;
                    break;
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo entero");
                    num++;
                    break;
                }
            }
        }
        if(num==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= Int Igual Numero P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(tright+1)+"; falta la declaración de un identificador");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Int Identificador Numero P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un signo de igual");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Int Identificador Igual Numero 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n("+g+","+n+", ,"+i+")\n";
    int num=0;
    Simbolo s=new Simbolo(i,t,n);
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.tabla_simbolos.add(s);
        PrincipalCompi.gramatica="DECLARACION ::= Int:t Identificador:i Igual:g Numero:n P_coma\n\n"+PrincipalCompi.gramatica;
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
                num++;
                break;
            }
        }
        if(num==0){
            PrincipalCompi.tabla_simbolos.add(s);
            PrincipalCompi.gramatica="DECLARACION ::= Int:t Identificador:i Igual:g Numero:n P_coma\n\n"+PrincipalCompi.gramatica;
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Op_incremento P_coma 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(oright+1)+"; falta un identificador declarado");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Identificador Op_incremento 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Identificador Op_incremento P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+o+", , ,"+i+")\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        int num=Integer.parseInt(temp.getValor().toString());
                        num++;
                        temp.setValor(num);
                        n++;
                        PrincipalCompi.gramatica="DECLARACION ::= Identificador:i Op_incremento:o P_coma\n\n"+PrincipalCompi.gramatica;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Identificador Igual SENTENCIA_BOOLEANA P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_bool+"("+g+",TB"+PrincipalCompi.temp+", ,"+i+")\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_bool="";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(a.getTipo().toString().equals("bool")){
                a.setValor(PrincipalCompi.valueb);
                PrincipalCompi.gramatica="DECLARACION ::= Identificador:i Igual:g SENTENCIA_BOOLEANA P_coma\n\n"+PrincipalCompi.gramatica;
                PrincipalCompi.valueb=null;
            }else{
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo bool");
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Bool Igual SENTENCIA_BOOLEANA P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(tright+1)+"; falta la declaración de un identificador");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Bool Identificador Igual SENTENCIA_BOOLEANA P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n"+PrincipalCompi.s_bool+"("+g+",TB"+PrincipalCompi.temp+", ,"+i+")\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_bool="";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            a=new Simbolo(i,t,PrincipalCompi.valueb);
            PrincipalCompi.tabla_simbolos.add(a);
            PrincipalCompi.gramatica="DECLARACION ::= Bool:t Identificador:i Igual:g SENTENCIA_BOOLEANA P_coma\n\n"+PrincipalCompi.gramatica;
            PrincipalCompi.valueb=null;
        }else{
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Identificador SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un signo de igual");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Identificador Igual SENTENCIA_ARITMETICA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Identificador Igual SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+g+",TA"+PrincipalCompi.temp+", ,"+i+")\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(a.getTipo().toString().equals("int")){
                a.setValor(PrincipalCompi.value);
                PrincipalCompi.gramatica="DECLARACION ::= Identificador:i Igual:g SENTENCIA_ARITMETICA P_coma\n\n"+PrincipalCompi.gramatica;
                PrincipalCompi.value=null;
            }else{
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Int Igual SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(tright+1)+"; falta la declaración de un identificador");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Int Identificador Igual SENTENCIA_ARITMETICA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Int Identificador Igual SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n"+PrincipalCompi.s_arit+"("+g+",TA"+PrincipalCompi.temp+", ,"+i+")\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            a=new Simbolo(i,t,PrincipalCompi.value);
            PrincipalCompi.tabla_simbolos.add(a);
            PrincipalCompi.value=null;
            PrincipalCompi.gramatica="DECLARACION ::= Int:t Identificador:i Igual:g SENTENCIA_ARITMETICA P_coma\n\n"+PrincipalCompi.gramatica;
        }else{
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Identificador Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un signo de igual");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Identificador Igual Identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+g+","+b+", ,"+a+")";
    int n=0;
    Simbolo s1=null;
    Simbolo s2=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(aright+1)+"; el identificador "+a+" y "+b+" no han sido declarados");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            Simbolo temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(a)){
                s1=temp;
                for(int at=0;at<PrincipalCompi.tabla_simbolos.size();at++){
                    Simbolo temp2=PrincipalCompi.tabla_simbolos.get(at);
                    if(temp2.getNombre().equals(b)){
                        s2=temp2;
                        if(temp.getTipo().equals(temp2.getTipo())){
                            if(temp2.getValor()==null){
                                n++;
                                PrincipalCompi.err.add("Error semántico linea:"+(bright+1)+"; el identificador "+b+" no ha sido inicializado");
                                break;
                            }else{
                                n++;
                                Object v=temp2.getValor();
                                temp.setValor(v);
                                PrincipalCompi.gramatica="DECLARACION ::= Identificador:a Igual:g Identificador:b P_coma\n\n"+PrincipalCompi.gramatica;
                                break;
                            }
                        }else{
                            n++;
                            PrincipalCompi.err.add("Error semántico linea:"+(aright+1)+"; los tipos de dato de "+a+" y "+b+" son incompatibles");
                            break;
                        }
                    }
                }
            }
        }
        if(n==0){
            if(s1==null){
                PrincipalCompi.err.add("Error semántico linea:"+(aright+1)+"; el identificador "+a+" no ha sido declarado");
            }
            if(s2==null){
                PrincipalCompi.err.add("Error semántico linea:"+(bright+1)+"; el identificador "+b+" no ha sido declarado");
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Bool Igual Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(tright+1)+"; falta la declaración de un identificador");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Bool Identificador Igual Identificador 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Bool Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n("+g+","+l+", ,"+i+")\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el identificador "+l+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                n++;
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
                break;
            }else if(temp.getNombre().equals(l)){
                if(temp.getTipo().equals(t)){
                    if(temp.getValor()==null){
                        n++;
                        PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el identificador "+l+" no ha sido inicializado");
                        break;
                    }else{
                        n++;
                        Object v=temp.getValor();
                        Simbolo s=new Simbolo(i,t,v);
                        PrincipalCompi.tabla_simbolos.add(s);
                        PrincipalCompi.gramatica="DECLARACION ::= Bool:t Identificador:i Igual:g Identificador:l P_coma\n\n"+PrincipalCompi.gramatica;
                        break;
                    }
                }else{
                    n++;
                    PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el valor de "+l+" no es de tipo bool");
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el identificador "+l+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Int Igual Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(tright+1)+"; falta la declaración de un identificador");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Int Identificador Igual P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un valor entero o identificador tipo int para asignar");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Int Identificador Igual Identificador 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Int Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n("+g+","+l+", ,"+i+")\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el identificador "+l+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                n++;
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
                break;
            }else if(temp.getNombre().equals(l)){
                if(temp.getTipo().equals(t)){
                    if(temp.getValor()==null){
                        n++;
                        PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el identificador "+l+" no ha sido inicializado");
                        break;
                    }else{
                        n++;
                        Object v=temp.getValor();
                        Simbolo s=new Simbolo(i,t,v);
                        PrincipalCompi.tabla_simbolos.add(s);
                        PrincipalCompi.gramatica="DECLARACION ::= Int:t Identificador:i Igual:g Identificador:l P_coma\n\n"+PrincipalCompi.gramatica;
                        break;
                    }
                }else{
                    n++;
                    PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el valor de "+l+" no es de tipo int");
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el identificador "+l+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Bool P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(tright+1)+"; falta la declaración de un identificador");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Bool Identificador 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Bool Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n";
    int n=0;
    Simbolo temp=null;
    Simbolo s=new Simbolo(i,t,null);
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.tabla_simbolos.add(s);
        PrincipalCompi.gramatica="DECLARACION ::= Bool:t Identificador:i P_coma\n\n"+PrincipalCompi.gramatica;
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
                PrincipalCompi.gramatica="DECLARACION ::= Bool:t >>Identificador:i<< P_coma\n\n"+PrincipalCompi.gramatica;
                n++;
                break;
            }
        }
        if(n==0){
            PrincipalCompi.tabla_simbolos.add(s);
            PrincipalCompi.gramatica="DECLARACION ::= Bool:t Identificador:i P_coma\n\n"+PrincipalCompi.gramatica;
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Identificador P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta la asignación de un tipo de dato");
    PrincipalCompi.gramatica="DECLARACION ::= >>Int:t<< Identificador:i P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Int P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(tright+1)+"; falta la declaración de un identificador");
    PrincipalCompi.gramatica="DECLARACION ::= Int:t >>Identificador:i<< P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Int Identificador 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    PrincipalCompi.gramatica="DECLARACION ::= Int:t Identificador:i >>P_coma<<\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n";
    int n=0;
    Simbolo temp=null;
    Simbolo s=new Simbolo(i,t,null);
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.tabla_simbolos.add(s);
        PrincipalCompi.gramatica="DECLARACION ::= Int:t Identificador:i P_coma\n\n"+PrincipalCompi.gramatica;
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
                PrincipalCompi.gramatica="DECLARACION ::= Int:t >>Identificador:i<< P_coma\n\n"+PrincipalCompi.gramatica;
                n++;
                break;
            }
        }
        if(n==0){
            PrincipalCompi.tabla_simbolos.add(s);
            PrincipalCompi.gramatica="DECLARACION ::= Int:t Identificador:i P_coma\n\n"+PrincipalCompi.gramatica;
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;
		
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.fors;
    PrincipalCompi.fors="";
    PrincipalCompi.status++;
    PrincipalCompi.gramatica="SENTENCIA ::= FOR\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.fors;
    PrincipalCompi.fors="";
    PrincipalCompi.status++;
    PrincipalCompi.gramatica="SENTENCIA ::= SENTENCIA FOR\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;
		
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.dowhiles;
    PrincipalCompi.dowhiles="";
    PrincipalCompi.status++;
    PrincipalCompi.gramatica="SENTENCIA ::= DO_WHILE\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.dowhiles;
    PrincipalCompi.dowhiles="";
    PrincipalCompi.status++;
    PrincipalCompi.gramatica="SENTENCIA ::= SENTENCIA DO_WHILE\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;
		
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.whiles;
    PrincipalCompi.whiles="";
    PrincipalCompi.status++;
    PrincipalCompi.gramatica="SENTENCIA ::= WHILE\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.whiles;
    PrincipalCompi.whiles="";
    PrincipalCompi.status++;
    PrincipalCompi.gramatica="SENTENCIA ::= SENTENCIA WHILE\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= IF 
            {
              Object RESULT =null;
		
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.ifs;
    PrincipalCompi.ifs="";
    PrincipalCompi.status++;
    PrincipalCompi.gramatica="SENTENCIA ::= IF\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.ifs;
    PrincipalCompi.ifs="";
    PrincipalCompi.status++;
    PrincipalCompi.gramatica="SENTENCIA ::= SENTENCIA IF\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;
		
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.declaracion;
    PrincipalCompi.declaracion="";
    PrincipalCompi.status++;
    PrincipalCompi.gramatica="SENTENCIA ::= DECLARACION\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.declaracion;
    PrincipalCompi.declaracion="";
    PrincipalCompi.status++;
    PrincipalCompi.gramatica="SENTENCIA ::= SENTENCIA DECLARACION\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INICIO ::= Identificador Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; comienzo de programa incorrecto");
    PrincipalCompi.gramatica="INICIO ::= >>Start<< Parentesis_a Parentesis_c Llave_a Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INICIO ::= Identificador Parentesis_a Llave_a Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; comienzo de programa incorrecto");
    PrincipalCompi.gramatica="INICIO ::= >>Start<< Parentesis_a Parentesis_c Llave_a Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INICIO ::= Identificador Parentesis_a Parentesis_c Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; comienzo de programa incorrecto");
    PrincipalCompi.gramatica="INICIO ::= >>Start<< Parentesis_a Parentesis_c Llave_a Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INICIO ::= Identificador Parentesis_a Parentesis_c Llave_a 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; comienzo de programa incorrecto");
    PrincipalCompi.gramatica="INICIO ::= >>Start<< Parentesis_a Parentesis_c Llave_a Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INICIO ::= Identificador Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; comienzo de programa incorrecto");
    PrincipalCompi.gramatica="INICIO ::= >>Start<< Parentesis_a Parentesis_c Llave_a Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INICIO ::= Start Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un paréntesis de apertura");
    PrincipalCompi.gramatica="INICIO ::= Start >>Parentesis_a<< Parentesis_c Llave_a Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INICIO ::= Start Parentesis_a Llave_a Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un paréntesis de cierre");
    PrincipalCompi.gramatica="INICIO ::= Start Parentesis_a >>Parentesis_c<< Llave_a Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INICIO ::= Start Parentesis_a Parentesis_c Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta una llave de apertura");
    PrincipalCompi.gramatica="INICIO ::= Start Parentesis_a Parentesis_c >>Llave_a<< Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= Start Parentesis_a Parentesis_c Llave_a 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta una llave de cierre");
    PrincipalCompi.gramatica="INICIO ::= Start Parentesis_a Parentesis_c Llave_a >>Llave_c<<\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= Start Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		
    PrincipalCompi.gramatica="INICIO ::= Start Parentesis_a Parentesis_c Llave_a Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= Identificador Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; comienzo de programa incorrecto");
    PrincipalCompi.gramatica="INICIO ::= >>Start<< Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= Identificador Parentesis_a Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; comienzo de programa incorrecto");
    PrincipalCompi.gramatica="INICIO ::= >>Start<< Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= Identificador Parentesis_a Parentesis_c SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; comienzo de programa incorrecto");
    PrincipalCompi.gramatica="INICIO ::= >>Start<< Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; comienzo de programa incorrecto");
    PrincipalCompi.gramatica="INICIO ::= >>Start<< Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; comienzo de programa incorrecto");
    PrincipalCompi.gramatica="INICIO ::= >>Start<< Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Start Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un paréntesis de apertura");
    PrincipalCompi.gramatica="INICIO ::= Start >>Parentesis_a<< Parentesis_c Llave_a SENTENCIA Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Start Parentesis_a Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un paréntesis de cierre");
    PrincipalCompi.gramatica="INICIO ::= Start Parentesis_a >>Parentesis_c<< Llave_a SENTENCIA Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Start Parentesis_a Parentesis_c SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta una llave de apertura");
    PrincipalCompi.gramatica="INICIO ::= Start Parentesis_a Parentesis_c >>Llave_a<< SENTENCIA Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Start Parentesis_a Parentesis_c Llave_a SENTENCIA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta una llave de cierre");
    PrincipalCompi.gramatica="INICIO ::= Start Parentesis_a Parentesis_c Llave_a SENTENCIA >>Llave_c<<\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Start Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.ci=PrincipalCompi.sentencia[PrincipalCompi.status];
    PrincipalCompi.gramatica="INICIO ::= Start Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

