
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 09 09:29:46 MST 2019
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 09 09:29:46 MST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\341\000\002\002\004\000\002\002\010\000\002\002" +
    "\007\000\002\002\007\000\002\002\007\000\002\002\007" +
    "\000\002\002\010\000\002\002\007\000\002\002\007\000" +
    "\002\002\007\000\002\002\007\000\002\002\007\000\002" +
    "\002\006\000\002\002\006\000\002\002\006\000\002\002" +
    "\006\000\002\002\007\000\002\002\006\000\002\002\006" +
    "\000\002\002\006\000\002\002\006\000\002\002\002\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\005\000" +
    "\002\004\004\000\002\004\004\000\002\004\007\000\002" +
    "\004\006\000\002\004\006\000\002\004\006\000\002\004" +
    "\007\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\005\000\002\004\005\000\002\004\007\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\004\005\000\002\004\005\000\002\004\007\000\002\004" +
    "\006\000\002\004\006\000\002\004\005\000\002\004\004" +
    "\000\002\004\004\000\002\004\007\000\002\004\006\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\004\005\000\002\004\005\000\002\004\007\000\002\004" +
    "\006\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\005\000\002\004\005\000\002\004\007\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\004\006\000\002\004\007\000\002\004\006\000\002\004" +
    "\006\000\002\004\006\000\002\004\006\000\002\004\007" +
    "\000\002\004\006\000\002\004\006\000\002\004\006\000" +
    "\002\004\007\000\002\004\006\000\002\004\006\000\002" +
    "\004\006\000\002\004\007\000\002\004\006\000\002\004" +
    "\006\000\002\004\006\000\002\004\007\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\007\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\004\006\000\002\004\007\000\002\004\006\000\002\004" +
    "\006\000\002\004\006\000\002\004\007\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\007\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\004\006\000\002\004\007\000\002\004\006\000\002\004" +
    "\006\000\002\004\006\000\002\004\007\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\007\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\004\006\000\002\004\007\000\002\004\006\000\002\004" +
    "\006\000\002\004\006\000\002\004\007\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\007\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\004\006\000\002\004\007\000\002\004\006\000\002\004" +
    "\006\000\002\004\006\000\002\004\007\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\007\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\004\006\000\002\004\007\000\002\004\006\000\002\004" +
    "\006\000\002\004\006\000\002\004\007\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\006\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\006\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\004\000\002\004\003\000\002\004\007" +
    "\000\002\004\006\000\002\004\006\000\002\004\006\000" +
    "\002\004\006\000\002\004\007\000\002\004\006\000\002" +
    "\004\006\000\002\004\006\000\002\004\007\000\002\004" +
    "\006\000\002\004\006\000\002\004\006\000\002\006\011" +
    "\000\002\006\010\000\002\006\011\000\002\006\011\000" +
    "\002\006\012\000\002\006\012\000\002\006\012\000\002" +
    "\007\006\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\002\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\010\011\000\002" +
    "\010\011\000\002\010\011\000\002\011\013\000\002\011" +
    "\013\000\002\011\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a5\000\010\002\uffec\044\004\046\005\001\002\000" +
    "\006\036\u0196\037\u0197\001\002\000\006\036\010\037\011" +
    "\001\002\000\004\002\007\001\002\000\004\002\001\001" +
    "\002\000\006\037\u018b\040\u018a\001\002\000\004\040\012" +
    "\001\002\000\046\005\024\006\033\007\031\011\036\012" +
    "\041\013\040\014\035\015\021\016\014\017\037\020\032" +
    "\021\034\022\026\023\013\034\030\041\025\046\022\050" +
    "\015\001\002\000\006\036\u0184\037\u0185\001\002\000\010" +
    "\036\u016d\046\u016e\047\u016c\001\002\000\010\036\u0155\046" +
    "\u0156\047\u0154\001\002\000\050\002\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\034\uffe6" +
    "\041\uffe6\046\uffe6\050\uffe6\001\002\000\050\002\uffea\005" +
    "\uffea\006\uffea\007\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023" +
    "\uffea\034\uffea\041\uffea\046\uffea\050\uffea\001\002\000\046" +
    "\005\024\006\033\007\031\011\036\012\041\013\040\014" +
    "\035\015\021\016\014\017\037\020\032\021\034\022\026" +
    "\023\013\034\030\041\u0153\046\022\050\015\001\002\000" +
    "\010\036\u013c\046\u013d\047\u013b\001\002\000\020\024\u0117" +
    "\034\u0114\035\u0113\036\u0111\045\u0112\046\u0115\047\u0110\001" +
    "\002\000\050\002\uffe8\005\uffe8\006\uffe8\007\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\034\uffe8\041\uffe8\046\uffe8" +
    "\050\uffe8\001\002\000\010\024\376\045\374\046\375\001" +
    "\002\000\004\002\uffed\001\002\000\006\036\366\037\367" +
    "\001\002\000\050\002\uffe4\005\uffe4\006\uffe4\007\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\034\uffe4\041\uffe4\046" +
    "\uffe4\050\uffe4\001\002\000\004\045\365\001\002\000\004" +
    "\036\335\001\002\000\010\036\306\046\307\047\305\001" +
    "\002\000\010\024\264\045\262\046\263\001\002\000\010" +
    "\036\233\046\234\047\232\001\002\000\010\036\203\046" +
    "\204\047\202\001\002\000\004\040\164\001\002\000\010" +
    "\036\135\046\136\047\134\001\002\000\052\002\uff54\005" +
    "\uff54\006\uff54\007\uff54\011\uff54\012\uff54\013\uff54\014\uff54" +
    "\015\uff54\016\uff54\017\uff54\020\uff54\021\uff54\022\uff54\023" +
    "\uff54\034\uff54\041\uff54\045\133\046\uff54\050\uff54\001\002" +
    "\000\004\036\042\001\002\000\012\035\045\037\uff37\046" +
    "\046\047\043\001\002\000\014\025\103\026\102\027\104" +
    "\030\101\032\131\001\002\000\004\037\125\001\002\000" +
    "\006\032\117\037\120\001\002\000\016\025\055\026\054" +
    "\027\056\030\052\032\053\037\057\001\002\000\004\032" +
    "\050\001\002\000\004\046\051\001\002\000\006\037\uff3b" +
    "\045\uff3b\001\002\000\006\046\116\047\115\001\002\000" +
    "\010\035\076\046\077\047\075\001\002\000\006\046\074" +
    "\047\073\001\002\000\006\046\072\047\071\001\002\000" +
    "\006\046\070\047\067\001\002\000\004\040\060\001\002" +
    "\000\044\005\024\006\033\007\031\011\036\012\041\013" +
    "\040\014\035\015\021\016\014\017\037\020\032\021\034" +
    "\022\026\023\013\034\030\046\022\050\015\001\002\000" +
    "\046\005\024\006\033\007\031\011\036\012\041\013\040" +
    "\014\035\015\021\016\014\017\037\020\032\021\034\022" +
    "\026\023\013\034\030\041\065\046\022\050\015\001\002" +
    "\000\050\002\uffe7\005\uffe7\006\uffe7\007\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\034\uffe7\041\uffe7\046\uffe7\050" +
    "\uffe7\001\002\000\050\002\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\034\uffeb\041\uffeb" +
    "\046\uffeb\050\uffeb\001\002\000\050\002\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\034" +
    "\uffe9\041\uffe9\046\uffe9\050\uffe9\001\002\000\050\002\uff24" +
    "\005\uff24\006\uff24\007\uff24\011\uff24\012\uff24\013\uff24\014" +
    "\uff24\015\uff24\016\uff24\017\uff24\020\uff24\021\uff24\022\uff24" +
    "\023\uff24\034\uff24\041\uff24\046\uff24\050\uff24\001\002\000" +
    "\050\002\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\034\uffe5\041\uffe5\046\uffe5\050\uffe5" +
    "\001\002\000\056\002\uff2d\005\uff2d\006\uff2d\007\uff2d\011" +
    "\uff2d\012\uff2d\013\uff2d\014\uff2d\015\uff2d\016\uff2d\017\uff2d" +
    "\020\uff2d\021\uff2d\022\uff2d\023\uff2d\032\uff2d\034\uff2d\037" +
    "\uff2d\041\uff2d\045\uff2d\046\uff2d\050\uff2d\001\002\000\056" +
    "\002\uff2b\005\uff2b\006\uff2b\007\uff2b\011\uff2b\012\uff2b\013" +
    "\uff2b\014\uff2b\015\uff2b\016\uff2b\017\uff2b\020\uff2b\021\uff2b" +
    "\022\uff2b\023\uff2b\032\uff2b\034\uff2b\037\uff2b\041\uff2b\045" +
    "\uff2b\046\uff2b\050\uff2b\001\002\000\056\002\uff35\005\uff35" +
    "\006\uff35\007\uff35\011\uff35\012\uff35\013\uff35\014\uff35\015" +
    "\uff35\016\uff35\017\uff35\020\uff35\021\uff35\022\uff35\023\uff35" +
    "\032\uff35\034\uff35\037\uff35\041\uff35\045\uff35\046\uff35\050" +
    "\uff35\001\002\000\056\002\uff33\005\uff33\006\uff33\007\uff33" +
    "\011\uff33\012\uff33\013\uff33\014\uff33\015\uff33\016\uff33\017" +
    "\uff33\020\uff33\021\uff33\022\uff33\023\uff33\032\uff33\034\uff33" +
    "\037\uff33\041\uff33\045\uff33\046\uff33\050\uff33\001\002\000" +
    "\056\002\uff31\005\uff31\006\uff31\007\uff31\011\uff31\012\uff31" +
    "\013\uff31\014\uff31\015\uff31\016\uff31\017\uff31\020\uff31\021" +
    "\uff31\022\uff31\023\uff31\032\uff31\034\uff31\037\uff31\041\uff31" +
    "\045\uff31\046\uff31\050\uff31\001\002\000\056\002\uff2f\005" +
    "\uff2f\006\uff2f\007\uff2f\011\uff2f\012\uff2f\013\uff2f\014\uff2f" +
    "\015\uff2f\016\uff2f\017\uff2f\020\uff2f\021\uff2f\022\uff2f\023" +
    "\uff2f\032\uff2f\034\uff2f\037\uff2f\041\uff2f\045\uff2f\046\uff2f" +
    "\050\uff2f\001\002\000\016\025\103\026\102\027\104\030" +
    "\101\037\uff39\045\uff39\001\002\000\006\037\uff3e\045\uff3e" +
    "\001\002\000\016\025\055\026\054\027\056\030\052\037" +
    "\uff3a\045\uff3a\001\002\000\006\037\uff3c\045\uff3c\001\002" +
    "\000\006\046\114\047\113\001\002\000\006\046\112\047" +
    "\111\001\002\000\006\046\110\047\107\001\002\000\006" +
    "\046\106\047\105\001\002\000\056\002\uff2e\005\uff2e\006" +
    "\uff2e\007\uff2e\011\uff2e\012\uff2e\013\uff2e\014\uff2e\015\uff2e" +
    "\016\uff2e\017\uff2e\020\uff2e\021\uff2e\022\uff2e\023\uff2e\032" +
    "\uff2e\034\uff2e\037\uff2e\041\uff2e\045\uff2e\046\uff2e\050\uff2e" +
    "\001\002\000\056\002\uff2c\005\uff2c\006\uff2c\007\uff2c\011" +
    "\uff2c\012\uff2c\013\uff2c\014\uff2c\015\uff2c\016\uff2c\017\uff2c" +
    "\020\uff2c\021\uff2c\022\uff2c\023\uff2c\032\uff2c\034\uff2c\037" +
    "\uff2c\041\uff2c\045\uff2c\046\uff2c\050\uff2c\001\002\000\056" +
    "\002\uff36\005\uff36\006\uff36\007\uff36\011\uff36\012\uff36\013" +
    "\uff36\014\uff36\015\uff36\016\uff36\017\uff36\020\uff36\021\uff36" +
    "\022\uff36\023\uff36\032\uff36\034\uff36\037\uff36\041\uff36\045" +
    "\uff36\046\uff36\050\uff36\001\002\000\056\002\uff34\005\uff34" +
    "\006\uff34\007\uff34\011\uff34\012\uff34\013\uff34\014\uff34\015" +
    "\uff34\016\uff34\017\uff34\020\uff34\021\uff34\022\uff34\023\uff34" +
    "\032\uff34\034\uff34\037\uff34\041\uff34\045\uff34\046\uff34\050" +
    "\uff34\001\002\000\056\002\uff32\005\uff32\006\uff32\007\uff32" +
    "\011\uff32\012\uff32\013\uff32\014\uff32\015\uff32\016\uff32\017" +
    "\uff32\020\uff32\021\uff32\022\uff32\023\uff32\032\uff32\034\uff32" +
    "\037\uff32\041\uff32\045\uff32\046\uff32\050\uff32\001\002\000" +
    "\056\002\uff30\005\uff30\006\uff30\007\uff30\011\uff30\012\uff30" +
    "\013\uff30\014\uff30\015\uff30\016\uff30\017\uff30\020\uff30\021" +
    "\uff30\022\uff30\023\uff30\032\uff30\034\uff30\037\uff30\041\uff30" +
    "\045\uff30\046\uff30\050\uff30\001\002\000\056\002\uff2a\005" +
    "\uff2a\006\uff2a\007\uff2a\011\uff2a\012\uff2a\013\uff2a\014\uff2a" +
    "\015\uff2a\016\uff2a\017\uff2a\020\uff2a\021\uff2a\022\uff2a\023" +
    "\uff2a\032\uff2a\034\uff2a\037\uff2a\041\uff2a\045\uff2a\046\uff2a" +
    "\050\uff2a\001\002\000\056\002\uff28\005\uff28\006\uff28\007" +
    "\uff28\011\uff28\012\uff28\013\uff28\014\uff28\015\uff28\016\uff28" +
    "\017\uff28\020\uff28\021\uff28\022\uff28\023\uff28\032\uff28\034" +
    "\uff28\037\uff28\041\uff28\045\uff28\046\uff28\050\uff28\001\002" +
    "\000\056\002\uff29\005\uff29\006\uff29\007\uff29\011\uff29\012" +
    "\uff29\013\uff29\014\uff29\015\uff29\016\uff29\017\uff29\020\uff29" +
    "\021\uff29\022\uff29\023\uff29\032\uff29\034\uff29\037\uff29\041" +
    "\uff29\045\uff29\046\uff29\050\uff29\001\002\000\056\002\uff27" +
    "\005\uff27\006\uff27\007\uff27\011\uff27\012\uff27\013\uff27\014" +
    "\uff27\015\uff27\016\uff27\017\uff27\020\uff27\021\uff27\022\uff27" +
    "\023\uff27\032\uff27\034\uff27\037\uff27\041\uff27\045\uff27\046" +
    "\uff27\050\uff27\001\002\000\004\046\124\001\002\000\004" +
    "\040\121\001\002\000\044\005\024\006\033\007\031\011" +
    "\036\012\041\013\040\014\035\015\021\016\014\017\037" +
    "\020\032\021\034\022\026\023\013\034\030\046\022\050" +
    "\015\001\002\000\046\005\024\006\033\007\031\011\036" +
    "\012\041\013\040\014\035\015\021\016\014\017\037\020" +
    "\032\021\034\022\026\023\013\034\030\041\123\046\022" +
    "\050\015\001\002\000\050\002\uff25\005\uff25\006\uff25\007" +
    "\uff25\011\uff25\012\uff25\013\uff25\014\uff25\015\uff25\016\uff25" +
    "\017\uff25\020\uff25\021\uff25\022\uff25\023\uff25\034\uff25\041" +
    "\uff25\046\uff25\050\uff25\001\002\000\006\037\uff3d\045\uff3d" +
    "\001\002\000\004\040\126\001\002\000\044\005\024\006" +
    "\033\007\031\011\036\012\041\013\040\014\035\015\021" +
    "\016\014\017\037\020\032\021\034\022\026\023\013\034" +
    "\030\046\022\050\015\001\002\000\046\005\024\006\033" +
    "\007\031\011\036\012\041\013\040\014\035\015\021\016" +
    "\014\017\037\020\032\021\034\022\026\023\013\034\030" +
    "\041\130\046\022\050\015\001\002\000\050\002\uff26\005" +
    "\uff26\006\uff26\007\uff26\011\uff26\012\uff26\013\uff26\014\uff26" +
    "\015\uff26\016\uff26\017\uff26\020\uff26\021\uff26\022\uff26\023" +
    "\uff26\034\uff26\041\uff26\046\uff26\050\uff26\001\002\000\004" +
    "\046\132\001\002\000\006\037\uff38\045\uff38\001\002\000" +
    "\050\002\uff55\005\uff55\006\uff55\007\uff55\011\uff55\012\uff55" +
    "\013\uff55\014\uff55\015\uff55\016\uff55\017\uff55\020\uff55\021" +
    "\uff55\022\uff55\023\uff55\034\uff55\041\uff55\046\uff55\050\uff55" +
    "\001\002\000\014\025\103\026\102\027\104\030\101\037" +
    "\162\001\002\000\010\037\146\046\145\047\144\001\002" +
    "\000\014\025\055\026\054\027\056\030\052\037\142\001" +
    "\002\000\004\037\140\001\002\000\004\045\141\001\002" +
    "\000\050\002\uff80\005\uff80\006\uff80\007\uff80\011\uff80\012" +
    "\uff80\013\uff80\014\uff80\015\uff80\016\uff80\017\uff80\020\uff80" +
    "\021\uff80\022\uff80\023\uff80\034\uff80\041\uff80\046\uff80\050" +
    "\uff80\001\002\000\004\045\143\001\002\000\050\002\uff7c" +
    "\005\uff7c\006\uff7c\007\uff7c\011\uff7c\012\uff7c\013\uff7c\014" +
    "\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c" +
    "\023\uff7c\034\uff7c\041\uff7c\046\uff7c\050\uff7c\001\002\000" +
    "\016\025\103\026\102\027\104\030\101\037\160\045\157" +
    "\001\002\000\016\025\055\026\054\027\056\030\052\037" +
    "\155\045\154\001\002\000\004\045\153\001\002\000\006" +
    "\037\151\045\150\001\002\000\050\002\uff82\005\uff82\006" +
    "\uff82\007\uff82\011\uff82\012\uff82\013\uff82\014\uff82\015\uff82" +
    "\016\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82\034" +
    "\uff82\041\uff82\046\uff82\050\uff82\001\002\000\052\002\uff83" +
    "\005\uff83\006\uff83\007\uff83\011\uff83\012\uff83\013\uff83\014" +
    "\uff83\015\uff83\016\uff83\017\uff83\020\uff83\021\uff83\022\uff83" +
    "\023\uff83\034\uff83\041\uff83\045\152\046\uff83\050\uff83\001" +
    "\002\000\050\002\uff84\005\uff84\006\uff84\007\uff84\011\uff84" +
    "\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84\017\uff84\020" +
    "\uff84\021\uff84\022\uff84\023\uff84\034\uff84\041\uff84\046\uff84" +
    "\050\uff84\001\002\000\050\002\uff81\005\uff81\006\uff81\007" +
    "\uff81\011\uff81\012\uff81\013\uff81\014\uff81\015\uff81\016\uff81" +
    "\017\uff81\020\uff81\021\uff81\022\uff81\023\uff81\034\uff81\041" +
    "\uff81\046\uff81\050\uff81\001\002\000\050\002\uff7d\005\uff7d" +
    "\006\uff7d\007\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015" +
    "\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d" +
    "\034\uff7d\041\uff7d\046\uff7d\050\uff7d\001\002\000\052\002" +
    "\uff7e\005\uff7e\006\uff7e\007\uff7e\011\uff7e\012\uff7e\013\uff7e" +
    "\014\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e\022" +
    "\uff7e\023\uff7e\034\uff7e\041\uff7e\045\156\046\uff7e\050\uff7e" +
    "\001\002\000\050\002\uff7f\005\uff7f\006\uff7f\007\uff7f\011" +
    "\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f" +
    "\020\uff7f\021\uff7f\022\uff7f\023\uff7f\034\uff7f\041\uff7f\046" +
    "\uff7f\050\uff7f\001\002\000\050\002\uff79\005\uff79\006\uff79" +
    "\007\uff79\011\uff79\012\uff79\013\uff79\014\uff79\015\uff79\016" +
    "\uff79\017\uff79\020\uff79\021\uff79\022\uff79\023\uff79\034\uff79" +
    "\041\uff79\046\uff79\050\uff79\001\002\000\052\002\uff7a\005" +
    "\uff7a\006\uff7a\007\uff7a\011\uff7a\012\uff7a\013\uff7a\014\uff7a" +
    "\015\uff7a\016\uff7a\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023" +
    "\uff7a\034\uff7a\041\uff7a\045\161\046\uff7a\050\uff7a\001\002" +
    "\000\050\002\uff7b\005\uff7b\006\uff7b\007\uff7b\011\uff7b\012" +
    "\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\020\uff7b" +
    "\021\uff7b\022\uff7b\023\uff7b\034\uff7b\041\uff7b\046\uff7b\050" +
    "\uff7b\001\002\000\004\045\163\001\002\000\050\002\uff78" +
    "\005\uff78\006\uff78\007\uff78\011\uff78\012\uff78\013\uff78\014" +
    "\uff78\015\uff78\016\uff78\017\uff78\020\uff78\021\uff78\022\uff78" +
    "\023\uff78\034\uff78\041\uff78\046\uff78\050\uff78\001\002\000" +
    "\044\005\024\006\033\007\031\011\036\012\041\013\040" +
    "\014\035\015\021\016\014\017\037\020\032\021\034\022" +
    "\026\023\013\034\030\046\022\050\015\001\002\000\046" +
    "\005\024\006\033\007\031\011\036\012\041\013\040\014" +
    "\035\015\021\016\014\017\037\020\032\021\034\022\026" +
    "\023\013\034\030\041\166\046\022\050\015\001\002\000" +
    "\004\012\167\001\002\000\004\036\170\001\002\000\012" +
    "\035\172\037\uff37\046\173\047\043\001\002\000\004\037" +
    "\200\001\002\000\006\032\117\037\176\001\002\000\016" +
    "\025\055\026\054\027\056\030\052\032\053\037\174\001" +
    "\002\000\004\045\175\001\002\000\050\002\uff21\005\uff21" +
    "\006\uff21\007\uff21\011\uff21\012\uff21\013\uff21\014\uff21\015" +
    "\uff21\016\uff21\017\uff21\020\uff21\021\uff21\022\uff21\023\uff21" +
    "\034\uff21\041\uff21\046\uff21\050\uff21\001\002\000\004\045" +
    "\177\001\002\000\050\002\uff22\005\uff22\006\uff22\007\uff22" +
    "\011\uff22\012\uff22\013\uff22\014\uff22\015\uff22\016\uff22\017" +
    "\uff22\020\uff22\021\uff22\022\uff22\023\uff22\034\uff22\041\uff22" +
    "\046\uff22\050\uff22\001\002\000\004\045\201\001\002\000" +
    "\050\002\uff23\005\uff23\006\uff23\007\uff23\011\uff23\012\uff23" +
    "\013\uff23\014\uff23\015\uff23\016\uff23\017\uff23\020\uff23\021" +
    "\uff23\022\uff23\023\uff23\034\uff23\041\uff23\046\uff23\050\uff23" +
    "\001\002\000\014\025\103\026\102\027\104\030\101\037" +
    "\230\001\002\000\010\037\214\046\213\047\212\001\002" +
    "\000\014\025\055\026\054\027\056\030\052\037\210\001" +
    "\002\000\004\037\206\001\002\000\004\045\207\001\002" +
    "\000\050\002\uffb4\005\uffb4\006\uffb4\007\uffb4\011\uffb4\012" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\034\uffb4\041\uffb4\046\uffb4\050" +
    "\uffb4\001\002\000\004\045\211\001\002\000\050\002\uffab" +
    "\005\uffab\006\uffab\007\uffab\011\uffab\012\uffab\013\uffab\014" +
    "\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\023\uffab\034\uffab\041\uffab\046\uffab\050\uffab\001\002\000" +
    "\016\025\103\026\102\027\104\030\101\037\226\045\225" +
    "\001\002\000\016\025\055\026\054\027\056\030\052\037" +
    "\223\045\222\001\002\000\004\045\221\001\002\000\006" +
    "\037\217\045\216\001\002\000\050\002\uffb6\005\uffb6\006" +
    "\uffb6\007\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\034" +
    "\uffb6\041\uffb6\046\uffb6\050\uffb6\001\002\000\052\002\uffb7" +
    "\005\uffb7\006\uffb7\007\uffb7\011\uffb7\012\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\034\uffb7\041\uffb7\045\220\046\uffb7\050\uffb7\001" +
    "\002\000\050\002\uffb8\005\uffb8\006\uffb8\007\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\034\uffb8\041\uffb8\046\uffb8" +
    "\050\uffb8\001\002\000\050\002\uffb5\005\uffb5\006\uffb5\007" +
    "\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5" +
    "\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\034\uffb5\041" +
    "\uffb5\046\uffb5\050\uffb5\001\002\000\050\002\uffac\005\uffac" +
    "\006\uffac\007\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\034\uffac\041\uffac\046\uffac\050\uffac\001\002\000\052\002" +
    "\uffad\005\uffad\006\uffad\007\uffad\011\uffad\012\uffad\013\uffad" +
    "\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022" +
    "\uffad\023\uffad\034\uffad\041\uffad\045\224\046\uffad\050\uffad" +
    "\001\002\000\050\002\uffae\005\uffae\006\uffae\007\uffae\011" +
    "\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae" +
    "\020\uffae\021\uffae\022\uffae\023\uffae\034\uffae\041\uffae\046" +
    "\uffae\050\uffae\001\002\000\050\002\uffa4\005\uffa4\006\uffa4" +
    "\007\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016" +
    "\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\034\uffa4" +
    "\041\uffa4\046\uffa4\050\uffa4\001\002\000\052\002\uffa5\005" +
    "\uffa5\006\uffa5\007\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5" +
    "\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\034\uffa5\041\uffa5\045\227\046\uffa5\050\uffa5\001\002" +
    "\000\050\002\uffa6\005\uffa6\006\uffa6\007\uffa6\011\uffa6\012" +
    "\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\034\uffa6\041\uffa6\046\uffa6\050" +
    "\uffa6\001\002\000\004\045\231\001\002\000\050\002\uffa3" +
    "\005\uffa3\006\uffa3\007\uffa3\011\uffa3\012\uffa3\013\uffa3\014" +
    "\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3" +
    "\023\uffa3\034\uffa3\041\uffa3\046\uffa3\050\uffa3\001\002\000" +
    "\014\025\103\026\102\027\104\030\101\037\260\001\002" +
    "\000\010\037\245\046\243\047\242\001\002\000\014\025" +
    "\055\026\054\027\056\030\052\037\240\001\002\000\004" +
    "\037\236\001\002\000\004\045\237\001\002\000\050\002" +
    "\uff66\005\uff66\006\uff66\007\uff66\011\uff66\012\uff66\013\uff66" +
    "\014\uff66\015\uff66\016\uff66\017\uff66\020\uff66\021\uff66\022" +
    "\uff66\023\uff66\034\uff66\041\uff66\046\uff66\050\uff66\001\002" +
    "\000\004\045\241\001\002\000\050\002\uff62\005\uff62\006" +
    "\uff62\007\uff62\011\uff62\012\uff62\013\uff62\014\uff62\015\uff62" +
    "\016\uff62\017\uff62\020\uff62\021\uff62\022\uff62\023\uff62\034" +
    "\uff62\041\uff62\046\uff62\050\uff62\001\002\000\016\025\103" +
    "\026\102\027\104\030\101\037\256\045\255\001\002\000" +
    "\016\025\055\026\054\027\056\030\052\037\253\045\252" +
    "\001\002\000\006\037\250\045\247\001\002\000\004\045" +
    "\246\001\002\000\050\002\uff67\005\uff67\006\uff67\007\uff67" +
    "\011\uff67\012\uff67\013\uff67\014\uff67\015\uff67\016\uff67\017" +
    "\uff67\020\uff67\021\uff67\022\uff67\023\uff67\034\uff67\041\uff67" +
    "\046\uff67\050\uff67\001\002\000\050\002\uff68\005\uff68\006" +
    "\uff68\007\uff68\011\uff68\012\uff68\013\uff68\014\uff68\015\uff68" +
    "\016\uff68\017\uff68\020\uff68\021\uff68\022\uff68\023\uff68\034" +
    "\uff68\041\uff68\046\uff68\050\uff68\001\002\000\052\002\uff69" +
    "\005\uff69\006\uff69\007\uff69\011\uff69\012\uff69\013\uff69\014" +
    "\uff69\015\uff69\016\uff69\017\uff69\020\uff69\021\uff69\022\uff69" +
    "\023\uff69\034\uff69\041\uff69\045\251\046\uff69\050\uff69\001" +
    "\002\000\050\002\uff6a\005\uff6a\006\uff6a\007\uff6a\011\uff6a" +
    "\012\uff6a\013\uff6a\014\uff6a\015\uff6a\016\uff6a\017\uff6a\020" +
    "\uff6a\021\uff6a\022\uff6a\023\uff6a\034\uff6a\041\uff6a\046\uff6a" +
    "\050\uff6a\001\002\000\050\002\uff63\005\uff63\006\uff63\007" +
    "\uff63\011\uff63\012\uff63\013\uff63\014\uff63\015\uff63\016\uff63" +
    "\017\uff63\020\uff63\021\uff63\022\uff63\023\uff63\034\uff63\041" +
    "\uff63\046\uff63\050\uff63\001\002\000\052\002\uff64\005\uff64" +
    "\006\uff64\007\uff64\011\uff64\012\uff64\013\uff64\014\uff64\015" +
    "\uff64\016\uff64\017\uff64\020\uff64\021\uff64\022\uff64\023\uff64" +
    "\034\uff64\041\uff64\045\254\046\uff64\050\uff64\001\002\000" +
    "\050\002\uff65\005\uff65\006\uff65\007\uff65\011\uff65\012\uff65" +
    "\013\uff65\014\uff65\015\uff65\016\uff65\017\uff65\020\uff65\021" +
    "\uff65\022\uff65\023\uff65\034\uff65\041\uff65\046\uff65\050\uff65" +
    "\001\002\000\050\002\uff5f\005\uff5f\006\uff5f\007\uff5f\011" +
    "\uff5f\012\uff5f\013\uff5f\014\uff5f\015\uff5f\016\uff5f\017\uff5f" +
    "\020\uff5f\021\uff5f\022\uff5f\023\uff5f\034\uff5f\041\uff5f\046" +
    "\uff5f\050\uff5f\001\002\000\052\002\uff60\005\uff60\006\uff60" +
    "\007\uff60\011\uff60\012\uff60\013\uff60\014\uff60\015\uff60\016" +
    "\uff60\017\uff60\020\uff60\021\uff60\022\uff60\023\uff60\034\uff60" +
    "\041\uff60\045\257\046\uff60\050\uff60\001\002\000\050\002" +
    "\uff61\005\uff61\006\uff61\007\uff61\011\uff61\012\uff61\013\uff61" +
    "\014\uff61\015\uff61\016\uff61\017\uff61\020\uff61\021\uff61\022" +
    "\uff61\023\uff61\034\uff61\041\uff61\046\uff61\050\uff61\001\002" +
    "\000\004\045\261\001\002\000\050\002\uff5e\005\uff5e\006" +
    "\uff5e\007\uff5e\011\uff5e\012\uff5e\013\uff5e\014\uff5e\015\uff5e" +
    "\016\uff5e\017\uff5e\020\uff5e\021\uff5e\022\uff5e\023\uff5e\034" +
    "\uff5e\041\uff5e\046\uff5e\050\uff5e\001\002\000\050\002\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\034\uffdd\041\uffdd\046\uffdd\050\uffdd\001\002\000" +
    "\056\002\uffde\005\uffde\006\uffde\007\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021" +
    "\uffde\022\uffde\023\uffde\024\275\034\uffde\035\274\041\uffde" +
    "\045\273\046\uffde\050\uffde\001\002\000\012\035\266\045" +
    "\uff37\046\267\047\043\001\002\000\004\045\272\001\002" +
    "\000\006\032\117\045\271\001\002\000\016\025\055\026" +
    "\054\027\056\030\052\032\053\045\270\001\002\000\050" +
    "\002\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\034\uffd6\041\uffd6\046\uffd6\050\uffd6\001" +
    "\002\000\050\002\uffbc\005\uffbc\006\uffbc\007\uffbc\011\uffbc" +
    "\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\034\uffbc\041\uffbc\046\uffbc" +
    "\050\uffbc\001\002\000\050\002\uffcb\005\uffcb\006\uffcb\007" +
    "\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\034\uffcb\041" +
    "\uffcb\046\uffcb\050\uffcb\001\002\000\050\002\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\034\uffdf\041\uffdf\046\uffdf\050\uffdf\001\002\000\004\045" +
    "\304\001\002\000\012\035\277\045\uff37\046\300\047\043" +
    "\001\002\000\004\045\303\001\002\000\054\002\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe" +
    "\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\032\117\034\uffbe\041\uffbe\045\302\046\uffbe\050\uffbe" +
    "\001\002\000\064\002\uffd7\005\uffd7\006\uffd7\007\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\025\055\026\054\027" +
    "\056\030\052\032\053\034\uffd7\041\uffd7\045\301\046\uffd7" +
    "\050\uffd7\001\002\000\050\002\uffd8\005\uffd8\006\uffd8\007" +
    "\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\034\uffd8\041" +
    "\uffd8\046\uffd8\050\uffd8\001\002\000\050\002\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf" +
    "\034\uffbf\041\uffbf\046\uffbf\050\uffbf\001\002\000\050\002" +
    "\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc\012\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\034\uffcc\041\uffcc\046\uffcc\050\uffcc\001\002" +
    "\000\050\002\uffbd\005\uffbd\006\uffbd\007\uffbd\011\uffbd\012" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\034\uffbd\041\uffbd\046\uffbd\050" +
    "\uffbd\001\002\000\014\025\103\026\102\027\104\030\101" +
    "\037\333\001\002\000\010\037\317\046\316\047\315\001" +
    "\002\000\014\025\055\026\054\027\056\030\052\037\313" +
    "\001\002\000\004\037\311\001\002\000\004\045\312\001" +
    "\002\000\050\002\uff73\005\uff73\006\uff73\007\uff73\011\uff73" +
    "\012\uff73\013\uff73\014\uff73\015\uff73\016\uff73\017\uff73\020" +
    "\uff73\021\uff73\022\uff73\023\uff73\034\uff73\041\uff73\046\uff73" +
    "\050\uff73\001\002\000\004\045\314\001\002\000\050\002" +
    "\uff6f\005\uff6f\006\uff6f\007\uff6f\011\uff6f\012\uff6f\013\uff6f" +
    "\014\uff6f\015\uff6f\016\uff6f\017\uff6f\020\uff6f\021\uff6f\022" +
    "\uff6f\023\uff6f\034\uff6f\041\uff6f\046\uff6f\050\uff6f\001\002" +
    "\000\016\025\103\026\102\027\104\030\101\037\331\045" +
    "\330\001\002\000\016\025\055\026\054\027\056\030\052" +
    "\037\326\045\325\001\002\000\004\045\324\001\002\000" +
    "\006\037\322\045\321\001\002\000\050\002\uff75\005\uff75" +
    "\006\uff75\007\uff75\011\uff75\012\uff75\013\uff75\014\uff75\015" +
    "\uff75\016\uff75\017\uff75\020\uff75\021\uff75\022\uff75\023\uff75" +
    "\034\uff75\041\uff75\046\uff75\050\uff75\001\002\000\052\002" +
    "\uff76\005\uff76\006\uff76\007\uff76\011\uff76\012\uff76\013\uff76" +
    "\014\uff76\015\uff76\016\uff76\017\uff76\020\uff76\021\uff76\022" +
    "\uff76\023\uff76\034\uff76\041\uff76\045\323\046\uff76\050\uff76" +
    "\001\002\000\050\002\uff77\005\uff77\006\uff77\007\uff77\011" +
    "\uff77\012\uff77\013\uff77\014\uff77\015\uff77\016\uff77\017\uff77" +
    "\020\uff77\021\uff77\022\uff77\023\uff77\034\uff77\041\uff77\046" +
    "\uff77\050\uff77\001\002\000\050\002\uff74\005\uff74\006\uff74" +
    "\007\uff74\011\uff74\012\uff74\013\uff74\014\uff74\015\uff74\016" +
    "\uff74\017\uff74\020\uff74\021\uff74\022\uff74\023\uff74\034\uff74" +
    "\041\uff74\046\uff74\050\uff74\001\002\000\050\002\uff70\005" +
    "\uff70\006\uff70\007\uff70\011\uff70\012\uff70\013\uff70\014\uff70" +
    "\015\uff70\016\uff70\017\uff70\020\uff70\021\uff70\022\uff70\023" +
    "\uff70\034\uff70\041\uff70\046\uff70\050\uff70\001\002\000\052" +
    "\002\uff71\005\uff71\006\uff71\007\uff71\011\uff71\012\uff71\013" +
    "\uff71\014\uff71\015\uff71\016\uff71\017\uff71\020\uff71\021\uff71" +
    "\022\uff71\023\uff71\034\uff71\041\uff71\045\327\046\uff71\050" +
    "\uff71\001\002\000\050\002\uff72\005\uff72\006\uff72\007\uff72" +
    "\011\uff72\012\uff72\013\uff72\014\uff72\015\uff72\016\uff72\017" +
    "\uff72\020\uff72\021\uff72\022\uff72\023\uff72\034\uff72\041\uff72" +
    "\046\uff72\050\uff72\001\002\000\050\002\uff6c\005\uff6c\006" +
    "\uff6c\007\uff6c\011\uff6c\012\uff6c\013\uff6c\014\uff6c\015\uff6c" +
    "\016\uff6c\017\uff6c\020\uff6c\021\uff6c\022\uff6c\023\uff6c\034" +
    "\uff6c\041\uff6c\046\uff6c\050\uff6c\001\002\000\052\002\uff6d" +
    "\005\uff6d\006\uff6d\007\uff6d\011\uff6d\012\uff6d\013\uff6d\014" +
    "\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d\021\uff6d\022\uff6d" +
    "\023\uff6d\034\uff6d\041\uff6d\045\332\046\uff6d\050\uff6d\001" +
    "\002\000\050\002\uff6e\005\uff6e\006\uff6e\007\uff6e\011\uff6e" +
    "\012\uff6e\013\uff6e\014\uff6e\015\uff6e\016\uff6e\017\uff6e\020" +
    "\uff6e\021\uff6e\022\uff6e\023\uff6e\034\uff6e\041\uff6e\046\uff6e" +
    "\050\uff6e\001\002\000\004\045\334\001\002\000\050\002" +
    "\uff6b\005\uff6b\006\uff6b\007\uff6b\011\uff6b\012\uff6b\013\uff6b" +
    "\014\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b\022" +
    "\uff6b\023\uff6b\034\uff6b\041\uff6b\046\uff6b\050\uff6b\001\002" +
    "\000\012\035\337\037\uff37\046\340\047\043\001\002\000" +
    "\004\037\357\001\002\000\006\032\117\037\352\001\002" +
    "\000\016\025\055\026\054\027\056\030\052\032\053\037" +
    "\341\001\002\000\004\040\342\001\002\000\044\005\024" +
    "\006\033\007\031\011\036\012\041\013\040\014\035\015" +
    "\021\016\014\017\037\020\032\021\034\022\026\023\013" +
    "\034\030\046\022\050\015\001\002\000\046\005\024\006" +
    "\033\007\031\011\036\012\041\013\040\014\035\015\021" +
    "\016\014\017\037\020\032\021\034\022\026\023\013\034" +
    "\030\041\344\046\022\050\015\001\002\000\052\002\uff43" +
    "\005\uff43\006\uff43\007\uff43\010\346\011\uff43\012\uff43\013" +
    "\uff43\014\uff43\015\uff43\016\uff43\017\uff43\020\uff43\021\uff43" +
    "\022\uff43\023\uff43\034\uff43\041\uff43\046\uff43\050\uff43\001" +
    "\002\000\050\002\uff40\005\uff40\006\uff40\007\uff40\011\uff40" +
    "\012\uff40\013\uff40\014\uff40\015\uff40\016\uff40\017\uff40\020" +
    "\uff40\021\uff40\022\uff40\023\uff40\034\uff40\041\uff40\046\uff40" +
    "\050\uff40\001\002\000\004\040\347\001\002\000\044\005" +
    "\024\006\033\007\031\011\036\012\041\013\040\014\035" +
    "\015\021\016\014\017\037\020\032\021\034\022\026\023" +
    "\013\034\030\046\022\050\015\001\002\000\046\005\024" +
    "\006\033\007\031\011\036\012\041\013\040\014\035\015" +
    "\021\016\014\017\037\020\032\021\034\022\026\023\013" +
    "\034\030\041\351\046\022\050\015\001\002\000\050\002" +
    "\uff3f\005\uff3f\006\uff3f\007\uff3f\011\uff3f\012\uff3f\013\uff3f" +
    "\014\uff3f\015\uff3f\016\uff3f\017\uff3f\020\uff3f\021\uff3f\022" +
    "\uff3f\023\uff3f\034\uff3f\041\uff3f\046\uff3f\050\uff3f\001\002" +
    "\000\004\040\353\001\002\000\044\005\024\006\033\007" +
    "\031\011\036\012\041\013\040\014\035\015\021\016\014" +
    "\017\037\020\032\021\034\022\026\023\013\034\030\046" +
    "\022\050\015\001\002\000\046\005\024\006\033\007\031" +
    "\011\036\012\041\013\040\014\035\015\021\016\014\017" +
    "\037\020\032\021\034\022\026\023\013\034\030\041\355" +
    "\046\022\050\015\001\002\000\052\002\uff44\005\uff44\006" +
    "\uff44\007\uff44\010\346\011\uff44\012\uff44\013\uff44\014\uff44" +
    "\015\uff44\016\uff44\017\uff44\020\uff44\021\uff44\022\uff44\023" +
    "\uff44\034\uff44\041\uff44\046\uff44\050\uff44\001\002\000\050" +
    "\002\uff41\005\uff41\006\uff41\007\uff41\011\uff41\012\uff41\013" +
    "\uff41\014\uff41\015\uff41\016\uff41\017\uff41\020\uff41\021\uff41" +
    "\022\uff41\023\uff41\034\uff41\041\uff41\046\uff41\050\uff41\001" +
    "\002\000\004\040\360\001\002\000\046\005\024\006\033" +
    "\007\031\011\036\012\041\013\040\014\035\015\021\016" +
    "\014\017\037\020\032\021\034\022\026\023\013\034\030" +
    "\041\362\046\022\050\015\001\002\000\046\005\024\006" +
    "\033\007\031\011\036\012\041\013\040\014\035\015\021" +
    "\016\014\017\037\020\032\021\034\022\026\023\013\034" +
    "\030\041\363\046\022\050\015\001\002\000\050\002\uff45" +
    "\005\uff45\006\uff45\007\uff45\011\uff45\012\uff45\013\uff45\014" +
    "\uff45\015\uff45\016\uff45\017\uff45\020\uff45\021\uff45\022\uff45" +
    "\023\uff45\034\uff45\041\uff45\046\uff45\050\uff45\001\002\000" +
    "\052\002\uff46\005\uff46\006\uff46\007\uff46\010\346\011\uff46" +
    "\012\uff46\013\uff46\014\uff46\015\uff46\016\uff46\017\uff46\020" +
    "\uff46\021\uff46\022\uff46\023\uff46\034\uff46\041\uff46\046\uff46" +
    "\050\uff46\001\002\000\050\002\uff42\005\uff42\006\uff42\007" +
    "\uff42\011\uff42\012\uff42\013\uff42\014\uff42\015\uff42\016\uff42" +
    "\017\uff42\020\uff42\021\uff42\022\uff42\023\uff42\034\uff42\041" +
    "\uff42\046\uff42\050\uff42\001\002\000\050\002\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7" +
    "\034\uffc7\041\uffc7\046\uffc7\050\uffc7\001\002\000\006\037" +
    "\372\045\371\001\002\000\004\045\370\001\002\000\050" +
    "\002\uff5a\005\uff5a\006\uff5a\007\uff5a\011\uff5a\012\uff5a\013" +
    "\uff5a\014\uff5a\015\uff5a\016\uff5a\017\uff5a\020\uff5a\021\uff5a" +
    "\022\uff5a\023\uff5a\034\uff5a\041\uff5a\046\uff5a\050\uff5a\001" +
    "\002\000\050\002\uff5b\005\uff5b\006\uff5b\007\uff5b\011\uff5b" +
    "\012\uff5b\013\uff5b\014\uff5b\015\uff5b\016\uff5b\017\uff5b\020" +
    "\uff5b\021\uff5b\022\uff5b\023\uff5b\034\uff5b\041\uff5b\046\uff5b" +
    "\050\uff5b\001\002\000\052\002\uff5c\005\uff5c\006\uff5c\007" +
    "\uff5c\011\uff5c\012\uff5c\013\uff5c\014\uff5c\015\uff5c\016\uff5c" +
    "\017\uff5c\020\uff5c\021\uff5c\022\uff5c\023\uff5c\034\uff5c\041" +
    "\uff5c\045\373\046\uff5c\050\uff5c\001\002\000\050\002\uff5d" +
    "\005\uff5d\006\uff5d\007\uff5d\011\uff5d\012\uff5d\013\uff5d\014" +
    "\uff5d\015\uff5d\016\uff5d\017\uff5d\020\uff5d\021\uff5d\022\uff5d" +
    "\023\uff5d\034\uff5d\041\uff5d\046\uff5d\050\uff5d\001\002\000" +
    "\050\002\uffe1\005\uffe1\006\uffe1\007\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\034\uffe1\041\uffe1\046\uffe1\050\uffe1" +
    "\001\002\000\056\002\uffe2\005\uffe2\006\uffe2\007\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\u0107\034\uffe2\041" +
    "\uffe2\045\u0106\046\uffe2\047\u0105\050\uffe2\001\002\000\006" +
    "\046\u0100\047\377\001\002\000\014\025\103\026\102\027" +
    "\104\030\101\045\u0104\001\002\000\014\025\055\026\054" +
    "\027\056\030\052\045\u0103\001\002\000\004\045\u0102\001" +
    "\002\000\050\002\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020" +
    "\uffd0\021\uffd0\022\uffd0\023\uffd0\034\uffd0\041\uffd0\046\uffd0" +
    "\050\uffd0\001\002\000\050\002\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\034\uffd9\041" +
    "\uffd9\046\uffd9\050\uffd9\001\002\000\050\002\uffc3\005\uffc3" +
    "\006\uffc3\007\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\034\uffc3\041\uffc3\046\uffc3\050\uffc3\001\002\000\004\045" +
    "\u010f\001\002\000\050\002\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\034\uffe3\041\uffe3" +
    "\046\uffe3\050\uffe3\001\002\000\010\045\u0109\046\u010a\047" +
    "\u0108\001\002\000\062\002\uffc5\005\uffc5\006\uffc5\007\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\025\103\026\102" +
    "\027\104\030\101\034\uffc5\041\uffc5\045\u010e\046\uffc5\050" +
    "\uffc5\001\002\000\050\002\uffda\005\uffda\006\uffda\007\uffda" +
    "\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\034\uffda\041\uffda" +
    "\046\uffda\050\uffda\001\002\000\062\002\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\025" +
    "\055\026\054\027\056\030\052\034\uffdb\041\uffdb\045\u010d" +
    "\046\uffdb\050\uffdb\001\002\000\052\002\uffd1\005\uffd1\006" +
    "\uffd1\007\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\034" +
    "\uffd1\041\uffd1\045\u010c\046\uffd1\050\uffd1\001\002\000\050" +
    "\002\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\034\uffd2\041\uffd2\046\uffd2\050\uffd2\001" +
    "\002\000\050\002\uffdc\005\uffdc\006\uffdc\007\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\034\uffdc\041\uffdc\046\uffdc" +
    "\050\uffdc\001\002\000\050\002\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\034\uffc6\041" +
    "\uffc6\046\uffc6\050\uffc6\001\002\000\050\002\uffc4\005\uffc4" +
    "\006\uffc4\007\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015" +
    "\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4" +
    "\034\uffc4\041\uffc4\046\uffc4\050\uffc4\001\002\000\016\025" +
    "\103\026\102\027\104\030\101\037\u0139\045\u0138\001\002" +
    "\000\010\037\u012c\046\u012b\047\u012a\001\002\000\050\002" +
    "\uffe0\005\uffe0\006\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\034\uffe0\041\uffe0\046\uffe0\050\uffe0\001\002" +
    "\000\004\045\u0129\001\002\000\052\002\uffc8\005\uffc8\006" +
    "\uffc8\007\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\034" +
    "\uffc8\041\uffc8\045\u0128\046\uffc8\050\uffc8\001\002\000\016" +
    "\025\055\026\054\027\056\030\052\037\u0126\045\u0125\001" +
    "\002\000\006\037\u0123\045\u0122\001\002\000\012\035\u011a" +
    "\045\uff37\046\u011b\047\u0118\001\002\000\064\002\uffc1\005" +
    "\uffc1\006\uffc1\007\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\025\103\026\102\027\104\030\101\032\131\034\uffc1" +
    "\041\uffc1\045\u0121\046\uffc1\050\uffc1\001\002\000\004\045" +
    "\u0120\001\002\000\054\002\uffba\005\uffba\006\uffba\007\uffba" +
    "\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017" +
    "\uffba\020\uffba\021\uffba\022\uffba\023\uffba\032\117\034\uffba" +
    "\041\uffba\045\u011f\046\uffba\050\uffba\001\002\000\064\002" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\025\055\026\054\027\056\030\052\032\053" +
    "\034\uffd4\041\uffd4\045\u011e\046\uffd4\050\uffd4\001\002\000" +
    "\054\002\uffce\005\uffce\006\uffce\007\uffce\011\uffce\012\uffce" +
    "\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\032\050\034\uffce\041\uffce\045\u011d" +
    "\046\uffce\050\uffce\001\002\000\050\002\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\034" +
    "\uffcf\041\uffcf\046\uffcf\050\uffcf\001\002\000\050\002\uffd5" +
    "\005\uffd5\006\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\034\uffd5\041\uffd5\046\uffd5\050\uffd5\001\002\000" +
    "\050\002\uffbb\005\uffbb\006\uffbb\007\uffbb\011\uffbb\012\uffbb" +
    "\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021" +
    "\uffbb\022\uffbb\023\uffbb\034\uffbb\041\uffbb\046\uffbb\050\uffbb" +
    "\001\002\000\050\002\uffca\005\uffca\006\uffca\007\uffca\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\023\uffca\034\uffca\041\uffca\046" +
    "\uffca\050\uffca\001\002\000\050\002\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\034\uffc2" +
    "\041\uffc2\046\uffc2\050\uffc2\001\002\000\050\002\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\034\uffcd\041\uffcd\046\uffcd\050\uffcd\001\002\000\004" +
    "\045\u0124\001\002\000\050\002\uffaf\005\uffaf\006\uffaf\007" +
    "\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf" +
    "\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\034\uffaf\041" +
    "\uffaf\046\uffaf\050\uffaf\001\002\000\050\002\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\034\uffd3\041\uffd3\046\uffd3\050\uffd3\001\002\000\004\045" +
    "\u0127\001\002\000\050\002\uffa7\005\uffa7\006\uffa7\007\uffa7" +
    "\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\034\uffa7\041\uffa7" +
    "\046\uffa7\050\uffa7\001\002\000\050\002\uffc9\005\uffc9\006" +
    "\uffc9\007\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\034" +
    "\uffc9\041\uffc9\046\uffc9\050\uffc9\001\002\000\050\002\uffb9" +
    "\005\uffb9\006\uffb9\007\uffb9\011\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\034\uffb9\041\uffb9\046\uffb9\050\uffb9\001\002\000" +
    "\016\025\103\026\102\027\104\030\101\037\u0136\045\u0135" +
    "\001\002\000\016\025\055\026\054\027\056\030\052\037" +
    "\u0133\045\u0132\001\002\000\004\045\u0131\001\002\000\006" +
    "\037\u012f\045\u012e\001\002\000\050\002\uffb1\005\uffb1\006" +
    "\uffb1\007\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\034" +
    "\uffb1\041\uffb1\046\uffb1\050\uffb1\001\002\000\052\002\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\011\uffb2\012\uffb2\013\uffb2\014" +
    "\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\023\uffb2\034\uffb2\041\uffb2\045\u0130\046\uffb2\050\uffb2\001" +
    "\002\000\050\002\uffb3\005\uffb3\006\uffb3\007\uffb3\011\uffb3" +
    "\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020" +
    "\uffb3\021\uffb3\022\uffb3\023\uffb3\034\uffb3\041\uffb3\046\uffb3" +
    "\050\uffb3\001\002\000\050\002\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\034\uffb0\041" +
    "\uffb0\046\uffb0\050\uffb0\001\002\000\050\002\uffa8\005\uffa8" +
    "\006\uffa8\007\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\034\uffa8\041\uffa8\046\uffa8\050\uffa8\001\002\000\052\002" +
    "\uffa9\005\uffa9\006\uffa9\007\uffa9\011\uffa9\012\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\034\uffa9\041\uffa9\045\u0134\046\uffa9\050\uffa9" +
    "\001\002\000\050\002\uffaa\005\uffaa\006\uffaa\007\uffaa\011" +
    "\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\022\uffaa\023\uffaa\034\uffaa\041\uffaa\046" +
    "\uffaa\050\uffaa\001\002\000\050\002\uffa0\005\uffa0\006\uffa0" +
    "\007\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016" +
    "\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\034\uffa0" +
    "\041\uffa0\046\uffa0\050\uffa0\001\002\000\052\002\uffa1\005" +
    "\uffa1\006\uffa1\007\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1" +
    "\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\034\uffa1\041\uffa1\045\u0137\046\uffa1\050\uffa1\001\002" +
    "\000\050\002\uffa2\005\uffa2\006\uffa2\007\uffa2\011\uffa2\012" +
    "\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2" +
    "\021\uffa2\022\uffa2\023\uffa2\034\uffa2\041\uffa2\046\uffa2\050" +
    "\uffa2\001\002\000\050\002\uffc0\005\uffc0\006\uffc0\007\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\034\uffc0\041\uffc0" +
    "\046\uffc0\050\uffc0\001\002\000\004\045\u013a\001\002\000" +
    "\050\002\uff9f\005\uff9f\006\uff9f\007\uff9f\011\uff9f\012\uff9f" +
    "\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021" +
    "\uff9f\022\uff9f\023\uff9f\034\uff9f\041\uff9f\046\uff9f\050\uff9f" +
    "\001\002\000\014\025\103\026\102\027\104\030\101\037" +
    "\u0151\001\002\000\010\037\u0146\046\u0144\047\u0143\001\002" +
    "\000\014\025\055\026\054\027\056\030\052\037\u0141\001" +
    "\002\000\004\037\u013f\001\002\000\004\045\u0140\001\002" +
    "\000\050\002\uff9a\005\uff9a\006\uff9a\007\uff9a\011\uff9a\012" +
    "\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a" +
    "\021\uff9a\022\uff9a\023\uff9a\034\uff9a\041\uff9a\046\uff9a\050" +
    "\uff9a\001\002\000\004\045\u0142\001\002\000\050\002\uff96" +
    "\005\uff96\006\uff96\007\uff96\011\uff96\012\uff96\013\uff96\014" +
    "\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96" +
    "\023\uff96\034\uff96\041\uff96\046\uff96\050\uff96\001\002\000" +
    "\016\025\103\026\102\027\104\030\101\037\u014f\045\u014e" +
    "\001\002\000\016\025\055\026\054\027\056\030\052\037" +
    "\u014c\045\u014b\001\002\000\006\037\u0149\045\u0148\001\002" +
    "\000\004\045\u0147\001\002\000\050\002\uff9b\005\uff9b\006" +
    "\uff9b\007\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b" +
    "\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\034" +
    "\uff9b\041\uff9b\046\uff9b\050\uff9b\001\002\000\050\002\uff9c" +
    "\005\uff9c\006\uff9c\007\uff9c\011\uff9c\012\uff9c\013\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c" +
    "\023\uff9c\034\uff9c\041\uff9c\046\uff9c\050\uff9c\001\002\000" +
    "\052\002\uff9d\005\uff9d\006\uff9d\007\uff9d\011\uff9d\012\uff9d" +
    "\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021" +
    "\uff9d\022\uff9d\023\uff9d\034\uff9d\041\uff9d\045\u014a\046\uff9d" +
    "\050\uff9d\001\002\000\050\002\uff9e\005\uff9e\006\uff9e\007" +
    "\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\034\uff9e\041" +
    "\uff9e\046\uff9e\050\uff9e\001\002\000\050\002\uff97\005\uff97" +
    "\006\uff97\007\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015" +
    "\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97" +
    "\034\uff97\041\uff97\046\uff97\050\uff97\001\002\000\052\002" +
    "\uff98\005\uff98\006\uff98\007\uff98\011\uff98\012\uff98\013\uff98" +
    "\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022" +
    "\uff98\023\uff98\034\uff98\041\uff98\045\u014d\046\uff98\050\uff98" +
    "\001\002\000\050\002\uff99\005\uff99\006\uff99\007\uff99\011" +
    "\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99" +
    "\020\uff99\021\uff99\022\uff99\023\uff99\034\uff99\041\uff99\046" +
    "\uff99\050\uff99\001\002\000\050\002\uff93\005\uff93\006\uff93" +
    "\007\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016" +
    "\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93\034\uff93" +
    "\041\uff93\046\uff93\050\uff93\001\002\000\052\002\uff94\005" +
    "\uff94\006\uff94\007\uff94\011\uff94\012\uff94\013\uff94\014\uff94" +
    "\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023" +
    "\uff94\034\uff94\041\uff94\045\u0150\046\uff94\050\uff94\001\002" +
    "\000\050\002\uff95\005\uff95\006\uff95\007\uff95\011\uff95\012" +
    "\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95" +
    "\021\uff95\022\uff95\023\uff95\034\uff95\041\uff95\046\uff95\050" +
    "\uff95\001\002\000\004\045\u0152\001\002\000\050\002\uff92" +
    "\005\uff92\006\uff92\007\uff92\011\uff92\012\uff92\013\uff92\014" +
    "\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92" +
    "\023\uff92\034\uff92\041\uff92\046\uff92\050\uff92\001\002\000" +
    "\004\002\ufff7\001\002\000\014\025\103\026\102\027\104" +
    "\030\101\037\u016a\001\002\000\010\037\u015e\046\u015d\047" +
    "\u015c\001\002\000\014\025\055\026\054\027\056\030\052" +
    "\037\u015a\001\002\000\004\037\u0158\001\002\000\004\045" +
    "\u0159\001\002\000\050\002\uff4f\005\uff4f\006\uff4f\007\uff4f" +
    "\011\uff4f\012\uff4f\013\uff4f\014\uff4f\015\uff4f\016\uff4f\017" +
    "\uff4f\020\uff4f\021\uff4f\022\uff4f\023\uff4f\034\uff4f\041\uff4f" +
    "\046\uff4f\050\uff4f\001\002\000\004\045\u015b\001\002\000" +
    "\050\002\uff4b\005\uff4b\006\uff4b\007\uff4b\011\uff4b\012\uff4b" +
    "\013\uff4b\014\uff4b\015\uff4b\016\uff4b\017\uff4b\020\uff4b\021" +
    "\uff4b\022\uff4b\023\uff4b\034\uff4b\041\uff4b\046\uff4b\050\uff4b" +
    "\001\002\000\016\025\103\026\102\027\104\030\101\037" +
    "\u0168\045\u0167\001\002\000\016\025\055\026\054\027\056" +
    "\030\052\037\u0165\045\u0164\001\002\000\004\045\u0163\001" +
    "\002\000\006\037\u0161\045\u0160\001\002\000\050\002\uff51" +
    "\005\uff51\006\uff51\007\uff51\011\uff51\012\uff51\013\uff51\014" +
    "\uff51\015\uff51\016\uff51\017\uff51\020\uff51\021\uff51\022\uff51" +
    "\023\uff51\034\uff51\041\uff51\046\uff51\050\uff51\001\002\000" +
    "\052\002\uff52\005\uff52\006\uff52\007\uff52\011\uff52\012\uff52" +
    "\013\uff52\014\uff52\015\uff52\016\uff52\017\uff52\020\uff52\021" +
    "\uff52\022\uff52\023\uff52\034\uff52\041\uff52\045\u0162\046\uff52" +
    "\050\uff52\001\002\000\050\002\uff53\005\uff53\006\uff53\007" +
    "\uff53\011\uff53\012\uff53\013\uff53\014\uff53\015\uff53\016\uff53" +
    "\017\uff53\020\uff53\021\uff53\022\uff53\023\uff53\034\uff53\041" +
    "\uff53\046\uff53\050\uff53\001\002\000\050\002\uff50\005\uff50" +
    "\006\uff50\007\uff50\011\uff50\012\uff50\013\uff50\014\uff50\015" +
    "\uff50\016\uff50\017\uff50\020\uff50\021\uff50\022\uff50\023\uff50" +
    "\034\uff50\041\uff50\046\uff50\050\uff50\001\002\000\050\002" +
    "\uff4c\005\uff4c\006\uff4c\007\uff4c\011\uff4c\012\uff4c\013\uff4c" +
    "\014\uff4c\015\uff4c\016\uff4c\017\uff4c\020\uff4c\021\uff4c\022" +
    "\uff4c\023\uff4c\034\uff4c\041\uff4c\046\uff4c\050\uff4c\001\002" +
    "\000\052\002\uff4d\005\uff4d\006\uff4d\007\uff4d\011\uff4d\012" +
    "\uff4d\013\uff4d\014\uff4d\015\uff4d\016\uff4d\017\uff4d\020\uff4d" +
    "\021\uff4d\022\uff4d\023\uff4d\034\uff4d\041\uff4d\045\u0166\046" +
    "\uff4d\050\uff4d\001\002\000\050\002\uff4e\005\uff4e\006\uff4e" +
    "\007\uff4e\011\uff4e\012\uff4e\013\uff4e\014\uff4e\015\uff4e\016" +
    "\uff4e\017\uff4e\020\uff4e\021\uff4e\022\uff4e\023\uff4e\034\uff4e" +
    "\041\uff4e\046\uff4e\050\uff4e\001\002\000\050\002\uff48\005" +
    "\uff48\006\uff48\007\uff48\011\uff48\012\uff48\013\uff48\014\uff48" +
    "\015\uff48\016\uff48\017\uff48\020\uff48\021\uff48\022\uff48\023" +
    "\uff48\034\uff48\041\uff48\046\uff48\050\uff48\001\002\000\052" +
    "\002\uff49\005\uff49\006\uff49\007\uff49\011\uff49\012\uff49\013" +
    "\uff49\014\uff49\015\uff49\016\uff49\017\uff49\020\uff49\021\uff49" +
    "\022\uff49\023\uff49\034\uff49\041\uff49\045\u0169\046\uff49\050" +
    "\uff49\001\002\000\050\002\uff4a\005\uff4a\006\uff4a\007\uff4a" +
    "\011\uff4a\012\uff4a\013\uff4a\014\uff4a\015\uff4a\016\uff4a\017" +
    "\uff4a\020\uff4a\021\uff4a\022\uff4a\023\uff4a\034\uff4a\041\uff4a" +
    "\046\uff4a\050\uff4a\001\002\000\004\045\u016b\001\002\000" +
    "\050\002\uff47\005\uff47\006\uff47\007\uff47\011\uff47\012\uff47" +
    "\013\uff47\014\uff47\015\uff47\016\uff47\017\uff47\020\uff47\021" +
    "\uff47\022\uff47\023\uff47\034\uff47\041\uff47\046\uff47\050\uff47" +
    "\001\002\000\014\025\103\026\102\027\104\030\101\037" +
    "\u0182\001\002\000\010\037\u0176\046\u0175\047\u0174\001\002" +
    "\000\014\025\055\026\054\027\056\030\052\037\u0172\001" +
    "\002\000\004\037\u0170\001\002\000\004\045\u0171\001\002" +
    "\000\050\002\uff8d\005\uff8d\006\uff8d\007\uff8d\011\uff8d\012" +
    "\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d" +
    "\021\uff8d\022\uff8d\023\uff8d\034\uff8d\041\uff8d\046\uff8d\050" +
    "\uff8d\001\002\000\004\045\u0173\001\002\000\050\002\uff89" +
    "\005\uff89\006\uff89\007\uff89\011\uff89\012\uff89\013\uff89\014" +
    "\uff89\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89" +
    "\023\uff89\034\uff89\041\uff89\046\uff89\050\uff89\001\002\000" +
    "\016\025\103\026\102\027\104\030\101\037\u0180\045\u017f" +
    "\001\002\000\016\025\055\026\054\027\056\030\052\037" +
    "\u017d\045\u017c\001\002\000\004\045\u017b\001\002\000\006" +
    "\037\u0179\045\u0178\001\002\000\050\002\uff8f\005\uff8f\006" +
    "\uff8f\007\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f" +
    "\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\034" +
    "\uff8f\041\uff8f\046\uff8f\050\uff8f\001\002\000\052\002\uff90" +
    "\005\uff90\006\uff90\007\uff90\011\uff90\012\uff90\013\uff90\014" +
    "\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90" +
    "\023\uff90\034\uff90\041\uff90\045\u017a\046\uff90\050\uff90\001" +
    "\002\000\050\002\uff91\005\uff91\006\uff91\007\uff91\011\uff91" +
    "\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91\017\uff91\020" +
    "\uff91\021\uff91\022\uff91\023\uff91\034\uff91\041\uff91\046\uff91" +
    "\050\uff91\001\002\000\050\002\uff8e\005\uff8e\006\uff8e\007" +
    "\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e" +
    "\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\034\uff8e\041" +
    "\uff8e\046\uff8e\050\uff8e\001\002\000\050\002\uff8a\005\uff8a" +
    "\006\uff8a\007\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015" +
    "\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a" +
    "\034\uff8a\041\uff8a\046\uff8a\050\uff8a\001\002\000\052\002" +
    "\uff8b\005\uff8b\006\uff8b\007\uff8b\011\uff8b\012\uff8b\013\uff8b" +
    "\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022" +
    "\uff8b\023\uff8b\034\uff8b\041\uff8b\045\u017e\046\uff8b\050\uff8b" +
    "\001\002\000\050\002\uff8c\005\uff8c\006\uff8c\007\uff8c\011" +
    "\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c" +
    "\020\uff8c\021\uff8c\022\uff8c\023\uff8c\034\uff8c\041\uff8c\046" +
    "\uff8c\050\uff8c\001\002\000\050\002\uff86\005\uff86\006\uff86" +
    "\007\uff86\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016" +
    "\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86\034\uff86" +
    "\041\uff86\046\uff86\050\uff86\001\002\000\052\002\uff87\005" +
    "\uff87\006\uff87\007\uff87\011\uff87\012\uff87\013\uff87\014\uff87" +
    "\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023" +
    "\uff87\034\uff87\041\uff87\045\u0181\046\uff87\050\uff87\001\002" +
    "\000\050\002\uff88\005\uff88\006\uff88\007\uff88\011\uff88\012" +
    "\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88" +
    "\021\uff88\022\uff88\023\uff88\034\uff88\041\uff88\046\uff88\050" +
    "\uff88\001\002\000\004\045\u0183\001\002\000\050\002\uff85" +
    "\005\uff85\006\uff85\007\uff85\011\uff85\012\uff85\013\uff85\014" +
    "\uff85\015\uff85\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85" +
    "\023\uff85\034\uff85\041\uff85\046\uff85\050\uff85\001\002\000" +
    "\006\037\u0188\045\u0187\001\002\000\004\045\u0186\001\002" +
    "\000\050\002\uff56\005\uff56\006\uff56\007\uff56\011\uff56\012" +
    "\uff56\013\uff56\014\uff56\015\uff56\016\uff56\017\uff56\020\uff56" +
    "\021\uff56\022\uff56\023\uff56\034\uff56\041\uff56\046\uff56\050" +
    "\uff56\001\002\000\050\002\uff57\005\uff57\006\uff57\007\uff57" +
    "\011\uff57\012\uff57\013\uff57\014\uff57\015\uff57\016\uff57\017" +
    "\uff57\020\uff57\021\uff57\022\uff57\023\uff57\034\uff57\041\uff57" +
    "\046\uff57\050\uff57\001\002\000\052\002\uff58\005\uff58\006" +
    "\uff58\007\uff58\011\uff58\012\uff58\013\uff58\014\uff58\015\uff58" +
    "\016\uff58\017\uff58\020\uff58\021\uff58\022\uff58\023\uff58\034" +
    "\uff58\041\uff58\045\u0189\046\uff58\050\uff58\001\002\000\050" +
    "\002\uff59\005\uff59\006\uff59\007\uff59\011\uff59\012\uff59\013" +
    "\uff59\014\uff59\015\uff59\016\uff59\017\uff59\020\uff59\021\uff59" +
    "\022\uff59\023\uff59\034\uff59\041\uff59\046\uff59\050\uff59\001" +
    "\002\000\046\005\024\006\033\007\031\011\036\012\041" +
    "\013\040\014\035\015\021\016\014\017\037\020\032\021" +
    "\034\022\026\023\013\034\030\041\u0194\046\022\050\015" +
    "\001\002\000\050\005\024\006\033\007\031\011\036\012" +
    "\041\013\040\014\035\015\021\016\014\017\037\020\032" +
    "\021\034\022\026\023\013\034\030\040\u018e\041\u018d\046" +
    "\022\050\015\001\002\000\046\005\024\006\033\007\031" +
    "\011\036\012\041\013\040\014\035\015\021\016\014\017" +
    "\037\020\032\021\034\022\026\023\013\034\030\041\u0192" +
    "\046\022\050\015\001\002\000\004\002\uffef\001\002\000" +
    "\050\002\ufff0\005\024\006\033\007\031\011\036\012\041" +
    "\013\040\014\035\015\021\016\014\017\037\020\032\021" +
    "\034\022\026\023\013\034\030\041\u0190\046\022\050\015" +
    "\001\002\000\050\002\ufffa\005\024\006\033\007\031\011" +
    "\036\012\041\013\040\014\035\015\021\016\014\017\037" +
    "\020\032\021\034\022\026\023\013\034\030\041\u0191\046" +
    "\022\050\015\001\002\000\004\002\ufff1\001\002\000\004" +
    "\002\ufffb\001\002\000\004\002\ufff9\001\002\000\046\005" +
    "\024\006\033\007\031\011\036\012\041\013\040\014\035" +
    "\015\021\016\014\017\037\020\032\021\034\022\026\023" +
    "\013\034\030\041\u0195\046\022\050\015\001\002\000\004" +
    "\002\uffee\001\002\000\004\002\ufff8\001\002\000\006\037" +
    "\u019d\040\u019c\001\002\000\004\040\u0198\001\002\000\046" +
    "\005\024\006\033\007\031\011\036\012\041\013\040\014" +
    "\035\015\021\016\014\017\037\020\032\021\034\022\026" +
    "\023\013\034\030\041\u019a\046\022\050\015\001\002\000" +
    "\046\005\024\006\033\007\031\011\036\012\041\013\040" +
    "\014\035\015\021\016\014\017\037\020\032\021\034\022" +
    "\026\023\013\034\030\041\u019b\046\022\050\015\001\002" +
    "\000\004\002\ufff2\001\002\000\004\002\ufffc\001\002\000" +
    "\046\005\024\006\033\007\031\011\036\012\041\013\040" +
    "\014\035\015\021\016\014\017\037\020\032\021\034\022" +
    "\026\023\013\034\030\041\u01a6\046\022\050\015\001\002" +
    "\000\050\005\024\006\033\007\031\011\036\012\041\013" +
    "\040\014\035\015\021\016\014\017\037\020\032\021\034" +
    "\022\026\023\013\034\030\040\u01a0\041\u019f\046\022\050" +
    "\015\001\002\000\046\005\024\006\033\007\031\011\036" +
    "\012\041\013\040\014\035\015\021\016\014\017\037\020" +
    "\032\021\034\022\026\023\013\034\030\041\u01a4\046\022" +
    "\050\015\001\002\000\004\002\ufff4\001\002\000\050\002" +
    "\ufff5\005\024\006\033\007\031\011\036\012\041\013\040" +
    "\014\035\015\021\016\014\017\037\020\032\021\034\022" +
    "\026\023\013\034\030\041\u01a2\046\022\050\015\001\002" +
    "\000\050\002\uffff\005\024\006\033\007\031\011\036\012" +
    "\041\013\040\014\035\015\021\016\014\017\037\020\032" +
    "\021\034\022\026\023\013\034\030\041\u01a3\046\022\050" +
    "\015\001\002\000\004\002\ufff6\001\002\000\004\002\000" +
    "\001\002\000\004\002\ufffe\001\002\000\046\005\024\006" +
    "\033\007\031\011\036\012\041\013\040\014\035\015\021" +
    "\016\014\017\037\020\032\021\034\022\026\023\013\034" +
    "\030\041\u01a7\046\022\050\015\001\002\000\004\002\ufff3" +
    "\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a5\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\017\004\016\006" +
    "\022\010\015\011\026\001\001\000\002\001\001\000\004" +
    "\013\u016e\001\001\000\004\013\u0156\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\062\006\063\010\061" +
    "\011\065\001\001\000\004\013\u013d\001\001\000\004\013" +
    "\u0115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\307\001\001\000\002" +
    "\001\001\000\004\013\234\001\001\000\004\013\204\001" +
    "\001\000\002\001\001\000\004\013\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\043\013\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\060\004\016\006\022\010\015" +
    "\011\026\001\001\000\012\004\062\006\063\010\061\011" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\121\004\016\006\022\010\015\011\026\001\001\000\012" +
    "\004\062\006\063\010\061\011\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\126" +
    "\004\016\006\022\010\015\011\026\001\001\000\012\004" +
    "\062\006\063\010\061\011\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\164\004\016\006" +
    "\022\010\015\011\026\001\001\000\012\004\062\006\063" +
    "\010\061\011\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\170\013\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\264\013\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\275\013\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\335\013\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\342\004\016\006\022" +
    "\010\015\011\026\001\001\000\012\004\062\006\063\010" +
    "\061\011\065\001\001\000\004\007\344\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\347\004\016\006" +
    "\022\010\015\011\026\001\001\000\012\004\062\006\063" +
    "\010\061\011\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\353\004\016\006\022\010\015\011\026" +
    "\001\001\000\012\004\062\006\063\010\061\011\065\001" +
    "\001\000\004\007\355\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\360\004\016\006\022\010\015\011" +
    "\026\001\001\000\012\004\062\006\063\010\061\011\065" +
    "\001\001\000\002\001\001\000\004\007\363\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u010a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u012c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\u0118\013\u011b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u0144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u015e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u0176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\u0192\004\016\006\022\010" +
    "\015\011\026\001\001\000\014\003\u018b\004\016\006\022" +
    "\010\015\011\026\001\001\000\012\004\062\006\063\010" +
    "\061\011\065\001\001\000\002\001\001\000\014\003\u018e" +
    "\004\016\006\022\010\015\011\026\001\001\000\012\004" +
    "\062\006\063\010\061\011\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\062\006" +
    "\063\010\061\011\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\u0198\004\016\006\022\010\015\011\026\001\001\000\012" +
    "\004\062\006\063\010\061\011\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\u01a4\004\016\006\022" +
    "\010\015\011\026\001\001\000\014\003\u019d\004\016\006" +
    "\022\010\015\011\026\001\001\000\012\004\062\006\063" +
    "\010\061\011\065\001\001\000\002\001\001\000\014\003" +
    "\u01a0\004\016\006\022\010\015\011\026\001\001\000\012" +
    "\004\062\006\063\010\061\011\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\062" +
    "\006\063\010\061\011\065\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.dowhiles="startloop"+PrincipalCompi.loop+":\n"+PrincipalCompi.sentencia[PrincipalCompi.status];
    PrincipalCompi.dowhiles=PrincipalCompi.dowhiles+"(jt startloop"+PrincipalCompi.loop+":,"+o+", , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.loop++;
    PrincipalCompi.sentencia[PrincipalCompi.status]="";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(o.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el identificador "+o+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("bool")){
                PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el identificador "+o+" no es de tipo bool");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el identificador "+o+" no ha sido inicializado");
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a Op_booleano Parentesis_c P_coma 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.dowhiles="startloop"+PrincipalCompi.loop+":\n"+PrincipalCompi.sentencia[PrincipalCompi.status];
    PrincipalCompi.dowhiles=PrincipalCompi.dowhiles+"(jt startloop"+PrincipalCompi.loop+":,"+o+", , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.loop++;
    PrincipalCompi.sentencia[PrincipalCompi.status]="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.dowhiles="startloop"+PrincipalCompi.loop+":\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.s_bool;
    PrincipalCompi.dowhiles=PrincipalCompi.dowhiles+"(jt startloop"+PrincipalCompi.loop+":,TB"+PrincipalCompi.tempb+", , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.tempb++;
    PrincipalCompi.loop++;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // WHILE ::= While Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.whiles="startloop"+PrincipalCompi.loop+":\n"+"(jf loop"+PrincipalCompi.loop+":,"+o+", , )\n";
    PrincipalCompi.whiles=PrincipalCompi.whiles+PrincipalCompi.sentencia[PrincipalCompi.status]+"(jmp startloop"+PrincipalCompi.loop+":, , , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.loop++;
    PrincipalCompi.s_bool=PrincipalCompi.sentencia[PrincipalCompi.status]="";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(o.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el identificador "+o+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("bool")){
                PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el identificador "+o+" no es de tipo bool");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el identificador "+o+" no ha sido inicializado");
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // WHILE ::= While Parentesis_a Op_booleano Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.whiles="startloop"+PrincipalCompi.loop+":\n"+"(jf loop"+PrincipalCompi.loop+":,"+o+", , )\n";
    PrincipalCompi.whiles=PrincipalCompi.whiles+PrincipalCompi.sentencia[PrincipalCompi.status]+"(jmp startloop"+PrincipalCompi.loop+":, , , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.loop++;
    PrincipalCompi.s_bool=PrincipalCompi.sentencia[PrincipalCompi.status]="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.whiles="startloop"+PrincipalCompi.loop+":\n"+PrincipalCompi.s_bool+"(jf loop"+PrincipalCompi.loop+":,TB"+PrincipalCompi.tempb+", , )\n";
    PrincipalCompi.whiles=PrincipalCompi.whiles+PrincipalCompi.sentencia[PrincipalCompi.status]+"(jmp startloop"+PrincipalCompi.loop+":, , , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.loop++;
    PrincipalCompi.tempb++;
    PrincipalCompi.s_bool=PrincipalCompi.sentencia[PrincipalCompi.status]="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // SENTENCIA_ARITMETICA ::= Identificador Division Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.expresiones.add(i+""+s+""+n);
    Simbolo a=null;
    Simbolo b=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
            if(n.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                b=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null || b==null){
            if(a==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
            }
            if(b==null){
                PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido declarado");
            }
        }else{
            if(!a.getTipo().toString().equals("int") || !b.getTipo().toString().equals("int")){
                if(!a.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                }
                if(!b.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no es de tipo int");
                }
            }else{
                if(a.getValor()==null||b.getValor()==null){
                    if(a.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                    }
                    if(b.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido inicializado");
                    }
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())+Integer.parseInt(b.getValor().toString());
                }
            }
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // SENTENCIA_ARITMETICA ::= Numero Division Identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.expresiones.add(n+""+s+""+i);
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(n.toString())/Integer.parseInt(a.getValor().toString());
                }
            }
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // SENTENCIA_ARITMETICA ::= Identificador Division Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.expresiones.add(i+""+s+""+n);
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())/Integer.parseInt(n.toString());
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // SENTENCIA_ARITMETICA ::= Numero Division Numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.value=Integer.parseInt(n.toString())/Integer.parseInt(i.toString());
    PrincipalCompi.expresiones.add(n+""+s+""+i);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // SENTENCIA_ARITMETICA ::= Identificador Multiplicacion Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.expresiones.add(i+""+s+""+n);
    Simbolo a=null;
    Simbolo b=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
            if(n.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                b=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null || b==null){
            if(a==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
            }
            if(b==null){
                PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido declarado");
            }
        }else{
            if(!a.getTipo().toString().equals("int") || !b.getTipo().toString().equals("int")){
                if(!a.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                }
                if(!b.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no es de tipo int");
                }
            }else{
                if(a.getValor()==null||b.getValor()==null){
                    if(a.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                    }
                    if(b.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido inicializado");
                    }
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())+Integer.parseInt(b.getValor().toString());
                }
            }
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // SENTENCIA_ARITMETICA ::= Numero Multiplicacion Identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.expresiones.add(n+""+s+""+i);
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(n.toString())*Integer.parseInt(a.getValor().toString());
                }
            }
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // SENTENCIA_ARITMETICA ::= Identificador Multiplicacion Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.expresiones.add(i+""+s+""+n);
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())*Integer.parseInt(n.toString());
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // SENTENCIA_ARITMETICA ::= Numero Multiplicacion Numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.value=Integer.parseInt(n.toString())*Integer.parseInt(i.toString());
    PrincipalCompi.expresiones.add(n+""+s+""+i);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // SENTENCIA_ARITMETICA ::= Identificador Resta Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.expresiones.add(i+""+s+""+n);
    Simbolo a=null;
    Simbolo b=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
            if(n.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                b=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null || b==null){
            if(a==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
            }
            if(b==null){
                PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido declarado");
            }
        }else{
            if(!a.getTipo().toString().equals("int") || !b.getTipo().toString().equals("int")){
                if(!a.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                }
                if(!b.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no es de tipo int");
                }
            }else{
                if(a.getValor()==null||b.getValor()==null){
                    if(a.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                    }
                    if(b.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido inicializado");
                    }
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())+Integer.parseInt(b.getValor().toString());
                }
            }
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // SENTENCIA_ARITMETICA ::= Numero Resta Identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.expresiones.add(n+""+s+""+i);
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(n.toString())-Integer.parseInt(a.getValor().toString());
                }
            }
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // SENTENCIA_ARITMETICA ::= Identificador Resta Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.expresiones.add(i+""+s+""+n);
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())-Integer.parseInt(n.toString());
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // SENTENCIA_ARITMETICA ::= Numero Resta Numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.value=Integer.parseInt(n.toString())-Integer.parseInt(i.toString());
    PrincipalCompi.expresiones.add(n+""+s+""+i);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // SENTENCIA_ARITMETICA ::= Identificador Suma Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.expresiones.add(i+""+s+""+n);
    Simbolo a=null;
    Simbolo b=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
            if(n.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                b=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null || b==null){
            if(a==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
            }
            if(b==null){
                PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido declarado");
            }
        }else{
            if(!a.getTipo().toString().equals("int") || !b.getTipo().toString().equals("int")){
                if(!a.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                }
                if(!b.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no es de tipo int");
                }
            }else{
                if(a.getValor()==null||b.getValor()==null){
                    if(a.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                    }
                    if(b.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido inicializado");
                    }
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())+Integer.parseInt(b.getValor().toString());
                }
            }
        }
        

    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // SENTENCIA_ARITMETICA ::= Numero Suma Identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.expresiones.add(n+""+s+""+i);
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(n.toString())+Integer.parseInt(a.getValor().toString());
                }
            }
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // SENTENCIA_ARITMETICA ::= Identificador Suma Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.expresiones.add(i+""+s+""+n);
        Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())+Integer.parseInt(n.toString());
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // SENTENCIA_ARITMETICA ::= Numero Suma Numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.value=Integer.parseInt(n.toString())+Integer.parseInt(i.toString());
    PrincipalCompi.expresiones.add(n+""+s+""+i);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // SENTENCIA_BOOLEANA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // SENTENCIA_BOOLEANA ::= Numero Op_relacional Identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool=PrincipalCompi.s_arit+"("+o+","+n+","+i+",TB"+PrincipalCompi.tempb+")\n";
    PrincipalCompi.temp++;
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("int")){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
        }else{
            if(a.getValor()==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
            }else{
                switch(o.toString()){
                    case ">":PrincipalCompi.valueb=Integer.parseInt(n.toString())>Integer.parseInt(a.getValor().toString());break;
                    case "<":PrincipalCompi.valueb=Integer.parseInt(n.toString())<Integer.parseInt(a.getValor().toString());break;
                    case "==":PrincipalCompi.valueb=Integer.parseInt(n.toString())==Integer.parseInt(a.getValor().toString());break;
                    case "!=": PrincipalCompi.valueb=Integer.parseInt(n.toString())!=Integer.parseInt(a.getValor().toString());break;
                    case ">=": PrincipalCompi.valueb=Integer.parseInt(n.toString())>=Integer.parseInt(a.getValor().toString());break;
                    case "<=": PrincipalCompi.valueb=Integer.parseInt(n.toString())<=Integer.parseInt(a.getValor().toString());break;
                    case ">>": PrincipalCompi.valueb=Integer.parseInt(n.toString())>Integer.parseInt(a.getValor().toString());break;
                    case "<<": PrincipalCompi.valueb=Integer.parseInt(n.toString())<Integer.parseInt(a.getValor().toString());break;
                    default:break;
                }
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool="("+o+","+i+","+n+",TB"+PrincipalCompi.tempb+")\n";
    PrincipalCompi.temp++;
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("int")){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
        }else{
            if(a.getValor()==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
            }else{
                switch(o.toString()){
                    case ">":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(n.toString());break;
                    case "<":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<Integer.parseInt(n.toString());break;
                    case "==":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())==Integer.parseInt(n.toString());break;
                    case "!=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())!=Integer.parseInt(n.toString());break;
                    case ">=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>=Integer.parseInt(n.toString());break;
                    case "<=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<=Integer.parseInt(n.toString());break;
                    case ">>": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(n.toString());break;
                    case "<<": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<Integer.parseInt(n.toString());break;
                    default:break;
                }
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool=PrincipalCompi.s_arit+"("+o+","+i+","+n+",TB"+PrincipalCompi.tempb+")\n";
    Simbolo a=null;
    Simbolo b=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
        if(n.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            b=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null || b==null){
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
        if(b==null){
            PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido declarado");
        }
    }else{
        if(!a.getTipo().toString().equals("int")||!b.getTipo().toString().equals("int")){
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }
            if(!b.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no es de tipo int");
            }
        }else{
            if(a.getValor()==null||b.getValor()==null){
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }
                if(b.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido inicializado");
                }
            }else{
                switch(o.toString()){
                    case ">":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(b.getValor().toString());break;
                    case "<":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<Integer.parseInt(b.getValor().toString());break;
                    case "==":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())==Integer.parseInt(b.getValor().toString());break;
                    case "!=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())!=Integer.parseInt(b.getValor().toString());break;
                    case ">=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>=Integer.parseInt(b.getValor().toString());break;
                    case "<=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<=Integer.parseInt(b.getValor().toString());break;
                    case ">>": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(b.getValor().toString());break;
                    case "<<": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<Integer.parseInt(b.getValor().toString());break;
                    default:break;
                }
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // SENTENCIA_BOOLEANA ::= SENTENCIA_ARITMETICA Op_relacional Identificador 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool=PrincipalCompi.s_arit+"("+o+",TA"+PrincipalCompi.temp+","+i+",TB"+PrincipalCompi.tempb+")\n";
    PrincipalCompi.temp++;
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("int")){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
        }else{
            if(a.getValor()==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
            }else{
                if(PrincipalCompi.value!=null){
                    switch(o.toString()){
                        case ">":PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())>Integer.parseInt(a.getValor().toString());break;
                        case "<":PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())<Integer.parseInt(a.getValor().toString());break;
                        case "==":PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())==Integer.parseInt(a.getValor().toString());break;
                        case "!=": PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())!=Integer.parseInt(a.getValor().toString());break;
                        case ">=": PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())>=Integer.parseInt(a.getValor().toString());break;
                        case "<=": PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())<=Integer.parseInt(a.getValor().toString());break;
                        case ">>": PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())>Integer.parseInt(a.getValor().toString());break;
                        case "<<": PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())<Integer.parseInt(a.getValor().toString());break;
                        default:break;
                    }
                    PrincipalCompi.value=null;
                }
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional SENTENCIA_ARITMETICA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.s_bool=PrincipalCompi.s_arit+"("+o+","+i+",TA"+PrincipalCompi.temp+",TB"+PrincipalCompi.tempb+")\n";
    PrincipalCompi.temp++;
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("int")){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
        }else{
            if(a.getValor()==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
            }else{
                if(PrincipalCompi.value!=null){
                    switch(o.toString()){
                        case ">":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(PrincipalCompi.value.toString());break;
                        case "<":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<Integer.parseInt(PrincipalCompi.value.toString());break;
                        case "==":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())==Integer.parseInt(PrincipalCompi.value.toString());break;
                        case "!=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())!=Integer.parseInt(PrincipalCompi.value.toString());break;
                        case ">=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>=Integer.parseInt(PrincipalCompi.value.toString());break;
                        case "<=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<=Integer.parseInt(PrincipalCompi.value.toString());break;
                        case ">>": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(PrincipalCompi.value.toString());break;
                        case "<<": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(PrincipalCompi.value.toString());break;
                        default:break;
                    }
                    PrincipalCompi.value=null;
                }
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // SENTENCIA_BOOLEANA ::= Op_booleano Op_relacional Identificador 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool="("+o+","+b+","+i+",TB"+PrincipalCompi.tempb+")\n";
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("bool")){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo bool");
        }else{
            if(a.getValor()==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
            }else{
                switch(o.toString()){
                    case "==": PrincipalCompi.valueb=(Boolean.parseBoolean(a.getValor().toString()) && Boolean.parseBoolean(b.toString()));break;
                    case "!=": PrincipalCompi.valueb=(Boolean.parseBoolean(a.getValor().toString()) != Boolean.parseBoolean(b.toString()));break;
                    default:
                        PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el operador "+o+" no es válido");
                        break;
                }
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool="("+o+","+i+","+b+",TB"+PrincipalCompi.tempb+")\n";
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("bool")){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo bool");
        }else{
            if(a.getValor()==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
            }else{
                switch(o.toString()){
                    case "==": PrincipalCompi.valueb=(Boolean.parseBoolean(a.getValor().toString()) && Boolean.parseBoolean(b.toString()));break;
                    case "!=": PrincipalCompi.valueb=(Boolean.parseBoolean(a.getValor().toString()) != Boolean.parseBoolean(b.toString()));break;
                    default:
                        PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el operador "+o+" no es válido");
                        break;
                }
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ELSE ::= Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.elses=PrincipalCompi.sentencia[PrincipalCompi.status];
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // IF ::= If Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA Llave_c ELSE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,"+i+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"(jmp choice"+(PrincipalCompi.choice+1)+":, , , )\n"+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.choice++;
    PrincipalCompi.ifs=PrincipalCompi.ifs+PrincipalCompi.elses+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool=PrincipalCompi.elses="";
    PrincipalCompi.choice++;
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("bool")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo bool");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // IF ::= If Parentesis_a Op_booleano Parentesis_c Llave_a SENTENCIA Llave_c ELSE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,"+o+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"(jmp choice"+(PrincipalCompi.choice+1)+":, , , )\n"+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.tempb++;
    PrincipalCompi.choice++;
    PrincipalCompi.ifs=PrincipalCompi.ifs+PrincipalCompi.elses+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool=PrincipalCompi.elses="";
    PrincipalCompi.choice++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c ELSE 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.s_bool;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,TB"+PrincipalCompi.tempb+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"(jmp choice"+PrincipalCompi.choice+":, , , )\n"+"choice"+(PrincipalCompi.choice+1)+":\n";
    PrincipalCompi.tempb++;
    PrincipalCompi.choice++;
    PrincipalCompi.ifs=PrincipalCompi.ifs+PrincipalCompi.elses+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool=PrincipalCompi.elses="";
    PrincipalCompi.choice++;
    PrincipalCompi.valueb=null;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // IF ::= If Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,"+i+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool="";
    PrincipalCompi.choice++;
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("bool")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo bool");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // IF ::= If Parentesis_a Op_booleano Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,"+o+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool="";
    PrincipalCompi.choice++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.s_bool;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,TB"+PrincipalCompi.tempb+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.tempb++;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool="";
    PrincipalCompi.choice++;
    PrincipalCompi.valueb=null;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // DECLARACION ::= WaitTime Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // DECLARACION ::= WaitTime Parentesis_a Numero P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // DECLARACION ::= WaitTime Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // DECLARACION ::= WaitTime Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    PrincipalCompi.gramatica="DECLARACION ::= WaitTime:a Parentesis_a Numero:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // DECLARACION ::= WaitTime Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // DECLARACION ::= WaitTime Parentesis_a Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // DECLARACION ::= WaitTime Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // DECLARACION ::= WaitTime Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        PrincipalCompi.gramatica="DECLARACION ::= WaitTime:a Parentesis_a Identificador:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // DECLARACION ::= WaitTime SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // DECLARACION ::= WaitTime Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un argumento");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // DECLARACION ::= WaitTime Parentesis_a SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // DECLARACION ::= WaitTime Parentesis_a SENTENCIA_ARITMETICA Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // DECLARACION ::= WaitTime Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    PrincipalCompi.value=null;
    PrincipalCompi.gramatica="DECLARACION ::= WaitTime:a Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // DECLARACION ::= StopLoop 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // DECLARACION ::= StopLoop P_coma 
            {
              Object RESULT =null;
		
    PrincipalCompi.declaracion="(jmp loop"+PrincipalCompi.loop+":, , , )\n";
    PrincipalCompi.gramatica="DECLARACION ::= StopLoop P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // DECLARACION ::= HitToTheRight Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // DECLARACION ::= HitToTheRight Parentesis_a P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // DECLARACION ::= HitToTheRight Parentesis_a Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // DECLARACION ::= HitToTheRight Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.declaracion="("+a+", , , )\n";
    PrincipalCompi.gramatica="DECLARACION ::= HitToTheRight:a Parentesis_a Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // DECLARACION ::= HitToTheLeft Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // DECLARACION ::= HitToTheLeft Parentesis_a P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // DECLARACION ::= HitToTheLeft Parentesis_a Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // DECLARACION ::= HitToTheLeft Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.declaracion="("+a+", , , )\n";
    PrincipalCompi.gramatica="DECLARACION ::= HitToTheLeft:a Parentesis_a Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // DECLARACION ::= SpinBallRight Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // DECLARACION ::= SpinBallRight Parentesis_a Numero P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // DECLARACION ::= SpinBallRight Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // DECLARACION ::= SpinBallRight Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    PrincipalCompi.gramatica="DECLARACION ::= SpinBallRight:a Parentesis_a Numero:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // DECLARACION ::= SpinBallRight Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // DECLARACION ::= SpinBallRight Parentesis_a Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // DECLARACION ::= SpinBallRight Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // DECLARACION ::= SpinBallRight Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        PrincipalCompi.gramatica="DECLARACION ::= SpinBallRight:a Parentesis_a Identificador:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // DECLARACION ::= SpinBallRight SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // DECLARACION ::= SpinBallRight Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un argumento");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // DECLARACION ::= SpinBallRight Parentesis_a SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // DECLARACION ::= SpinBallRight Parentesis_a SENTENCIA_ARITMETICA Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // DECLARACION ::= SpinBallRight Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    PrincipalCompi.value=null;
    PrincipalCompi.gramatica="DECLARACION ::= SpinBallRight:a Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DECLARACION ::= SpinBallLeft Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // DECLARACION ::= SpinBallLeft Parentesis_a Numero P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DECLARACION ::= SpinBallLeft Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DECLARACION ::= SpinBallLeft Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    PrincipalCompi.gramatica="DECLARACION ::= SpinBallLeft:a Parentesis_a Numero:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DECLARACION ::= SpinBallLeft Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // DECLARACION ::= SpinBallLeft Parentesis_a Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DECLARACION ::= SpinBallLeft Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // DECLARACION ::= SpinBallLeft Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        PrincipalCompi.gramatica="DECLARACION ::= SpinBallLeft:a Parentesis_a Identificador:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DECLARACION ::= SpinBallLeft SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DECLARACION ::= SpinBallLeft Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un argumento");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DECLARACION ::= SpinBallLeft Parentesis_a SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DECLARACION ::= SpinBallLeft Parentesis_a SENTENCIA_ARITMETICA Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DECLARACION ::= SpinBallLeft Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    PrincipalCompi.value=null;
    PrincipalCompi.gramatica="DECLARACION ::= SpinBallLeft:a Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DECLARACION ::= MoveBackCrane Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DECLARACION ::= MoveBackCrane Parentesis_a Numero P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DECLARACION ::= MoveBackCrane Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DECLARACION ::= MoveBackCrane Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    PrincipalCompi.gramatica="DECLARACION ::= MoveBackCrane:a Parentesis_a Numero:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DECLARACION ::= MoveBackCrane Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DECLARACION ::= MoveBackCrane Parentesis_a Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DECLARACION ::= MoveBackCrane Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DECLARACION ::= MoveBackCrane Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        PrincipalCompi.gramatica="DECLARACION ::= MoveBackCrane:a Parentesis_a Identificador:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DECLARACION ::= MoveBackCrane SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DECLARACION ::= MoveBackCrane Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un argumento");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DECLARACION ::= MoveBackCrane Parentesis_a SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DECLARACION ::= MoveBackCrane Parentesis_a SENTENCIA_ARITMETICA Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DECLARACION ::= MoveBackCrane Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    PrincipalCompi.value=null;
    PrincipalCompi.gramatica="DECLARACION ::= MoveBackCrane:a Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DECLARACION ::= MoveFowardCrane Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DECLARACION ::= MoveFowardCrane Parentesis_a Numero P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DECLARACION ::= MoveFowardCrane Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DECLARACION ::= MoveFowardCrane Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    PrincipalCompi.gramatica="DECLARACION ::= MoveFowardCrane:a Parentesis_a Numero:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DECLARACION ::= MoveFowardCrane Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DECLARACION ::= MoveFowardCrane Parentesis_a Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DECLARACION ::= MoveFowardCrane Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DECLARACION ::= MoveFowardCrane Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        PrincipalCompi.gramatica="DECLARACION ::= MoveFowardCrane:a Parentesis_a Identificador:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECLARACION ::= MoveFowardCrane SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DECLARACION ::= MoveFowardCrane Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un argumento");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DECLARACION ::= MoveFowardCrane Parentesis_a SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DECLARACION ::= MoveFowardCrane Parentesis_a SENTENCIA_ARITMETICA Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DECLARACION ::= MoveFowardCrane Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    PrincipalCompi.value=null;
    PrincipalCompi.gramatica="DECLARACION ::= MoveFowardCrane:a Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECLARACION ::= SpinCraneRight Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLARACION ::= SpinCraneRight Parentesis_a Numero P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARACION ::= SpinCraneRight Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECLARACION ::= SpinCraneRight Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    PrincipalCompi.gramatica="DECLARACION ::= SpinCraneRight:a Parentesis_a Numero:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECLARACION ::= SpinCraneRight Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECLARACION ::= SpinCraneRight Parentesis_a Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECLARACION ::= SpinCraneRight Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DECLARACION ::= SpinCraneRight Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        PrincipalCompi.gramatica="DECLARACION ::= SpinCraneRight:a Parentesis_a Identificador:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DECLARACION ::= SpinCraneRight SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DECLARACION ::= SpinCraneRight Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un argumento");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DECLARACION ::= SpinCraneRight Parentesis_a SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLARACION ::= SpinCraneRight Parentesis_a SENTENCIA_ARITMETICA Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECLARACION ::= SpinCraneRight Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    PrincipalCompi.value=null;
    PrincipalCompi.gramatica="DECLARACION ::= SpinCraneRight:a Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARACION ::= Identificador Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECLARACION ::= Identificador Parentesis_a Numero P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECLARACION ::= Identificador Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECLARACION ::= Identificador Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLARACION ::= SpinCraneLeft Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLARACION ::= SpinCraneLeft Parentesis_a Numero P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLARACION ::= SpinCraneLeft Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARACION ::= SpinCraneLeft Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    PrincipalCompi.gramatica="DECLARACION ::= SpinCraneLeft:a Parentesis_a Numero:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION ::= Identificador Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION ::= Identificador Parentesis_a Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARACION ::= Identificador Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION ::= Identificador Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION ::= SpinCraneLeft Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION ::= SpinCraneLeft Parentesis_a Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION ::= SpinCraneLeft Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION ::= SpinCraneLeft Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        PrincipalCompi.gramatica="DECLARACION ::= SpinCraneLeft:a Parentesis_a Identificador:i Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION ::= Identificador SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= Identificador Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= Identificador Parentesis_a SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= Identificador Parentesis_a SENTENCIA_ARITMETICA Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= Identificador Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; método desconocido");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= SpinCraneLeft SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de apertura");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= SpinCraneLeft Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un argumento");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= SpinCraneLeft Parentesis_a SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un paréntesis de cierre");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= SpinCraneLeft Parentesis_a SENTENCIA_ARITMETICA Parentesis_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= SpinCraneLeft Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    PrincipalCompi.value=null;
    PrincipalCompi.gramatica="DECLARACION ::= SpinCraneLeft:a Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= Identificador Op_booleano P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un signo de igual");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= Identificador Igual Op_booleano 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= Identificador Igual Op_booleano P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+g+","+o+", ,"+i+")\n";
    int num=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("bool")){
                    temp.setValor(o);
                    num++;
                    PrincipalCompi.gramatica="DECLARACION ::= Identificador:i Igual:g Op_booleano:o P_coma\n\n"+PrincipalCompi.gramatica;
                    break;
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo bool");
                    num++;
                    break;
                }
            }
        }
        if(num==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= Bool Igual Op_booleano P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(tright+1)+"; falta la declaración de un identificador");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= Bool Identificador Op_booleano P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un signo de igual");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= Bool Identificador Igual Op_booleano 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= Bool Identificador Igual Op_booleano P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n("+g+","+o+", ,"+i+")\n";
    int num=0;
    Simbolo s=new Simbolo(i,t,o);
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.tabla_simbolos.add(s);
        PrincipalCompi.gramatica="DECLARACION ::= Bool:t Identificador:i Igual:g Op_booleano:o P_coma\n\n"+PrincipalCompi.gramatica;
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
                num++;
                break;
            }
        }
        if(num==0){
            PrincipalCompi.tabla_simbolos.add(s);
            PrincipalCompi.gramatica="DECLARACION ::= Bool:t Identificador:i Igual:g Op_booleano:o P_coma\n\n"+PrincipalCompi.gramatica;
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= Identificador Numero P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un signo de igual");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= Identificador Igual Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+g+","+n+", ,"+i+")\n";
    int num=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    temp.setValor(n);
                    num++;
                    PrincipalCompi.gramatica="DECLARACION ::= Identificador:i Igual:g Numero:n P_coma\n\n"+PrincipalCompi.gramatica;
                    break;
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo entero");
                    num++;
                    break;
                }
            }
        }
        if(num==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Int Igual Numero P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(tright+1)+"; falta la declaración de un identificador");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Int Identificador Numero P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un signo de igual");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Int Identificador Igual Numero 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n("+g+","+n+", ,"+i+")\n";
    int num=0;
    Simbolo s=new Simbolo(i,t,n);
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.tabla_simbolos.add(s);
        PrincipalCompi.gramatica="DECLARACION ::= Int:t Identificador:i Igual:g Numero:n P_coma\n\n"+PrincipalCompi.gramatica;
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
                num++;
                break;
            }
        }
        if(num==0){
            PrincipalCompi.tabla_simbolos.add(s);
            PrincipalCompi.gramatica="DECLARACION ::= Int:t Identificador:i Igual:g Numero:n P_coma\n\n"+PrincipalCompi.gramatica;
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Op_incremento P_coma 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(oright+1)+"; falta un identificador declarado");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Identificador Op_incremento 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Identificador Op_incremento P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+o+", , ,"+i+")\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        int num=Integer.parseInt(temp.getValor().toString());
                        num++;
                        temp.setValor(num);
                        n++;
                        PrincipalCompi.gramatica="DECLARACION ::= Identificador:i Op_incremento:o P_coma\n\n"+PrincipalCompi.gramatica;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Identificador Igual SENTENCIA_BOOLEANA P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_bool+"("+g+",TB"+PrincipalCompi.temp+", ,"+i+")\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_bool="";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(a.getTipo().toString().equals("bool")){
                a.setValor(PrincipalCompi.valueb);
                PrincipalCompi.gramatica="DECLARACION ::= Identificador:i Igual:g SENTENCIA_BOOLEANA P_coma\n\n"+PrincipalCompi.gramatica;
                PrincipalCompi.valueb=null;
            }else{
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo bool");
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Bool Igual SENTENCIA_BOOLEANA P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(tright+1)+"; falta la declaración de un identificador");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Bool Identificador Igual SENTENCIA_BOOLEANA P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n"+PrincipalCompi.s_bool+"("+g+",TB"+PrincipalCompi.temp+", ,"+i+")\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_bool="";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            a=new Simbolo(i,t,PrincipalCompi.valueb);
            PrincipalCompi.tabla_simbolos.add(a);
            PrincipalCompi.gramatica="DECLARACION ::= Bool:t Identificador:i Igual:g SENTENCIA_BOOLEANA P_coma\n\n"+PrincipalCompi.gramatica;
            PrincipalCompi.valueb=null;
        }else{
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Identificador SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un signo de igual");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Identificador Igual SENTENCIA_ARITMETICA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Identificador Igual SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+g+",TA"+PrincipalCompi.temp+", ,"+i+")\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(a.getTipo().toString().equals("int")){
                a.setValor(PrincipalCompi.value);
                PrincipalCompi.gramatica="DECLARACION ::= Identificador:i Igual:g SENTENCIA_ARITMETICA P_coma\n\n"+PrincipalCompi.gramatica;
                PrincipalCompi.value=null;
            }else{
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Int Igual SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(tright+1)+"; falta la declaración de un identificador");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Int Identificador Igual SENTENCIA_ARITMETICA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Int Identificador Igual SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n"+PrincipalCompi.s_arit+"("+g+",TA"+PrincipalCompi.temp+", ,"+i+")\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            a=new Simbolo(i,t,PrincipalCompi.value);
            PrincipalCompi.tabla_simbolos.add(a);
            PrincipalCompi.value=null;
            PrincipalCompi.gramatica="DECLARACION ::= Int:t Identificador:i Igual:g SENTENCIA_ARITMETICA P_coma\n\n"+PrincipalCompi.gramatica;
        }else{
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Identificador Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un signo de igual");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Identificador Igual Identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+g+","+b+", ,"+a+")";
    int n=0;
    Simbolo s1=null;
    Simbolo s2=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(aright+1)+"; el identificador "+a+" y "+b+" no han sido declarados");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            Simbolo temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(a)){
                s1=temp;
                for(int at=0;at<PrincipalCompi.tabla_simbolos.size();at++){
                    Simbolo temp2=PrincipalCompi.tabla_simbolos.get(at);
                    if(temp2.getNombre().equals(b)){
                        s2=temp2;
                        if(temp.getTipo().equals(temp2.getTipo())){
                            if(temp2.getValor()==null){
                                n++;
                                PrincipalCompi.err.add("Error semántico linea:"+(bright+1)+"; el identificador "+b+" no ha sido inicializado");
                                break;
                            }else{
                                n++;
                                Object v=temp2.getValor();
                                temp.setValor(v);
                                PrincipalCompi.gramatica="DECLARACION ::= Identificador:a Igual:g Identificador:b P_coma\n\n"+PrincipalCompi.gramatica;
                                break;
                            }
                        }else{
                            n++;
                            PrincipalCompi.err.add("Error semántico linea:"+(aright+1)+"; los tipos de dato de "+a+" y "+b+" son incompatibles");
                            break;
                        }
                    }
                }
            }
        }
        if(n==0){
            if(s1==null){
                PrincipalCompi.err.add("Error semántico linea:"+(aright+1)+"; el identificador "+a+" no ha sido declarado");
            }
            if(s2==null){
                PrincipalCompi.err.add("Error semántico linea:"+(bright+1)+"; el identificador "+b+" no ha sido declarado");
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Bool Igual Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(tright+1)+"; falta la declaración de un identificador");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Bool Identificador Igual Identificador 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Bool Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n("+g+","+l+", ,"+i+")\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el identificador "+l+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                n++;
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
                break;
            }else if(temp.getNombre().equals(l)){
                if(temp.getTipo().equals(t)){
                    if(temp.getValor()==null){
                        n++;
                        PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el identificador "+l+" no ha sido inicializado");
                        break;
                    }else{
                        n++;
                        Object v=temp.getValor();
                        Simbolo s=new Simbolo(i,t,v);
                        PrincipalCompi.tabla_simbolos.add(s);
                        PrincipalCompi.gramatica="DECLARACION ::= Bool:t Identificador:i Igual:g Identificador:l P_coma\n\n"+PrincipalCompi.gramatica;
                        break;
                    }
                }else{
                    n++;
                    PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el valor de "+l+" no es de tipo bool");
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el identificador "+l+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Int Igual Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(tright+1)+"; falta la declaración de un identificador");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Int Identificador Igual P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un valor entero o identificador tipo int para asignar");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Int Identificador Igual Identificador 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Int Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n("+g+","+l+", ,"+i+")\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el identificador "+l+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                n++;
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
                break;
            }else if(temp.getNombre().equals(l)){
                if(temp.getTipo().equals(t)){
                    if(temp.getValor()==null){
                        n++;
                        PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el identificador "+l+" no ha sido inicializado");
                        break;
                    }else{
                        n++;
                        Object v=temp.getValor();
                        Simbolo s=new Simbolo(i,t,v);
                        PrincipalCompi.tabla_simbolos.add(s);
                        PrincipalCompi.gramatica="DECLARACION ::= Int:t Identificador:i Igual:g Identificador:l P_coma\n\n"+PrincipalCompi.gramatica;
                        break;
                    }
                }else{
                    n++;
                    PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el valor de "+l+" no es de tipo int");
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el identificador "+l+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Bool P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(tright+1)+"; falta la declaración de un identificador");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Bool Identificador 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Bool Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n";
    int n=0;
    Simbolo temp=null;
    Simbolo s=new Simbolo(i,t,null);
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.tabla_simbolos.add(s);
        PrincipalCompi.gramatica="DECLARACION ::= Bool:t Identificador:i P_coma\n\n"+PrincipalCompi.gramatica;
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
                PrincipalCompi.gramatica="DECLARACION ::= Bool:t >>Identificador:i<< P_coma\n\n"+PrincipalCompi.gramatica;
                n++;
                break;
            }
        }
        if(n==0){
            PrincipalCompi.tabla_simbolos.add(s);
            PrincipalCompi.gramatica="DECLARACION ::= Bool:t Identificador:i P_coma\n\n"+PrincipalCompi.gramatica;
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Identificador P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta la asignación de un tipo de dato");
    PrincipalCompi.gramatica="DECLARACION ::= >>Int:t<< Identificador:i P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Int P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(tright+1)+"; falta la declaración de un identificador");
    PrincipalCompi.gramatica="DECLARACION ::= Int:t >>Identificador:i<< P_coma\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Int Identificador 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    PrincipalCompi.gramatica="DECLARACION ::= Int:t Identificador:i >>P_coma<<\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n";
    int n=0;
    Simbolo temp=null;
    Simbolo s=new Simbolo(i,t,null);
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.tabla_simbolos.add(s);
        PrincipalCompi.gramatica="DECLARACION ::= Int:t Identificador:i P_coma\n\n"+PrincipalCompi.gramatica;
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
                PrincipalCompi.gramatica="DECLARACION ::= Int:t >>Identificador:i<< P_coma\n\n"+PrincipalCompi.gramatica;
                n++;
                break;
            }
        }
        if(n==0){
            PrincipalCompi.tabla_simbolos.add(s);
            PrincipalCompi.gramatica="DECLARACION ::= Int:t Identificador:i P_coma\n\n"+PrincipalCompi.gramatica;
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;
		
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.dowhiles;
    PrincipalCompi.dowhiles="";
    PrincipalCompi.status++;
    PrincipalCompi.gramatica="SENTENCIA ::= DO_WHILE\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.dowhiles;
    PrincipalCompi.dowhiles="";
    PrincipalCompi.status++;
    PrincipalCompi.gramatica="SENTENCIA ::= SENTENCIA DO_WHILE\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;
		
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.whiles;
    PrincipalCompi.whiles="";
    PrincipalCompi.status++;
    PrincipalCompi.gramatica="SENTENCIA ::= WHILE\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.whiles;
    PrincipalCompi.whiles="";
    PrincipalCompi.status++;
    PrincipalCompi.gramatica="SENTENCIA ::= SENTENCIA WHILE\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= IF 
            {
              Object RESULT =null;
		
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.ifs;
    PrincipalCompi.ifs="";
    PrincipalCompi.status++;
    PrincipalCompi.gramatica="SENTENCIA ::= IF\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.ifs;
    PrincipalCompi.ifs="";
    PrincipalCompi.status++;
    PrincipalCompi.gramatica="SENTENCIA ::= SENTENCIA IF\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;
		
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.declaracion;
    PrincipalCompi.declaracion="";
    PrincipalCompi.status++;
    PrincipalCompi.gramatica="SENTENCIA ::= DECLARACION\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.declaracion;
    PrincipalCompi.declaracion="";
    PrincipalCompi.status++;
    PrincipalCompi.gramatica="SENTENCIA ::= SENTENCIA DECLARACION\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INICIO ::= Identificador Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; comienzo de programa incorrecto");
    PrincipalCompi.gramatica="INICIO ::= >>Start<< Parentesis_a Parentesis_c Llave_a Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INICIO ::= Identificador Parentesis_a Llave_a Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; comienzo de programa incorrecto");
    PrincipalCompi.gramatica="INICIO ::= >>Start<< Parentesis_a Parentesis_c Llave_a Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INICIO ::= Identificador Parentesis_a Parentesis_c Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; comienzo de programa incorrecto");
    PrincipalCompi.gramatica="INICIO ::= >>Start<< Parentesis_a Parentesis_c Llave_a Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INICIO ::= Identificador Parentesis_a Parentesis_c Llave_a 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; comienzo de programa incorrecto");
    PrincipalCompi.gramatica="INICIO ::= >>Start<< Parentesis_a Parentesis_c Llave_a Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INICIO ::= Identificador Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; comienzo de programa incorrecto");
    PrincipalCompi.gramatica="INICIO ::= >>Start<< Parentesis_a Parentesis_c Llave_a Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INICIO ::= Start Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un paréntesis de apertura");
    PrincipalCompi.gramatica="INICIO ::= Start >>Parentesis_a<< Parentesis_c Llave_a Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INICIO ::= Start Parentesis_a Llave_a Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un paréntesis de cierre");
    PrincipalCompi.gramatica="INICIO ::= Start Parentesis_a >>Parentesis_c<< Llave_a Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INICIO ::= Start Parentesis_a Parentesis_c Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta una llave de apertura");
    PrincipalCompi.gramatica="INICIO ::= Start Parentesis_a Parentesis_c >>Llave_a<< Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= Start Parentesis_a Parentesis_c Llave_a 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta una llave de cierre");
    PrincipalCompi.gramatica="INICIO ::= Start Parentesis_a Parentesis_c Llave_a >>Llave_c<<\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= Start Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		
    PrincipalCompi.gramatica="INICIO ::= Start Parentesis_a Parentesis_c Llave_a Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= Identificador Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; comienzo de programa incorrecto");
    PrincipalCompi.gramatica="INICIO ::= >>Start<< Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= Identificador Parentesis_a Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; comienzo de programa incorrecto");
    PrincipalCompi.gramatica="INICIO ::= >>Start<< Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= Identificador Parentesis_a Parentesis_c SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; comienzo de programa incorrecto");
    PrincipalCompi.gramatica="INICIO ::= >>Start<< Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; comienzo de programa incorrecto");
    PrincipalCompi.gramatica="INICIO ::= >>Start<< Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; comienzo de programa incorrecto");
    PrincipalCompi.gramatica="INICIO ::= >>Start<< Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Start Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un paréntesis de apertura");
    PrincipalCompi.gramatica="INICIO ::= Start >>Parentesis_a<< Parentesis_c Llave_a SENTENCIA Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Start Parentesis_a Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un paréntesis de cierre");
    PrincipalCompi.gramatica="INICIO ::= Start Parentesis_a >>Parentesis_c<< Llave_a SENTENCIA Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Start Parentesis_a Parentesis_c SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta una llave de apertura");
    PrincipalCompi.gramatica="INICIO ::= Start Parentesis_a Parentesis_c >>Llave_a<< SENTENCIA Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Start Parentesis_a Parentesis_c Llave_a SENTENCIA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta una llave de cierre");
    PrincipalCompi.gramatica="INICIO ::= Start Parentesis_a Parentesis_c Llave_a SENTENCIA >>Llave_c<<\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Start Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.ci=PrincipalCompi.sentencia[PrincipalCompi.status];
    PrincipalCompi.gramatica="INICIO ::= Start Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c\n\n"+PrincipalCompi.gramatica;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

