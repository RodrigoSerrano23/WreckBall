
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 04 08:45:27 MST 2019
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 04 08:45:27 MST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\002\010\000\002\002" +
    "\007\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\004\005\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\005\000\002\004\004" +
    "\000\002\004\004\000\002\004\007\000\002\004\006\000" +
    "\002\004\006\000\002\004\006\000\002\004\007\000\002" +
    "\004\006\000\002\004\006\000\002\004\006\000\002\004" +
    "\005\000\002\004\005\000\002\004\007\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\005\000" +
    "\002\004\005\000\002\004\007\000\002\004\006\000\002" +
    "\004\005\000\002\004\007\000\002\004\006\000\002\004" +
    "\007\000\002\004\006\000\002\004\007\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\007\000\002\004\007\000\002\004\007\000\002\004" +
    "\007\000\002\004\007\000\002\004\007\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\004\007\000" +
    "\002\004\006\000\002\004\006\000\002\004\004\000\002" +
    "\004\007\000\002\004\007\000\002\004\007\000\002\006" +
    "\011\000\002\006\011\000\002\006\011\000\002\006\012" +
    "\000\002\006\012\000\002\006\012\000\002\007\006\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\002\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\010\011\000\002\010\011\000" +
    "\002\010\011\000\002\011\013\000\002\011\013\000\002" +
    "\011\013\000\002\012\011\000\002\015\012\000\002\015" +
    "\011\000\002\005\005\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\004\045\004\001\002\000\004\037\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\040\010\001\002\000\004\041\011\001\002\000" +
    "\046\005\024\006\032\007\030\011\035\012\040\013\014" +
    "\014\037\015\034\016\021\017\012\020\036\021\031\022" +
    "\033\023\026\024\013\042\025\047\022\051\015\001\002" +
    "\000\004\037\u0110\001\002\000\004\037\u010d\001\002\000" +
    "\004\037\362\001\002\000\004\037\350\001\002\000\046" +
    "\005\ufff9\006\ufff9\007\ufff9\011\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\042\ufff9\047\ufff9\051\ufff9\001\002\000" +
    "\046\005\ufffd\006\ufffd\007\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022" +
    "\ufffd\023\ufffd\024\ufffd\042\ufffd\047\ufffd\051\ufffd\001\002" +
    "\000\046\005\024\006\032\007\030\011\035\012\040\013" +
    "\014\014\037\015\034\016\021\017\012\020\036\021\031" +
    "\022\033\023\026\024\013\042\347\047\022\051\015\001" +
    "\002\000\004\037\335\001\002\000\014\025\316\035\314" +
    "\046\313\047\315\050\275\001\002\000\046\005\ufffb\006" +
    "\ufffb\007\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024" +
    "\ufffb\042\ufffb\047\ufffb\051\ufffb\001\002\000\010\025\274" +
    "\046\272\047\273\001\002\000\004\002\uffff\001\002\000" +
    "\004\037\267\001\002\000\046\005\ufff7\006\ufff7\007\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\042\ufff7" +
    "\047\ufff7\051\ufff7\001\002\000\004\037\240\001\002\000" +
    "\004\037\226\001\002\000\010\025\213\046\211\047\212" +
    "\001\002\000\004\037\177\001\002\000\004\037\165\001" +
    "\002\000\004\041\147\001\002\000\004\037\135\001\002" +
    "\000\004\046\134\001\002\000\004\037\042\001\002\000" +
    "\046\005\ufff5\006\ufff5\007\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\042\ufff5\047\ufff5\051\ufff5\001\002" +
    "\000\012\036\045\040\uffb0\047\046\050\043\001\002\000" +
    "\014\026\104\027\103\030\105\031\102\033\132\001\002" +
    "\000\004\040\126\001\002\000\006\033\120\040\121\001" +
    "\002\000\016\026\055\027\054\030\056\031\052\033\053" +
    "\040\057\001\002\000\004\033\050\001\002\000\004\047" +
    "\051\001\002\000\006\040\uffb4\046\uffb4\001\002\000\006" +
    "\047\117\050\116\001\002\000\010\036\077\047\100\050" +
    "\076\001\002\000\006\047\075\050\074\001\002\000\006" +
    "\047\073\050\072\001\002\000\006\047\071\050\070\001" +
    "\002\000\004\041\060\001\002\000\044\005\024\006\032" +
    "\007\030\011\035\012\040\013\014\014\037\015\034\016" +
    "\021\017\012\020\036\021\031\022\033\023\026\024\013" +
    "\047\022\051\015\001\002\000\046\005\024\006\032\007" +
    "\030\011\035\012\040\013\014\014\037\015\034\016\021" +
    "\017\012\020\036\021\031\022\033\023\026\024\013\042" +
    "\065\047\022\051\015\001\002\000\046\005\ufffa\006\ufffa" +
    "\007\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa" +
    "\042\ufffa\047\ufffa\051\ufffa\001\002\000\046\005\ufffe\006" +
    "\ufffe\007\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe" +
    "\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024" +
    "\ufffe\042\ufffe\047\ufffe\051\ufffe\001\002\000\046\005\ufffc" +
    "\006\ufffc\007\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\042\ufffc\047\ufffc\051\ufffc\001\002\000\046\005" +
    "\uff9d\006\uff9d\007\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d" +
    "\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023" +
    "\uff9d\024\uff9d\042\uff9d\047\uff9d\051\uff9d\001\002\000\046" +
    "\005\ufff8\006\ufff8\007\ufff8\011\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\042\ufff8\047\ufff8\051\ufff8\001\002\000" +
    "\046\005\ufff6\006\ufff6\007\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\042\ufff6\047\ufff6\051\ufff6\001\002" +
    "\000\054\005\uffa6\006\uffa6\007\uffa6\011\uffa6\012\uffa6\013" +
    "\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\022\uffa6\023\uffa6\024\uffa6\033\uffa6\040\uffa6\042\uffa6\046" +
    "\uffa6\047\uffa6\051\uffa6\001\002\000\054\005\uffa4\006\uffa4" +
    "\007\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016" +
    "\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4" +
    "\033\uffa4\040\uffa4\042\uffa4\046\uffa4\047\uffa4\051\uffa4\001" +
    "\002\000\054\005\uffae\006\uffae\007\uffae\011\uffae\012\uffae" +
    "\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021" +
    "\uffae\022\uffae\023\uffae\024\uffae\033\uffae\040\uffae\042\uffae" +
    "\046\uffae\047\uffae\051\uffae\001\002\000\054\005\uffac\006" +
    "\uffac\007\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac" +
    "\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024" +
    "\uffac\033\uffac\040\uffac\042\uffac\046\uffac\047\uffac\051\uffac" +
    "\001\002\000\054\005\uffaa\006\uffaa\007\uffaa\011\uffaa\012" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\024\uffaa\033\uffaa\040\uffaa\042" +
    "\uffaa\046\uffaa\047\uffaa\051\uffaa\001\002\000\054\005\uffa8" +
    "\006\uffa8\007\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\033\uffa8\040\uffa8\042\uffa8\046\uffa8\047\uffa8\051" +
    "\uffa8\001\002\000\016\026\104\027\103\030\105\031\102" +
    "\040\uffb2\046\uffb2\001\002\000\006\040\uffb7\046\uffb7\001" +
    "\002\000\016\026\055\027\054\030\056\031\052\040\uffb3" +
    "\046\uffb3\001\002\000\006\040\uffb5\046\uffb5\001\002\000" +
    "\006\047\115\050\114\001\002\000\006\047\113\050\112" +
    "\001\002\000\006\047\111\050\110\001\002\000\006\047" +
    "\107\050\106\001\002\000\054\005\uffa7\006\uffa7\007\uffa7" +
    "\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\033\uffa7" +
    "\040\uffa7\042\uffa7\046\uffa7\047\uffa7\051\uffa7\001\002\000" +
    "\054\005\uffa5\006\uffa5\007\uffa5\011\uffa5\012\uffa5\013\uffa5" +
    "\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\024\uffa5\033\uffa5\040\uffa5\042\uffa5\046\uffa5" +
    "\047\uffa5\051\uffa5\001\002\000\054\005\uffaf\006\uffaf\007" +
    "\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf" +
    "\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\033" +
    "\uffaf\040\uffaf\042\uffaf\046\uffaf\047\uffaf\051\uffaf\001\002" +
    "\000\054\005\uffad\006\uffad\007\uffad\011\uffad\012\uffad\013" +
    "\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad" +
    "\022\uffad\023\uffad\024\uffad\033\uffad\040\uffad\042\uffad\046" +
    "\uffad\047\uffad\051\uffad\001\002\000\054\005\uffab\006\uffab" +
    "\007\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016" +
    "\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab" +
    "\033\uffab\040\uffab\042\uffab\046\uffab\047\uffab\051\uffab\001" +
    "\002\000\054\005\uffa9\006\uffa9\007\uffa9\011\uffa9\012\uffa9" +
    "\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021" +
    "\uffa9\022\uffa9\023\uffa9\024\uffa9\033\uffa9\040\uffa9\042\uffa9" +
    "\046\uffa9\047\uffa9\051\uffa9\001\002\000\054\005\uffa3\006" +
    "\uffa3\007\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3" +
    "\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024" +
    "\uffa3\033\uffa3\040\uffa3\042\uffa3\046\uffa3\047\uffa3\051\uffa3" +
    "\001\002\000\054\005\uffa1\006\uffa1\007\uffa1\011\uffa1\012" +
    "\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1" +
    "\021\uffa1\022\uffa1\023\uffa1\024\uffa1\033\uffa1\040\uffa1\042" +
    "\uffa1\046\uffa1\047\uffa1\051\uffa1\001\002\000\054\005\uffa2" +
    "\006\uffa2\007\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015" +
    "\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2" +
    "\024\uffa2\033\uffa2\040\uffa2\042\uffa2\046\uffa2\047\uffa2\051" +
    "\uffa2\001\002\000\054\005\uffa0\006\uffa0\007\uffa0\011\uffa0" +
    "\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\033\uffa0\040\uffa0" +
    "\042\uffa0\046\uffa0\047\uffa0\051\uffa0\001\002\000\004\047" +
    "\125\001\002\000\004\041\122\001\002\000\044\005\024" +
    "\006\032\007\030\011\035\012\040\013\014\014\037\015" +
    "\034\016\021\017\012\020\036\021\031\022\033\023\026" +
    "\024\013\047\022\051\015\001\002\000\046\005\024\006" +
    "\032\007\030\011\035\012\040\013\014\014\037\015\034" +
    "\016\021\017\012\020\036\021\031\022\033\023\026\024" +
    "\013\042\124\047\022\051\015\001\002\000\046\005\uff9e" +
    "\006\uff9e\007\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015" +
    "\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e" +
    "\024\uff9e\042\uff9e\047\uff9e\051\uff9e\001\002\000\006\040" +
    "\uffb6\046\uffb6\001\002\000\004\041\127\001\002\000\044" +
    "\005\024\006\032\007\030\011\035\012\040\013\014\014" +
    "\037\015\034\016\021\017\012\020\036\021\031\022\033" +
    "\023\026\024\013\047\022\051\015\001\002\000\046\005" +
    "\024\006\032\007\030\011\035\012\040\013\014\014\037" +
    "\015\034\016\021\017\012\020\036\021\031\022\033\023" +
    "\026\024\013\042\131\047\022\051\015\001\002\000\046" +
    "\005\uff9f\006\uff9f\007\uff9f\011\uff9f\012\uff9f\013\uff9f\014" +
    "\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f" +
    "\023\uff9f\024\uff9f\042\uff9f\047\uff9f\051\uff9f\001\002\000" +
    "\004\047\133\001\002\000\006\040\uffb1\046\uffb1\001\002" +
    "\000\046\005\uffc2\006\uffc2\007\uffc2\011\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\042\uffc2\047\uffc2\051\uffc2\001" +
    "\002\000\006\047\137\050\136\001\002\000\014\026\104" +
    "\027\103\030\105\031\102\040\145\001\002\000\014\026" +
    "\055\027\054\030\056\031\052\040\143\001\002\000\004" +
    "\040\141\001\002\000\004\046\142\001\002\000\046\005" +
    "\uffcd\006\uffcd\007\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\042\uffcd\047\uffcd\051\uffcd\001\002\000\004" +
    "\046\144\001\002\000\046\005\uffcc\006\uffcc\007\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\042\uffcc\047" +
    "\uffcc\051\uffcc\001\002\000\004\046\146\001\002\000\046" +
    "\005\uffcb\006\uffcb\007\uffcb\011\uffcb\012\uffcb\013\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\042\uffcb\047\uffcb\051\uffcb\001\002\000" +
    "\044\005\024\006\032\007\030\011\035\012\040\013\014" +
    "\014\037\015\034\016\021\017\012\020\036\021\031\022" +
    "\033\023\026\024\013\047\022\051\015\001\002\000\046" +
    "\005\024\006\032\007\030\011\035\012\040\013\014\014" +
    "\037\015\034\016\021\017\012\020\036\021\031\022\033" +
    "\023\026\024\013\042\151\047\022\051\015\001\002\000" +
    "\004\012\152\001\002\000\004\037\153\001\002\000\012" +
    "\036\155\040\uffb0\047\156\050\043\001\002\000\004\040" +
    "\163\001\002\000\006\033\120\040\161\001\002\000\016" +
    "\026\055\027\054\030\056\031\052\033\053\040\157\001" +
    "\002\000\004\046\160\001\002\000\046\005\uff9a\006\uff9a" +
    "\007\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016" +
    "\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a" +
    "\042\uff9a\047\uff9a\051\uff9a\001\002\000\004\046\162\001" +
    "\002\000\046\005\uff9b\006\uff9b\007\uff9b\011\uff9b\012\uff9b" +
    "\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021" +
    "\uff9b\022\uff9b\023\uff9b\024\uff9b\042\uff9b\047\uff9b\051\uff9b" +
    "\001\002\000\004\046\164\001\002\000\046\005\uff9c\006" +
    "\uff9c\007\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c" +
    "\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024" +
    "\uff9c\042\uff9c\047\uff9c\051\uff9c\001\002\000\006\047\167" +
    "\050\166\001\002\000\014\026\104\027\103\030\105\031" +
    "\102\040\175\001\002\000\014\026\055\027\054\030\056" +
    "\031\052\040\173\001\002\000\004\040\171\001\002\000" +
    "\004\046\172\001\002\000\046\005\uffd6\006\uffd6\007\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\042\uffd6" +
    "\047\uffd6\051\uffd6\001\002\000\004\046\174\001\002\000" +
    "\046\005\uffd5\006\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\042\uffd5\047\uffd5\051\uffd5\001\002" +
    "\000\004\046\176\001\002\000\046\005\uffd4\006\uffd4\007" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\042" +
    "\uffd4\047\uffd4\051\uffd4\001\002\000\006\047\201\050\200" +
    "\001\002\000\014\026\104\027\103\030\105\031\102\040" +
    "\207\001\002\000\014\026\055\027\054\030\056\031\052" +
    "\040\205\001\002\000\004\040\203\001\002\000\004\046" +
    "\204\001\002\000\046\005\uffc7\006\uffc7\007\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\042\uffc7\047\uffc7" +
    "\051\uffc7\001\002\000\004\046\206\001\002\000\046\005" +
    "\uffc6\006\uffc6\007\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\042\uffc6\047\uffc6\051\uffc6\001\002\000\004" +
    "\046\210\001\002\000\046\005\uffc5\006\uffc5\007\uffc5\011" +
    "\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\042\uffc5\047" +
    "\uffc5\051\uffc5\001\002\000\046\005\uffee\006\uffee\007\uffee" +
    "\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\042\uffee" +
    "\047\uffee\051\uffee\001\002\000\052\005\uffef\006\uffef\007" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025" +
    "\217\042\uffef\046\216\047\uffef\051\uffef\001\002\000\004" +
    "\047\214\001\002\000\004\046\215\001\002\000\046\005" +
    "\uffe7\006\uffe7\007\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\042\uffe7\047\uffe7\051\uffe7\001\002\000\046" +
    "\005\ufff0\006\ufff0\007\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\042\ufff0\047\ufff0\051\ufff0\001\002\000" +
    "\012\036\221\046\uffb0\047\222\050\043\001\002\000\004" +
    "\046\225\001\002\000\006\033\120\046\224\001\002\000" +
    "\062\005\uffe8\006\uffe8\007\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\026\055\027\054\030\056\031\052" +
    "\033\053\042\uffe8\046\223\047\uffe8\051\uffe8\001\002\000" +
    "\046\005\uffe9\006\uffe9\007\uffe9\011\uffe9\012\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\042\uffe9\047\uffe9\051\uffe9\001\002" +
    "\000\046\005\uffd8\006\uffd8\007\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\042\uffd8\047\uffd8\051\uffd8\001" +
    "\002\000\046\005\uffdd\006\uffdd\007\uffdd\011\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\042\uffdd\047\uffdd\051\uffdd" +
    "\001\002\000\006\047\230\050\227\001\002\000\014\026" +
    "\104\027\103\030\105\031\102\040\236\001\002\000\014" +
    "\026\055\027\054\030\056\031\052\040\234\001\002\000" +
    "\004\040\232\001\002\000\004\046\233\001\002\000\046" +
    "\005\uffca\006\uffca\007\uffca\011\uffca\012\uffca\013\uffca\014" +
    "\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca" +
    "\023\uffca\024\uffca\042\uffca\047\uffca\051\uffca\001\002\000" +
    "\004\046\235\001\002\000\046\005\uffc9\006\uffc9\007\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\042\uffc9" +
    "\047\uffc9\051\uffc9\001\002\000\004\046\237\001\002\000" +
    "\046\005\uffc8\006\uffc8\007\uffc8\011\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\042\uffc8\047\uffc8\051\uffc8\001\002" +
    "\000\012\036\242\040\uffb0\047\243\050\043\001\002\000" +
    "\004\040\262\001\002\000\006\033\120\040\255\001\002" +
    "\000\016\026\055\027\054\030\056\031\052\033\053\040" +
    "\244\001\002\000\004\041\245\001\002\000\044\005\024" +
    "\006\032\007\030\011\035\012\040\013\014\014\037\015" +
    "\034\016\021\017\012\020\036\021\031\022\033\023\026" +
    "\024\013\047\022\051\015\001\002\000\046\005\024\006" +
    "\032\007\030\011\035\012\040\013\014\014\037\015\034" +
    "\016\021\017\012\020\036\021\031\022\033\023\026\024" +
    "\013\042\247\047\022\051\015\001\002\000\050\005\uffbc" +
    "\006\uffbc\007\uffbc\010\251\011\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\042\uffbc\047\uffbc\051\uffbc\001\002\000" +
    "\046\005\uffb9\006\uffb9\007\uffb9\011\uffb9\012\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\042\uffb9\047\uffb9\051\uffb9\001\002" +
    "\000\004\041\252\001\002\000\044\005\024\006\032\007" +
    "\030\011\035\012\040\013\014\014\037\015\034\016\021" +
    "\017\012\020\036\021\031\022\033\023\026\024\013\047" +
    "\022\051\015\001\002\000\046\005\024\006\032\007\030" +
    "\011\035\012\040\013\014\014\037\015\034\016\021\017" +
    "\012\020\036\021\031\022\033\023\026\024\013\042\254" +
    "\047\022\051\015\001\002\000\046\005\uffb8\006\uffb8\007" +
    "\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\042" +
    "\uffb8\047\uffb8\051\uffb8\001\002\000\004\041\256\001\002" +
    "\000\044\005\024\006\032\007\030\011\035\012\040\013" +
    "\014\014\037\015\034\016\021\017\012\020\036\021\031" +
    "\022\033\023\026\024\013\047\022\051\015\001\002\000" +
    "\046\005\024\006\032\007\030\011\035\012\040\013\014" +
    "\014\037\015\034\016\021\017\012\020\036\021\031\022" +
    "\033\023\026\024\013\042\260\047\022\051\015\001\002" +
    "\000\050\005\uffbd\006\uffbd\007\uffbd\010\251\011\uffbd\012" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\024\uffbd\042\uffbd\047\uffbd\051" +
    "\uffbd\001\002\000\046\005\uffba\006\uffba\007\uffba\011\uffba" +
    "\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020" +
    "\uffba\021\uffba\022\uffba\023\uffba\024\uffba\042\uffba\047\uffba" +
    "\051\uffba\001\002\000\004\041\263\001\002\000\044\005" +
    "\024\006\032\007\030\011\035\012\040\013\014\014\037" +
    "\015\034\016\021\017\012\020\036\021\031\022\033\023" +
    "\026\024\013\047\022\051\015\001\002\000\046\005\024" +
    "\006\032\007\030\011\035\012\040\013\014\014\037\015" +
    "\034\016\021\017\012\020\036\021\031\022\033\023\026" +
    "\024\013\042\265\047\022\051\015\001\002\000\050\005" +
    "\uffbe\006\uffbe\007\uffbe\010\251\011\uffbe\012\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\042\uffbe\047\uffbe\051\uffbe\001\002" +
    "\000\046\005\uffbb\006\uffbb\007\uffbb\011\uffbb\012\uffbb\013" +
    "\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb" +
    "\022\uffbb\023\uffbb\024\uffbb\042\uffbb\047\uffbb\051\uffbb\001" +
    "\002\000\004\040\270\001\002\000\004\046\271\001\002" +
    "\000\046\005\uffc4\006\uffc4\007\uffc4\011\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\042\uffc4\047\uffc4\051\uffc4\001" +
    "\002\000\046\005\ufff2\006\ufff2\007\ufff2\011\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\042\ufff2\047\ufff2\051\ufff2" +
    "\001\002\000\052\005\ufff3\006\ufff3\007\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\303\042\ufff3\046" +
    "\302\047\ufff3\051\ufff3\001\002\000\006\047\276\050\275" +
    "\001\002\000\012\026\104\027\103\030\105\031\102\001" +
    "\002\000\014\026\055\027\054\030\056\031\052\046\301" +
    "\001\002\000\004\046\300\001\002\000\046\005\uffe1\006" +
    "\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\042\uffe1\047\uffe1\051\uffe1\001\002\000\046\005\uffea" +
    "\006\uffea\007\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015" +
    "\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\024\uffea\042\uffea\047\uffea\051\uffea\001\002\000\046\005" +
    "\ufff4\006\ufff4\007\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\042\ufff4\047\ufff4\051\ufff4\001\002\000\010" +
    "\046\305\047\306\050\304\001\002\000\014\026\104\027" +
    "\103\030\105\031\102\046\312\001\002\000\046\005\uffeb" +
    "\006\uffeb\007\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\024\uffeb\042\uffeb\047\uffeb\051\uffeb\001\002\000\060\005" +
    "\uffec\006\uffec\007\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\026\055\027\054\030\056\031\052\042\uffec" +
    "\046\311\047\uffec\051\uffec\001\002\000\050\005\uffe2\006" +
    "\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\042\uffe2\046\310\047\uffe2\051\uffe2\001\002\000\046" +
    "\005\uffe3\006\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\042\uffe3\047\uffe3\051\uffe3\001\002\000" +
    "\046\005\uffed\006\uffed\007\uffed\011\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\042\uffed\047\uffed\051\uffed\001\002" +
    "\000\046\005\uffda\006\uffda\007\uffda\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\042\uffda\047\uffda\051\uffda\001" +
    "\002\000\046\005\ufff1\006\ufff1\007\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\042\ufff1\047\ufff1\051\ufff1" +
    "\001\002\000\004\046\334\001\002\000\014\026\055\027" +
    "\054\030\056\031\052\046\333\001\002\000\012\036\323" +
    "\046\uffb0\047\324\050\321\001\002\000\004\046\320\001" +
    "\002\000\046\005\uffde\006\uffde\007\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021" +
    "\uffde\022\uffde\023\uffde\024\uffde\042\uffde\047\uffde\051\uffde" +
    "\001\002\000\016\026\104\027\103\030\105\031\102\033" +
    "\132\046\332\001\002\000\004\046\331\001\002\000\006" +
    "\033\120\046\330\001\002\000\062\005\uffe5\006\uffe5\007" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\026" +
    "\055\027\054\030\056\031\052\033\053\042\uffe5\046\327" +
    "\047\uffe5\051\uffe5\001\002\000\052\005\uffdf\006\uffdf\007" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\033" +
    "\050\042\uffdf\046\326\047\uffdf\051\uffdf\001\002\000\046" +
    "\005\uffe0\006\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\042\uffe0\047\uffe0\051\uffe0\001\002\000" +
    "\046\005\uffe6\006\uffe6\007\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\042\uffe6\047\uffe6\051\uffe6\001\002" +
    "\000\046\005\uffd7\006\uffd7\007\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\042\uffd7\047\uffd7\051\uffd7\001" +
    "\002\000\046\005\uffdc\006\uffdc\007\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\042\uffdc\047\uffdc\051\uffdc" +
    "\001\002\000\046\005\uffd9\006\uffd9\007\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\042\uffd9\047\uffd9\051" +
    "\uffd9\001\002\000\046\005\uffe4\006\uffe4\007\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\042\uffe4\047\uffe4" +
    "\051\uffe4\001\002\000\046\005\uffdb\006\uffdb\007\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\042\uffdb\047" +
    "\uffdb\051\uffdb\001\002\000\006\047\337\050\336\001\002" +
    "\000\014\026\104\027\103\030\105\031\102\040\345\001" +
    "\002\000\014\026\055\027\054\030\056\031\052\040\343" +
    "\001\002\000\004\040\341\001\002\000\004\046\342\001" +
    "\002\000\046\005\uffd3\006\uffd3\007\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\042\uffd3\047\uffd3\051\uffd3" +
    "\001\002\000\004\046\344\001\002\000\046\005\uffd2\006" +
    "\uffd2\007\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\042\uffd2\047\uffd2\051\uffd2\001\002\000\004\046\346" +
    "\001\002\000\046\005\uffd1\006\uffd1\007\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\042\uffd1\047\uffd1\051" +
    "\uffd1\001\002\000\004\002\000\001\002\000\006\047\352" +
    "\050\351\001\002\000\014\026\104\027\103\030\105\031" +
    "\102\040\360\001\002\000\014\026\055\027\054\030\056" +
    "\031\052\040\356\001\002\000\004\040\354\001\002\000" +
    "\004\046\355\001\002\000\046\005\uffc1\006\uffc1\007\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\042\uffc1" +
    "\047\uffc1\051\uffc1\001\002\000\004\046\357\001\002\000" +
    "\046\005\uffc0\006\uffc0\007\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\042\uffc0\047\uffc0\051\uffc0\001\002" +
    "\000\004\046\361\001\002\000\046\005\uffbf\006\uffbf\007" +
    "\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\042" +
    "\uffbf\047\uffbf\051\uffbf\001\002\000\006\005\365\047\364" +
    "\001\002\000\004\040\u0109\001\002\000\004\025\u0103\001" +
    "\002\000\004\047\366\001\002\000\004\025\367\001\002" +
    "\000\004\050\370\001\002\000\004\046\371\001\002\000" +
    "\012\036\373\046\uffb0\047\374\050\043\001\002\000\004" +
    "\046\375\001\002\000\004\033\120\001\002\000\014\026" +
    "\055\027\054\030\056\031\052\033\053\001\002\000\004" +
    "\047\377\001\002\000\004\040\uff98\001\002\000\006\034" +
    "\u0100\035\u0101\001\002\000\004\050\u0102\001\002\000\004" +
    "\040\uff95\001\002\000\004\040\uff96\001\002\000\004\050" +
    "\u0104\001\002\000\004\046\u0105\001\002\000\012\036\373" +
    "\046\uffb0\047\374\050\043\001\002\000\004\046\u0107\001" +
    "\002\000\004\047\377\001\002\000\004\040\uff97\001\002" +
    "\000\004\041\u010a\001\002\000\044\005\024\006\032\007" +
    "\030\011\035\012\040\013\014\014\037\015\034\016\021" +
    "\017\012\020\036\021\031\022\033\023\026\024\013\047" +
    "\022\051\015\001\002\000\046\005\024\006\032\007\030" +
    "\011\035\012\040\013\014\014\037\015\034\016\021\017" +
    "\012\020\036\021\031\022\033\023\026\024\013\042\u010c" +
    "\047\022\051\015\001\002\000\046\005\uff99\006\uff99\007" +
    "\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99" +
    "\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\042" +
    "\uff99\047\uff99\051\uff99\001\002\000\004\040\u010e\001\002" +
    "\000\004\046\u010f\001\002\000\046\005\uffc3\006\uffc3\007" +
    "\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\042" +
    "\uffc3\047\uffc3\051\uffc3\001\002\000\006\047\u0112\050\u0111" +
    "\001\002\000\014\026\104\027\103\030\105\031\102\040" +
    "\u0118\001\002\000\014\026\055\027\054\030\056\031\052" +
    "\040\u0116\001\002\000\004\040\u0114\001\002\000\004\046" +
    "\u0115\001\002\000\046\005\uffd0\006\uffd0\007\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020" +
    "\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\042\uffd0\047\uffd0" +
    "\051\uffd0\001\002\000\004\046\u0117\001\002\000\046\005" +
    "\uffcf\006\uffcf\007\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\042\uffcf\047\uffcf\051\uffcf\001\002\000\004" +
    "\046\u0119\001\002\000\046\005\uffce\006\uffce\007\uffce\011" +
    "\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\042\uffce\047" +
    "\uffce\051\uffce\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\017\004\016\006\022\010\015\011" +
    "\026\012\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\062\006\063\010\061\011\065" +
    "\012\066\001\001\000\002\001\001\000\004\014\316\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\043" +
    "\014\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\060\004\016\006" +
    "\022\010\015\011\026\012\040\001\001\000\014\004\062" +
    "\006\063\010\061\011\065\012\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\122\004" +
    "\016\006\022\010\015\011\026\012\040\001\001\000\014" +
    "\004\062\006\063\010\061\011\065\012\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\127\004\016\006\022\010\015\011\026\012\040\001" +
    "\001\000\014\004\062\006\063\010\061\011\065\012\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\147\004" +
    "\016\006\022\010\015\011\026\012\040\001\001\000\014" +
    "\004\062\006\063\010\061\011\065\012\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\153\014\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\217\014\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\240\014\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\245\004\016\006\022\010\015\011\026\012\040\001\001" +
    "\000\014\004\062\006\063\010\061\011\065\012\066\001" +
    "\001\000\004\007\247\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\252\004\016\006\022\010\015\011" +
    "\026\012\040\001\001\000\014\004\062\006\063\010\061" +
    "\011\065\012\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\256\004\016\006\022\010\015\011\026" +
    "\012\040\001\001\000\014\004\062\006\063\010\061\011" +
    "\065\012\066\001\001\000\004\007\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\263\004\016\006" +
    "\022\010\015\011\026\012\040\001\001\000\014\004\062" +
    "\006\063\010\061\011\065\012\066\001\001\000\004\007" +
    "\265\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\276\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\306\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\321\014\324\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\337\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\352\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\362\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\371\014\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\375\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\u0105\014\046\001\001\000\002\001\001" +
    "\000\004\005\u0107\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\u010a\004\016\006\022\010\015\011\026" +
    "\012\040\001\001\000\014\004\062\006\063\010\061\011" +
    "\065\012\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\u0112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.d_for="("+o+", , ,"+i+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.d_for="("+o+","+n+", ,"+i+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.s_for="("+g+","+n+", ,"+i+")\nstartloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.s_for=PrincipalCompi.s_bool+"(jf loop"+PrincipalCompi.loop+":,"+PrincipalCompi.tempb+", , )\n";
    PrincipalCompi.tempb++;
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                a.setValor(n);
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIA_FOR ::= Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.s_for="("+t+", , ,"+i+")\n("+g+","+n+", ,"+i+")\nstartloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.s_for=PrincipalCompi.s_bool+"(iff,TB"+PrincipalCompi.tempb+", , )\n(jnz loop"+PrincipalCompi.loop+":, , , )\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            a=new Simbolo(i,t,n);
            PrincipalCompi.tabla_simbolos.add(a);
        }else{
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.fors=PrincipalCompi.s_for+PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.d_for+"loop"+PrincipalCompi.loop+":\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.dowhiles="startloop"+PrincipalCompi.loop+":\n"+PrincipalCompi.sentencia[PrincipalCompi.status];
    PrincipalCompi.dowhiles=PrincipalCompi.dowhiles+"(jt startloop"+PrincipalCompi.loop+":,"+o+", , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.loop++;
    PrincipalCompi.sentencia[PrincipalCompi.status]="";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(o.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el identificador "+o+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("bool")){
                PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el identificador "+o+" no es de tipo bool");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el identificador "+o+" no ha sido inicializado");
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a Op_booleano Parentesis_c P_coma 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.dowhiles="startloop"+PrincipalCompi.loop+":\n"+PrincipalCompi.sentencia[PrincipalCompi.status];
    PrincipalCompi.dowhiles=PrincipalCompi.dowhiles+"(jt startloop"+PrincipalCompi.loop+":,"+o+", , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.loop++;
    PrincipalCompi.sentencia[PrincipalCompi.status]="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.dowhiles="startloop"+PrincipalCompi.loop+":\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.s_bool;
    PrincipalCompi.dowhiles=PrincipalCompi.dowhiles+"(jt startloop"+PrincipalCompi.loop+":,TB"+PrincipalCompi.tempb+", , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.tempb++;
    PrincipalCompi.loop++;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // WHILE ::= While Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.whiles="startloop"+PrincipalCompi.loop+":\n"+"(jf loop"+PrincipalCompi.loop+":,"+o+", , )\n";
    PrincipalCompi.whiles=PrincipalCompi.whiles+PrincipalCompi.sentencia[PrincipalCompi.status]+"(jmp startloop"+PrincipalCompi.loop+":, , , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.loop++;
    PrincipalCompi.s_bool=PrincipalCompi.sentencia[PrincipalCompi.status]="";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(o.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el identificador "+o+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("bool")){
                PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el identificador "+o+" no es de tipo bool");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el identificador "+o+" no ha sido inicializado");
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // WHILE ::= While Parentesis_a Op_booleano Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.whiles="startloop"+PrincipalCompi.loop+":\n"+"(jf loop"+PrincipalCompi.loop+":,"+o+", , )\n";
    PrincipalCompi.whiles=PrincipalCompi.whiles+PrincipalCompi.sentencia[PrincipalCompi.status]+"(jmp startloop"+PrincipalCompi.loop+":, , , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.loop++;
    PrincipalCompi.s_bool=PrincipalCompi.sentencia[PrincipalCompi.status]="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.whiles="startloop"+PrincipalCompi.loop+":\n"+PrincipalCompi.s_bool+"(jf loop"+PrincipalCompi.loop+":,TB"+PrincipalCompi.tempb+", , )\n";
    PrincipalCompi.whiles=PrincipalCompi.whiles+PrincipalCompi.sentencia[PrincipalCompi.status]+"(jmp startloop"+PrincipalCompi.loop+":, , , )\nloop"+PrincipalCompi.loop+":\n";
    PrincipalCompi.loop++;
    PrincipalCompi.tempb++;
    PrincipalCompi.s_bool=PrincipalCompi.sentencia[PrincipalCompi.status]="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_ARITMETICA ::= Identificador Division Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
    Simbolo b=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
            if(n.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                b=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null || b==null){
            if(a==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
            }
            if(b==null){
                PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido declarado");
            }
        }else{
            if(!a.getTipo().toString().equals("int") || !b.getTipo().toString().equals("int")){
                if(!a.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                }
                if(!b.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no es de tipo int");
                }
            }else{
                if(a.getValor()==null||b.getValor()==null){
                    if(a.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                    }
                    if(b.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido inicializado");
                    }
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())+Integer.parseInt(b.getValor().toString());
                }
            }
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_ARITMETICA ::= Numero Division Identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(n.toString())/Integer.parseInt(a.getValor().toString());
                }
            }
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_ARITMETICA ::= Identificador Division Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())/Integer.parseInt(n.toString());
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_ARITMETICA ::= Numero Division Numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.value=Integer.parseInt(n.toString())/Integer.parseInt(i.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA_ARITMETICA ::= Identificador Multiplicacion Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
    Simbolo b=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
            if(n.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                b=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null || b==null){
            if(a==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
            }
            if(b==null){
                PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido declarado");
            }
        }else{
            if(!a.getTipo().toString().equals("int") || !b.getTipo().toString().equals("int")){
                if(!a.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                }
                if(!b.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no es de tipo int");
                }
            }else{
                if(a.getValor()==null||b.getValor()==null){
                    if(a.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                    }
                    if(b.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido inicializado");
                    }
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())+Integer.parseInt(b.getValor().toString());
                }
            }
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA_ARITMETICA ::= Numero Multiplicacion Identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(n.toString())*Integer.parseInt(a.getValor().toString());
                }
            }
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIA_ARITMETICA ::= Identificador Multiplicacion Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())*Integer.parseInt(n.toString());
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA_ARITMETICA ::= Numero Multiplicacion Numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.value=Integer.parseInt(n.toString())*Integer.parseInt(i.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIA_ARITMETICA ::= Identificador Resta Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
    Simbolo b=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
            if(n.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                b=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null || b==null){
            if(a==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
            }
            if(b==null){
                PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido declarado");
            }
        }else{
            if(!a.getTipo().toString().equals("int") || !b.getTipo().toString().equals("int")){
                if(!a.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                }
                if(!b.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no es de tipo int");
                }
            }else{
                if(a.getValor()==null||b.getValor()==null){
                    if(a.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                    }
                    if(b.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido inicializado");
                    }
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())+Integer.parseInt(b.getValor().toString());
                }
            }
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA_ARITMETICA ::= Numero Resta Identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(n.toString())-Integer.parseInt(a.getValor().toString());
                }
            }
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA_ARITMETICA ::= Identificador Resta Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())-Integer.parseInt(n.toString());
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_ARITMETICA ::= Numero Resta Numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    PrincipalCompi.value=Integer.parseInt(n.toString())-Integer.parseInt(i.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA_ARITMETICA ::= Identificador Suma Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
    Simbolo b=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
            if(n.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                b=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null || b==null){
            if(a==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
            }
            if(b==null){
                PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido declarado");
            }
        }else{
            if(!a.getTipo().toString().equals("int") || !b.getTipo().toString().equals("int")){
                if(!a.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                }
                if(!b.getTipo().toString().equals("int")){
                    PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no es de tipo int");
                }
            }else{
                if(a.getValor()==null||b.getValor()==null){
                    if(a.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                    }
                    if(b.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido inicializado");
                    }
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())+Integer.parseInt(b.getValor().toString());
                }
            }
        }
        

    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_ARITMETICA ::= Numero Suma Identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(n.toString())+Integer.parseInt(a.getValor().toString());
                }
            }
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_ARITMETICA ::= Identificador Suma Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+i+","+n+",TA"+PrincipalCompi.temp+")\n";
        Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }else{
                    PrincipalCompi.value=Integer.parseInt(a.getValor().toString())+Integer.parseInt(n.toString());
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_ARITMETICA ::= Numero Suma Numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_arit="("+s+","+n+","+i+",TA"+PrincipalCompi.temp+")\n";
        PrincipalCompi.value=Integer.parseInt(n.toString())+Integer.parseInt(i.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ARITMETICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_BOOLEANA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_BOOLEANA ::= Numero Op_relacional Identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool=PrincipalCompi.s_arit+"("+o+","+n+","+i+",TB"+PrincipalCompi.tempb+")\n";
    PrincipalCompi.temp++;
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("int")){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
        }else{
            if(a.getValor()==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
            }else{
                switch(o.toString()){
                    case ">":PrincipalCompi.valueb=Integer.parseInt(n.toString())>Integer.parseInt(a.getValor().toString());break;
                    case "<":PrincipalCompi.valueb=Integer.parseInt(n.toString())<Integer.parseInt(a.getValor().toString());break;
                    case "==":PrincipalCompi.valueb=Integer.parseInt(n.toString())==Integer.parseInt(a.getValor().toString());break;
                    case "!=": PrincipalCompi.valueb=Integer.parseInt(n.toString())!=Integer.parseInt(a.getValor().toString());break;
                    case ">=": PrincipalCompi.valueb=Integer.parseInt(n.toString())>=Integer.parseInt(a.getValor().toString());break;
                    case "<=": PrincipalCompi.valueb=Integer.parseInt(n.toString())<=Integer.parseInt(a.getValor().toString());break;
                    case ">>": PrincipalCompi.valueb=Integer.parseInt(n.toString())>Integer.parseInt(a.getValor().toString());break;
                    case "<<": PrincipalCompi.valueb=Integer.parseInt(n.toString())<Integer.parseInt(a.getValor().toString());break;
                    default:break;
                }
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool="("+o+","+i+","+n+",TB"+PrincipalCompi.tempb+")\n";
    PrincipalCompi.temp++;
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("int")){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
        }else{
            if(a.getValor()==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
            }else{
                switch(o.toString()){
                    case ">":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(n.toString());break;
                    case "<":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<Integer.parseInt(n.toString());break;
                    case "==":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())==Integer.parseInt(n.toString());break;
                    case "!=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())!=Integer.parseInt(n.toString());break;
                    case ">=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>=Integer.parseInt(n.toString());break;
                    case "<=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<=Integer.parseInt(n.toString());break;
                    case ">>": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(n.toString());break;
                    case "<<": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<Integer.parseInt(n.toString());break;
                    default:break;
                }
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool=PrincipalCompi.s_arit+"("+o+","+i+","+n+",TB"+PrincipalCompi.tempb+")\n";
    Simbolo a=null;
    Simbolo b=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
        if(n.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            b=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null || b==null){
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
        if(b==null){
            PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido declarado");
        }
    }else{
        if(!a.getTipo().toString().equals("int")||!b.getTipo().toString().equals("int")){
            if(!a.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }
            if(!b.getTipo().toString().equals("int")){
                PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no es de tipo int");
            }
        }else{
            if(a.getValor()==null||b.getValor()==null){
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }
                if(b.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(nright+1)+"; el identificador "+n+" no ha sido inicializado");
                }
            }else{
                switch(o.toString()){
                    case ">":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(b.getValor().toString());break;
                    case "<":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<Integer.parseInt(b.getValor().toString());break;
                    case "==":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())==Integer.parseInt(b.getValor().toString());break;
                    case "!=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())!=Integer.parseInt(b.getValor().toString());break;
                    case ">=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>=Integer.parseInt(b.getValor().toString());break;
                    case "<=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<=Integer.parseInt(b.getValor().toString());break;
                    case ">>": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(b.getValor().toString());break;
                    case "<<": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<Integer.parseInt(b.getValor().toString());break;
                    default:break;
                }
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_BOOLEANA ::= SENTENCIA_ARITMETICA Op_relacional Identificador 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool=PrincipalCompi.s_arit+"("+o+",TA"+PrincipalCompi.temp+","+i+",TB"+PrincipalCompi.tempb+")\n";
    PrincipalCompi.temp++;
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("int")){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
        }else{
            if(a.getValor()==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
            }else{
                if(PrincipalCompi.value!=null){
                    switch(o.toString()){
                        case ">":PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())>Integer.parseInt(a.getValor().toString());break;
                        case "<":PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())<Integer.parseInt(a.getValor().toString());break;
                        case "==":PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())==Integer.parseInt(a.getValor().toString());break;
                        case "!=": PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())!=Integer.parseInt(a.getValor().toString());break;
                        case ">=": PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())>=Integer.parseInt(a.getValor().toString());break;
                        case "<=": PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())<=Integer.parseInt(a.getValor().toString());break;
                        case ">>": PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())>Integer.parseInt(a.getValor().toString());break;
                        case "<<": PrincipalCompi.valueb=Integer.parseInt(PrincipalCompi.value.toString())<Integer.parseInt(a.getValor().toString());break;
                        default:break;
                    }
                    PrincipalCompi.value=null;
                }
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional SENTENCIA_ARITMETICA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.s_bool=PrincipalCompi.s_arit+"("+o+","+i+",TA"+PrincipalCompi.temp+",TB"+PrincipalCompi.tempb+")\n";
    PrincipalCompi.temp++;
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("int")){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
        }else{
            if(a.getValor()==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
            }else{
                if(PrincipalCompi.value!=null){
                    switch(o.toString()){
                        case ">":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(PrincipalCompi.value.toString());break;
                        case "<":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<Integer.parseInt(PrincipalCompi.value.toString());break;
                        case "==":PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())==Integer.parseInt(PrincipalCompi.value.toString());break;
                        case "!=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())!=Integer.parseInt(PrincipalCompi.value.toString());break;
                        case ">=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>=Integer.parseInt(PrincipalCompi.value.toString());break;
                        case "<=": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())<=Integer.parseInt(PrincipalCompi.value.toString());break;
                        case ">>": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(PrincipalCompi.value.toString());break;
                        case "<<": PrincipalCompi.valueb=Integer.parseInt(a.getValor().toString())>Integer.parseInt(PrincipalCompi.value.toString());break;
                        default:break;
                    }
                    PrincipalCompi.value=null;
                }
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_BOOLEANA ::= Op_booleano Op_relacional Identificador 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool="("+o+","+b+","+i+",TB"+PrincipalCompi.tempb+")\n";
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("bool")){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo bool");
        }else{
            if(a.getValor()==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
            }else{
                switch(o.toString()){
                    case "==": PrincipalCompi.valueb=(Boolean.parseBoolean(a.getValor().toString()) && Boolean.parseBoolean(b.toString()));break;
                    case "!=": PrincipalCompi.valueb=(Boolean.parseBoolean(a.getValor().toString()) != Boolean.parseBoolean(b.toString()));break;
                    default:
                        PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el operador "+o+" no es válido");
                        break;
                }
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.s_bool="("+o+","+i+","+b+",TB"+PrincipalCompi.tempb+")\n";
    Simbolo a=null;
    for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
        if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre())){
            a=PrincipalCompi.tabla_simbolos.get(it);
        }
    }
    if(a==null){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        if(!a.getTipo().toString().equals("bool")){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo bool");
        }else{
            if(a.getValor()==null){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
            }else{
                switch(o.toString()){
                    case "==": PrincipalCompi.valueb=(Boolean.parseBoolean(a.getValor().toString()) && Boolean.parseBoolean(b.toString()));break;
                    case "!=": PrincipalCompi.valueb=(Boolean.parseBoolean(a.getValor().toString()) != Boolean.parseBoolean(b.toString()));break;
                    default:
                        PrincipalCompi.err.add("Error semántico linea:"+(oright+1)+"; el operador "+o+" no es válido");
                        break;
                }
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ELSE ::= Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.elses=PrincipalCompi.sentencia[PrincipalCompi.status];
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IF ::= If Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA Llave_c ELSE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,"+i+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"(jmp choice"+(PrincipalCompi.choice+1)+":, , , )\n"+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.choice++;
    PrincipalCompi.ifs=PrincipalCompi.ifs+PrincipalCompi.elses+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool=PrincipalCompi.elses="";
    PrincipalCompi.choice++;
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("bool")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo bool");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IF ::= If Parentesis_a Op_booleano Parentesis_c Llave_a SENTENCIA Llave_c ELSE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,"+o+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"(jmp choice"+(PrincipalCompi.choice+1)+":, , , )\n"+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.tempb++;
    PrincipalCompi.choice++;
    PrincipalCompi.ifs=PrincipalCompi.ifs+PrincipalCompi.elses+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool=PrincipalCompi.elses="";
    PrincipalCompi.choice++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c ELSE 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.s_bool;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,TB"+PrincipalCompi.tempb+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"(jmp choice"+PrincipalCompi.choice+":, , , )\n"+"choice"+(PrincipalCompi.choice+1)+":\n";
    PrincipalCompi.tempb++;
    PrincipalCompi.choice++;
    PrincipalCompi.ifs=PrincipalCompi.ifs+PrincipalCompi.elses+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool=PrincipalCompi.elses="";
    PrincipalCompi.choice++;
    PrincipalCompi.valueb=null;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IF ::= If Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,"+i+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool="";
    PrincipalCompi.choice++;
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(!a.getTipo().toString().equals("bool")){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo bool");
            }else{
                if(a.getValor()==null){
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                }
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IF ::= If Parentesis_a Op_booleano Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,"+o+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool="";
    PrincipalCompi.choice++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.ifs=PrincipalCompi.s_bool;
    PrincipalCompi.ifs=PrincipalCompi.ifs+"(jf choice"+PrincipalCompi.choice+":,TB"+PrincipalCompi.tempb+", , )\n"+PrincipalCompi.sentencia[PrincipalCompi.status]+"choice"+PrincipalCompi.choice+":\n";
    PrincipalCompi.tempb++;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.s_bool="";
    PrincipalCompi.choice++;
    PrincipalCompi.valueb=null;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= WaitTime Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= WaitTime Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= WaitTime Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    PrincipalCompi.value=null;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= StopLoop P_coma 
            {
              Object RESULT =null;
		
    PrincipalCompi.declaracion="(jmp loop"+PrincipalCompi.loop+":, , , )\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= HitToTheRight Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.declaracion="("+a+", , , )\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= HitToTheLeft Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
    PrincipalCompi.declaracion="("+a+", , , )\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= SpinBallRight Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= SpinBallRight Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= SpinBallRight Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    PrincipalCompi.value=null;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= SpinBallLeft Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= SpinBallLeft Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= SpinBallLeft Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    PrincipalCompi.value=null;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= MoveBackCrane Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= MoveBackCrane Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= MoveBackCrane Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    PrincipalCompi.value=null;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= MoveFowardCrane Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= MoveFowardCrane Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= MoveFowardCrane Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    PrincipalCompi.value=null;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= SpinCraneRight Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= SpinCraneRight Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= SpinCraneRight Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    PrincipalCompi.value=null;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= SpinCraneLeft Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= SpinCraneLeft Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+a+","+i+", , )\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        n++;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= SpinCraneLeft Parentesis_a SENTENCIA_ARITMETICA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+a+",TA"+PrincipalCompi.temp+", , )\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    PrincipalCompi.value=null;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Identificador Igual Op_booleano P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+g+","+o+", ,"+i+")\n";
    int num=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("bool")){
                    temp.setValor(o);
                    num++;
                    break;
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo bool");
                    num++;
                    break;
                }
            }
        }
        if(num==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Bool Identificador Igual Op_booleano P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n("+g+","+o+", ,"+i+")\n";
    int num=0;
    Simbolo s=new Simbolo(i,t,o);
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.tabla_simbolos.add(s);
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
                num++;
                break;
            }
        }
        if(num==0){
            PrincipalCompi.tabla_simbolos.add(s);
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+g+","+n+", ,"+i+")\n";
    int num=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    temp.setValor(n);
                    num++;
                    break;
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo entero");
                    num++;
                    break;
                }
            }
        }
        if(num==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n("+g+","+n+", ,"+i+")\n";
    int num=0;
    Simbolo s=new Simbolo(i,t,n);
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.tabla_simbolos.add(s);
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
                num++;
                break;
            }
        }
        if(num==0){
            PrincipalCompi.tabla_simbolos.add(s);
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Identificador Op_incremento P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+o+", , ,"+i+")\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                if(temp.getTipo().toString().equals("int")){
                    if(temp.getValor()==null){
                        PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido inicializado");
                        n++;
                        break;
                    }else{
                        int num=Integer.parseInt(temp.getValor().toString());
                        num++;
                        temp.setValor(num);
                        n++;
                        break;
                    }
                }else{
                    PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
                    n++;
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Identificador Igual SENTENCIA_BOOLEANA P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_bool+"("+g+",TB"+PrincipalCompi.temp+", ,"+i+")\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_bool="";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(a.getTipo().toString().equals("bool")){
                a.setValor(PrincipalCompi.valueb);
                PrincipalCompi.valueb=null;
            }else{
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo bool");
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Bool Identificador Igual SENTENCIA_BOOLEANA P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n"+PrincipalCompi.s_bool+"("+g+",TB"+PrincipalCompi.temp+", ,"+i+")\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_bool="";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            a=new Simbolo(i,t,PrincipalCompi.valueb);
            PrincipalCompi.tabla_simbolos.add(a);
            PrincipalCompi.valueb=null;
        }else{
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Identificador SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un signo de igual");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Identificador Igual SENTENCIA_ARITMETICA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Identificador Igual SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion=PrincipalCompi.s_arit+"("+g+",TA"+PrincipalCompi.temp+", ,"+i+")\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no ha sido declarado");
        }else{
            if(a.getTipo().toString().equals("int")){
                a.setValor(PrincipalCompi.value);
                PrincipalCompi.value=null;
            }else{
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" no es de tipo int");
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Int Igual SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(tright+1)+"; falta la declaración de un identificador");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Int Identificador Igual SENTENCIA_ARITMETICA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Int Identificador Igual SENTENCIA_ARITMETICA P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n"+PrincipalCompi.s_arit+"("+g+",TA"+PrincipalCompi.temp+", ,"+i+")\n";
    PrincipalCompi.temp++;
    PrincipalCompi.s_arit="";
    Simbolo a=null;
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            if(i.equals(PrincipalCompi.tabla_simbolos.get(it).getNombre().toString())){
                a=PrincipalCompi.tabla_simbolos.get(it);
            }
        }
        if(a==null){
            a=new Simbolo(i,t,PrincipalCompi.value);
            PrincipalCompi.tabla_simbolos.add(a);
            PrincipalCompi.value=null;
        }else{
            PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Identificador Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un signo de igual");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Identificador Igual Identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(aright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+g+","+b+", ,"+a+")";
    int n=0;
    Simbolo s1=null;
    Simbolo s2=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(aright+1)+"; el identificador "+a+" y "+b+" no han sido declarados");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            Simbolo temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(a)){
                s1=temp;
                for(int at=0;at<PrincipalCompi.tabla_simbolos.size();at++){
                    Simbolo temp2=PrincipalCompi.tabla_simbolos.get(at);
                    if(temp2.getNombre().equals(b)){
                        s2=temp2;
                        if(temp.getTipo().equals(temp2.getTipo())){
                            if(temp2.getValor()==null){
                                n++;
                                PrincipalCompi.err.add("Error semántico linea:"+(bright+1)+"; el identificador "+b+" no ha sido inicializado");
                                break;
                            }else{
                                n++;
                                Object v=temp2.getValor();
                                temp.setValor(v);
                                break;
                            }
                        }else{
                            n++;
                            PrincipalCompi.err.add("Error semántico linea:"+(aright+1)+"; los tipos de dato de "+a+" y "+b+" son incompatibles");
                            break;
                        }
                    }
                }
            }
        }
        if(n==0){
            if(s1==null){
                PrincipalCompi.err.add("Error semántico linea:"+(aright+1)+"; el identificador "+a+" no ha sido declarado");
            }
            if(s2==null){
                PrincipalCompi.err.add("Error semántico linea:"+(bright+1)+"; el identificador "+b+" no ha sido declarado");
            }
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Bool Igual Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(tright+1)+"; falta la declaración de un identificador");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Bool Identificador Igual Identificador 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Bool Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n("+g+","+l+", ,"+i+")\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el identificador "+l+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                n++;
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
                break;
            }else if(temp.getNombre().equals(l)){
                if(temp.getTipo().equals(t)){
                    if(temp.getValor()==null){
                        n++;
                        PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el identificador "+l+" no ha sido inicializado");
                        break;
                    }else{
                        n++;
                        Object v=temp.getValor();
                        Simbolo s=new Simbolo(i,t,v);
                        PrincipalCompi.tabla_simbolos.add(s);
                        break;
                    }
                }else{
                    n++;
                    PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el valor de "+l+" no es de tipo bool");
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el identificador "+l+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Int Igual Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(tright+1)+"; falta la declaración de un identificador");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Int Identificador Igual P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un valor entero o identificador tipo int para asignar");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Int Identificador Igual Identificador 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Int Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n("+g+","+l+", ,"+i+")\n";
    int n=0;
    Simbolo temp=null;
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el identificador "+l+" no ha sido declarado");
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                n++;
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
                break;
            }else if(temp.getNombre().equals(l)){
                if(temp.getTipo().equals(t)){
                    if(temp.getValor()==null){
                        n++;
                        PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el identificador "+l+" no ha sido inicializado");
                        break;
                    }else{
                        n++;
                        Object v=temp.getValor();
                        Simbolo s=new Simbolo(i,t,v);
                        PrincipalCompi.tabla_simbolos.add(s);
                        break;
                    }
                }else{
                    n++;
                    PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el valor de "+l+" no es de tipo int");
                    break;
                }
            }
        }
        if(n==0){
            PrincipalCompi.err.add("Error semántico linea:"+(lright+1)+"; el identificador "+l+" no ha sido declarado");
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Bool P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(tright+1)+"; falta la declaración de un identificador");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Bool Identificador 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Bool Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n";
    int n=0;
    Simbolo temp=null;
    Simbolo s=new Simbolo(i,t,null);
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.tabla_simbolos.add(s);
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
                n++;
                break;
            }
        }
        if(n==0){
            PrincipalCompi.tabla_simbolos.add(s);
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= Identificador P_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta la asignación de un tipo de dato");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= Int P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(tright+1)+"; falta la declaración de un identificador");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= Int Identificador 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    PrincipalCompi.err.add("Error sintáctico linea:"+(iright+1)+"; falta un punto y coma al final de la sentencia");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    PrincipalCompi.declaracion="("+t+", , ,"+i+")\n";
    int n=0;
    Simbolo temp=null;
    Simbolo s=new Simbolo(i,t,null);
    if(PrincipalCompi.tabla_simbolos.isEmpty()){
        PrincipalCompi.tabla_simbolos.add(s);
    }else{
        for(int it=0;it<PrincipalCompi.tabla_simbolos.size();it++){
            temp=PrincipalCompi.tabla_simbolos.get(it);
            if(temp.getNombre().equals(i)){
                PrincipalCompi.err.add("Error semántico linea:"+(iright+1)+"; el identificador "+i+" ya fue declarado anteriormente");
                n++;
                break;
            }
        }
        if(n==0){
            PrincipalCompi.tabla_simbolos.add(s);
        }
    }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;
		
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.fors;
    PrincipalCompi.fors="";
    PrincipalCompi.status++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.fors;
    PrincipalCompi.fors="";
    PrincipalCompi.status++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;
		
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.dowhiles;
    PrincipalCompi.dowhiles="";
    PrincipalCompi.status++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.dowhiles;
    PrincipalCompi.dowhiles="";
    PrincipalCompi.status++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;
		
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.whiles;
    PrincipalCompi.whiles="";
    PrincipalCompi.status++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.whiles;
    PrincipalCompi.whiles="";
    PrincipalCompi.status++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= IF 
            {
              Object RESULT =null;
		
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.ifs;
    PrincipalCompi.ifs="";
    PrincipalCompi.status++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.ifs;
    PrincipalCompi.ifs="";
    PrincipalCompi.status++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;
		
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.declaracion;
    PrincipalCompi.declaracion="";
    PrincipalCompi.status++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.sentencia[PrincipalCompi.status]=PrincipalCompi.sentencia[PrincipalCompi.status]+PrincipalCompi.declaracion;
    PrincipalCompi.declaracion="";
    PrincipalCompi.status++;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Start Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Start Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		
    PrincipalCompi.status--;
    PrincipalCompi.ci=PrincipalCompi.sentencia[PrincipalCompi.status];
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

